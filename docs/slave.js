!function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var n={};e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=129)}({115:function(t,e,n){function r(t,e){this._id=t,this._clearFn=e}var i=Function.prototype.apply;e.setTimeout=function(){return new r(i.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new r(i.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(240),e.setImmediate=setImmediate,e.clearImmediate=clearImmediate},116:function(t,e,n){"use strict";function r(t){var e=t.stack||t;console&&console.error?console.error(e):console&&console.log&&console.log(e)}function i(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=l.default.createWithMemory());return e}function o(t,e){var n={};for(var r in t)t.hasOwnProperty(r)&&(n[r]=t[r](e[r],r),n[r]&&"object"==typeof n[r]&&(n[r]._isCycleSource=r));return n}function a(t){for(var e in t)t.hasOwnProperty(e)&&t[e]&&"function"==typeof t[e].shamefullySendNext&&(t[e]=p.adapt(t[e]));return t}function s(t,e){var n=Object.keys(t).filter(function(t){return!!e[t]}),i={},o={};n.forEach(function(t){i[t]={_n:[],_e:[]},o[t]={next:function(e){return i[t]._n.push(e)},error:function(e){return i[t]._e.push(e)},complete:function(){}}});var a=n.map(function(e){return l.default.fromObservable(t[e]).subscribe(o[e])});return n.forEach(function(t){var n=e[t],a=function(t){n._n(t)},s=function(t){r(t),n._e(t)};i[t]._n.forEach(a),i[t]._e.forEach(s),o[t].next=a,o[t].error=s,o[t]._n=a,o[t]._e=s}),i=null,function(){a.forEach(function(t){return t.unsubscribe()}),n.forEach(function(t){return e[t]._c()})}}function u(t){for(var e in t)t.hasOwnProperty(e)&&t[e]&&t[e].dispose&&t[e].dispose()}function c(t){return 0===Object.keys(t).length}function h(t,e){function n(){var t=s(l,r);return function(){u(h),t()}}if("function"!=typeof t)throw new Error("First argument given to Cycle must be the 'main' function.");if("object"!=typeof e||null===e)throw new Error("Second argument given to Cycle must be an object with driver functions as properties.");if(c(e))throw new Error("Second argument given to Cycle must be an object with at least one driver function declared as a property.");var r=i(e),h=o(e,r),f=a(h),l=t(f);return"undefined"!=typeof window&&(window.Cyclejs=window.Cyclejs||{},window.Cyclejs.sinks=l),{sinks:l,sources:h,run:n}}function f(t,e){var n=h(t,e),r=n.run,i=n.sinks;return"undefined"!=typeof window&&window.CyclejsDevTool_startGraphSerializer&&window.CyclejsDevTool_startGraphSerializer(i),r()}Object.defineProperty(e,"__esModule",{value:!0});var l=n(23),p=n(44);e.setup=h,e.run=f,e.default=f},119:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.firebaseConfig={apiKey:"AIzaSyCHvJ-2m_Cn_JqUxXmwqvqy9b-6FbsYtEI",authDomain:"brilliant-inferno-6675.firebaseapp.com",databaseURL:"https://brilliant-inferno-6675.firebaseio.com",storageBucket:"brilliant-inferno-6675.appspot.com"}},12:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.objectPropsToArray=function(t){return Object.keys(t).map(function(e){return{key:e,value:t[e]}})},e.logWithPerf=function(t,e){return console.log(t,performance.now().toFixed(2),e,"ok")}},120:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.makeFirebaseDriver=e.update=e.transaction=e.set=e.remove=e.push=e.logout=e.loginWithFacebook=e.loginWithEmailAndPassword=e.createUserWithEmailAndPassword=void 0;var r=n(23),i=function(t){return t&&t.__esModule?t:{default:t}}(r),o=n(44),a=n(144);e.createUserWithEmailAndPassword=function(t,e){return{type:"CREATE_USER",email:t,password:e}},e.loginWithEmailAndPassword=function(t,e){return{type:"LOGIN_EMAIL",email:t,password:e}},e.loginWithFacebook=function(){return{type:"LOGIN_FACEBOOK"}},e.logout=function(){return{type:"LOGOUT"}},e.push=function(t){return{type:"PUSH",path:t.path,value:t.value}},e.remove=function(t){return{type:"REMOVE",path:t}},e.set=function(t){return{type:"SET",path:t.path,value:t.value}},e.transaction=function(t){return{type:"TRANSACTION",path:t.path,updateFn:t.updateFn}},e.update=function(t){return{type:"UPDATE",path:t.path,value:t.value}},e.makeFirebaseDriver=function(t){return function(e){var n=(0,a.initializeApp)(t),r=n.auth(),s=n.database(),u=void 0,c=function(t,e){if(u){var n=(0,o.adapt)(i.default.create({start:function(n){return t.then(function(){return n.next({action:e})},function(t){return n.error({err:t,action:e})})},stop:function(){}}));u.next(n)}};return e.addListener({complete:function(){},error:function(t){return console.error("Firebase sink error:",t)},next:function(t){switch(t.type){case"CREATE_USER":c(r.createUserWithEmailAndPassword(t.email,t.password),t);break;case"LOGIN_EMAIL":c(r.signInWithEmailAndPassword(t.email,t.password),t);break;case"LOGIN_FACEBOOK":var e=new a.auth.FacebookAuthProvider;c(r.signInWithPopup(e),t);break;case"LOGOUT":c(r.signOut(),t);break;case"PUSH":c(s.ref(t.path).push(t.value),t);break;case"REMOVE":c(s.ref(t.path).remove(),t);break;case"SET":c(s.ref(t.path).set(t.value),t);break;default:console.error("Firebase driver: ACTION TYPE NOT VALID")}}}),{authentication:(0,o.adapt)(i.default.create({start:function(t){return n.auth().onAuthStateChanged(function(e){return t.next(e)})},stop:function(){}})),on:function(t,e){return(0,o.adapt)(i.default.create({start:function(n){return s.ref(t).on(e,function(t){return n.next(t.val())})},stop:function(){}}))},response:(0,o.adapt)(i.default.create({start:function(t){return u=t},stop:function(){return u=void 0}}))}}}},121:function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=n(23),a=r(o),s=n(241),u=r(s),c=n(12),h=function(t){var e=t.STATE,n=t.ACTION,r=t.firebase,o=n.filter(function(t){return"TICKER_TOGGLE"===t.type}),s=e.map(function(t){return t.ticking}),h=o.compose((0,u.default)(s)).map(function(t){return{type:i(t,2)[1]?"TICKER_STOP":"TICKER_START",meta:{toMain:!0}}}),f=n.filter(function(t){return"NAME_GET"===t.type}),l=f.mapTo({type:"NAME_SET",payload:{name:"Jack"},meta:{toMain:!0}}),p=n.filter(function(t){return"ARTICLES_GET"===t.type}),d=r.on("articles","value").map(function(t){return(0,c.objectPropsToArray)(t)}),v=a.default.combine(d,p).map(function(t){return t[0]}).map(function(t){return{type:"ARTICLES_SET",payload:{articles:t},meta:{toMain:!0}}});return{ACTION:a.default.merge(h,l,v)}};e.default=h},122:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.store=e.makeStateDriver=e.makeActionDriver=void 0;var r=n(42),i=n(239),o=n(46),a={ticking:!1},s=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a;switch(arguments[1].type){case"TICKER_TOGGLE":return Object.assign({},t,{ticking:!t.ticking});default:return t}},u=(0,o.createMainMiddleware)({logger:!1}),c=(0,i.createCycleMiddleware)(),h=c.makeActionDriver,f=c.makeStateDriver;e.makeActionDriver=h,e.makeStateDriver=f;e.store=(0,r.createStore)(s,(0,r.applyMiddleware)(u,c))},129:function(t,e,n){"use strict";var r=n(116),i=n(121),o=function(t){return t&&t.__esModule?t:{default:t}}(i),a=n(120),s=n(119),u=n(122),c={firebase:(0,a.makeFirebaseDriver)(s.firebaseConfig),ACTION:(0,u.makeActionDriver)(),STATE:(0,u.makeStateDriver)()};(0,r.run)(o.default,c)},13:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.sendToWorker=function(t){return function(e){var n=JSON.stringify(e);t.postMessage(n)}},e.sendToMain=function(t){var e=JSON.stringify(t);self.postMessage(e)}},142:function(t,e,n){(function(e){/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/ */
var r=n(25);(function(){(function(){var t,e=e||{},n=this,i=function(){},o=function(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e},a=function(t){return null===t},s=function(t){return"array"==o(t)},u=function(t){var e=o(t);return"array"==e||"object"==e&&"number"==typeof t.length},c=function(t){return"string"==typeof t},h=function(t){return"number"==typeof t},f=function(t){return"function"==o(t)},l=function(t){var e=typeof t;return"object"==e&&null!=t||"function"==e},p=function(t,e,n){return t.call.apply(t.bind,arguments)},d=function(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}},v=function(t,e,n){return v=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?p:d,v.apply(null,arguments)},g=function(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}},b=Date.now||function(){return+new Date},y=function(t,e){function n(){}n.prototype=e.prototype,t.xd=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.Tf=function(t,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return e.prototype[n].apply(t,i)}},m=function(t){if(Error.captureStackTrace)Error.captureStackTrace(this,m);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))};y(m,Error),m.prototype.name="CustomError";var w=function(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")},k=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},T=/&/g,E=/</g,_=/>/g,A=/"/g,S=/'/g,I=/\x00/g,O=/[\x00&<>"']/,N=function(t,e){return-1!=t.indexOf(e)},P=function(t,e){return t<e?-1:t>e?1:0},R=function(t,e){e.unshift(t),m.call(this,w.apply(null,e)),e.shift()};y(R,m),R.prototype.name="AssertionError";var x,C=function(t,e,n,r){var i="Assertion failed";if(n)var i=i+": "+n,o=r;else t&&(i+=": "+t,o=e);throw new R(""+i,o||[])},j=function(t,e,n){t||C("",null,e,Array.prototype.slice.call(arguments,2))},M=function(t,e){throw new R("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))},D=function(t,e,n){return h(t)||C("Expected number but got %s: %s.",[o(t),t],e,Array.prototype.slice.call(arguments,2)),t},L=function(t,e,n){c(t)||C("Expected string but got %s: %s.",[o(t),t],e,Array.prototype.slice.call(arguments,2))},U=function(t,e,n){f(t)||C("Expected function but got %s: %s.",[o(t),t],e,Array.prototype.slice.call(arguments,2))},F=Array.prototype.indexOf?function(t,e,n){return j(null!=t.length),Array.prototype.indexOf.call(t,e,n)}:function(t,e,n){if(n=null==n?0:0>n?Math.max(0,t.length+n):n,c(t))return c(e)&&1==e.length?t.indexOf(e,n):-1;for(;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},W=Array.prototype.forEach?function(t,e,n){j(null!=t.length),Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,i=c(t)?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)},V=function(t,e){for(var n=c(t)?t.split(""):t,r=t.length-1;0<=r;--r)r in n&&e.call(void 0,n[r],r,t)},K=Array.prototype.map?function(t,e,n){return j(null!=t.length),Array.prototype.map.call(t,e,n)}:function(t,e,n){for(var r=t.length,i=Array(r),o=c(t)?t.split(""):t,a=0;a<r;a++)a in o&&(i[a]=e.call(n,o[a],a,t));return i},B=Array.prototype.some?function(t,e,n){return j(null!=t.length),Array.prototype.some.call(t,e,n)}:function(t,e,n){for(var r=t.length,i=c(t)?t.split(""):t,o=0;o<r;o++)if(o in i&&e.call(n,i[o],o,t))return!0;return!1},q=function(t){var e;t:{e=Rr;for(var n=t.length,r=c(t)?t.split(""):t,i=0;i<n;i++)if(i in r&&e.call(void 0,r[i],i,t)){e=i;break t}e=-1}return 0>e?null:c(t)?t.charAt(e):t[e]},X=function(t,e){return 0<=F(t,e)},G=function(t,e){e=F(t,e);var n;return(n=0<=e)&&H(t,e),n},H=function(t,e){return j(null!=t.length),1==Array.prototype.splice.call(t,e,1).length},Q=function(t,e){var n=0;V(t,function(r,i){e.call(void 0,r,i,t)&&H(t,i)&&n++})},J=function(t){return Array.prototype.concat.apply([],arguments)},Y=function(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]},z=function(t){return K(t,function(t){return t=t.toString(16),1<t.length?t:"0"+t}).join("")};t:{var $=n.navigator;if($){var Z=$.userAgent;if(Z){x=Z;break t}}x=""}var tt=function(t){return N(x,t)},et=function(t,e){for(var n in t)e.call(void 0,t[n],n,t)},nt=function(t){var e,n=[],r=0;for(e in t)n[r++]=t[e];return n},rt=function(t){var e,n=[],r=0;for(e in t)n[r++]=e;return n},it=function(t){for(var e in t)return!1;return!0},ot=function(t,e){for(var n in t)if(!(n in e)||t[n]!==e[n])return!1;for(n in e)if(!(n in t))return!1;return!0},at=function(t){var e,n={};for(e in t)n[e]=t[e];return n},st="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),ut=function(t,e){for(var n,r,i=1;i<arguments.length;i++){r=arguments[i];for(n in r)t[n]=r[n];for(var o=0;o<st.length;o++)n=st[o],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}},ct=function(t){return ct[" "](t),t};ct[" "]=i;var ht,ft=function(t,e){var n=_t;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)},lt=tt("Opera"),pt=tt("Trident")||tt("MSIE"),dt=tt("Edge"),vt=dt||pt,gt=tt("Gecko")&&!(N(x.toLowerCase(),"webkit")&&!tt("Edge"))&&!(tt("Trident")||tt("MSIE"))&&!tt("Edge"),bt=N(x.toLowerCase(),"webkit")&&!tt("Edge"),yt=function(){var t=n.document;return t?t.documentMode:void 0};t:{var mt="",wt=function(){var t=x;return gt?/rv\:([^\);]+)(\)|;)/.exec(t):dt?/Edge\/([\d\.]+)/.exec(t):pt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(t):bt?/WebKit\/(\S+)/.exec(t):lt?/(?:Version)[ \/]?(\S+)/.exec(t):void 0}();if(wt&&(mt=wt?wt[1]:""),pt){var kt=yt();if(null!=kt&&kt>parseFloat(mt)){ht=String(kt);break t}}ht=mt}var Tt,Et=ht,_t={},At=function(t){return ft(t,function(){for(var e=0,n=k(String(Et)).split("."),r=k(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=P(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||P(0==a[2].length,0==s[2].length)||P(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e})},St=n.document;Tt=St&&pt?yt()||("CSS1Compat"==St.compatMode?parseInt(Et,10):5):void 0;var It,Ot=null,Nt=null,Pt=function(t){var e="";return Rt(t,function(t){e+=String.fromCharCode(t)}),e},Rt=function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),i=Nt[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}xt();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;e(i<<2|o>>4),64!=a&&(e(o<<4&240|a>>2),64!=s&&e(a<<6&192|s))}},xt=function(){if(!Ot){Ot={},Nt={};for(var t=0;65>t;t++)Ot[t]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(t),Nt[Ot[t]]=t,62<=t&&(Nt["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(t)]=t)}},Ct=function(){this.Da=-1},jt=function(t,e){this.Da=64,this.ec=n.Uint8Array?new Uint8Array(this.Da):Array(this.Da),this.Fc=this.hb=0,this.h=[],this.lf=t,this.Wd=e,this.Mf=n.Int32Array?new Int32Array(64):Array(64),void 0!==It||(It=n.Int32Array?new Int32Array(Ft):Ft),this.reset()};y(jt,Ct);for(var Mt=[],Dt=0;63>Dt;Dt++)Mt[Dt]=0;var Lt=J(128,Mt);jt.prototype.reset=function(){this.Fc=this.hb=0,this.h=n.Int32Array?new Int32Array(this.Wd):Y(this.Wd)};var Ut=function(t){var e=t.ec;j(e.length==t.Da);for(var n=t.Mf,r=0,i=0;i<e.length;)n[r++]=e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3],i=4*r;for(e=16;64>e;e++){var i=0|n[e-15],r=0|n[e-2],o=(0|n[e-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[e-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[e]=o+a|0}for(var r=0|t.h[0],i=0|t.h[1],s=0|t.h[2],u=0|t.h[3],c=0|t.h[4],h=0|t.h[5],f=0|t.h[6],o=0|t.h[7],e=0;64>e;e++)var l=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0,a=c&h^~c&f,o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0,a=a+(0|It[e])|0,a=o+(a+(0|n[e])|0)|0,o=f,f=h,h=c,c=u+a|0,u=s,s=i,i=r,r=a+l|0;t.h[0]=t.h[0]+r|0,t.h[1]=t.h[1]+i|0,t.h[2]=t.h[2]+s|0,t.h[3]=t.h[3]+u|0,t.h[4]=t.h[4]+c|0,t.h[5]=t.h[5]+h|0,t.h[6]=t.h[6]+f|0,t.h[7]=t.h[7]+o|0};jt.prototype.update=function(t,e){void 0===e&&(e=t.length);var n=0,r=this.hb;if(c(t))for(;n<e;)this.ec[r++]=t.charCodeAt(n++),r==this.Da&&(Ut(this),r=0);else{if(!u(t))throw Error("message must be string or array");for(;n<e;){var i=t[n++];if(!("number"==typeof i&&0<=i&&255>=i&&i==(0|i)))throw Error("message must be a byte array");this.ec[r++]=i,r==this.Da&&(Ut(this),r=0)}}this.hb=r,this.Fc+=e},jt.prototype.digest=function(){var t=[],e=8*this.Fc;56>this.hb?this.update(Lt,56-this.hb):this.update(Lt,this.Da-(this.hb-56));for(var n=63;56<=n;n--)this.ec[n]=255&e,e/=256;for(Ut(this),n=e=0;n<this.lf;n++)for(var r=24;0<=r;r-=8)t[e++]=this.h[n]>>r&255;return t};var Ft=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],Wt=function(){jt.call(this,8,Vt)};y(Wt,jt);var Vt=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],Kt=function(){this.Ga=this.Ga,this.tc=this.tc};Kt.prototype.Ga=!1,Kt.prototype.isDisposed=function(){return this.Ga},Kt.prototype.cb=function(){if(this.tc)for(;this.tc.length;)this.tc.shift()()};var Bt=!pt||9<=Number(Tt),qt=pt&&!At("9");!bt||At("528"),gt&&At("1.9b")||pt&&At("8")||lt&&At("9.5")||bt&&At("528"),gt&&!At("8")||pt&&At("9");var Xt=function(t,e){this.type=t,this.currentTarget=this.target=e,this.defaultPrevented=this.nb=!1,this.ee=!0};Xt.prototype.preventDefault=function(){this.defaultPrevented=!0,this.ee=!1};var Gt=function(t,e){Xt.call(this,t?t.type:""),this.relatedTarget=this.currentTarget=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=this.offsetY=this.offsetX=0,this.key="",this.charCode=this.keyCode=0,this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.eb=this.state=null,t&&this.init(t,e)};y(Gt,Xt),Gt.prototype.init=function(t,e){var n=this.type=t.type,r=t.changedTouches?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.currentTarget=e,e=t.relatedTarget){if(gt){var i;t:{try{ct(e.nodeName),i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,null===r?(this.offsetX=bt||void 0!==t.offsetX?t.offsetX:t.layerX,this.offsetY=bt||void 0!==t.offsetY?t.offsetY:t.layerY,this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0):(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0),this.button=t.button,this.keyCode=t.keyCode||0,this.key=t.key||"",this.charCode=t.charCode||("keypress"==n?t.keyCode:0),this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.state=t.state,this.eb=t,t.defaultPrevented&&this.preventDefault()},Gt.prototype.preventDefault=function(){Gt.xd.preventDefault.call(this);var t=this.eb;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,qt)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Gt.prototype.Pe=function(){return this.eb};var Ht="closure_listenable_"+(1e6*Math.random()|0),Qt=0,Jt=function(t,e,n,r,i){this.listener=t,this.xc=null,this.src=e,this.type=n,this.capture=!!r,this.kc=i,this.key=++Qt,this.rb=this.dc=!1},Yt=function(t){t.rb=!0,t.listener=null,t.xc=null,t.src=null,t.kc=null},zt=function(t){this.src=t,this.G={},this.$b=0};zt.prototype.add=function(t,e,n,r,i){var o=t.toString();(t=this.G[o])||(t=this.G[o]=[],this.$b++);var a=Zt(t,e,r,i);return-1<a?(e=t[a],n||(e.dc=!1)):(e=new Jt(e,this.src,o,!!r,i),e.dc=n,t.push(e)),e},zt.prototype.remove=function(t,e,n,r){if(!((t=t.toString())in this.G))return!1;var i=this.G[t];return-1<(e=Zt(i,e,n,r))&&(Yt(i[e]),H(i,e),0==i.length&&(delete this.G[t],this.$b--),!0)};var $t=function(t,e){var n=e.type;n in t.G&&G(t.G[n],e)&&(Yt(e),0==t.G[n].length&&(delete t.G[n],t.$b--))};zt.prototype.Uc=function(t,e,n,r){t=this.G[t.toString()];var i=-1;return t&&(i=Zt(t,e,n,r)),-1<i?t[i]:null};var Zt=function(t,e,n,r){for(var i=0;i<t.length;++i){var o=t[i];if(!o.rb&&o.listener==e&&o.capture==!!n&&o.kc==r)return i}return-1},te="closure_lm_"+(1e6*Math.random()|0),ee={},ne=0,re=function(t,e,n,r,i){if(s(e))for(var o=0;o<e.length;o++)re(t,e[o],n,r,i);else n=ve(n),t&&t[Ht]?t.listen(e,n,r,i):ie(t,e,n,!1,r,i)},ie=function(t,e,n,r,i,o){if(!e)throw Error("Invalid event type");var a=!!i,s=pe(t);if(s||(t[te]=s=new zt(t)),n=s.add(e,n,r,i,o),!n.xc){if(r=oe(),n.xc=r,r.src=t,r.listener=n,t.addEventListener)t.addEventListener(e.toString(),r,a);else{if(!t.attachEvent)throw Error("addEventListener and attachEvent are unavailable.");t.attachEvent(ce(e.toString()),r)}ne++}},oe=function(){var t=le,e=Bt?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e},ae=function(t,e,n,r,i){if(s(e))for(var o=0;o<e.length;o++)ae(t,e[o],n,r,i);else n=ve(n),t&&t[Ht]?br(t,e,n,r,i):ie(t,e,n,!0,r,i)},se=function(t,e,n,r,i){if(s(e))for(var o=0;o<e.length;o++)se(t,e[o],n,r,i);else n=ve(n),t&&t[Ht]?t.fa.remove(String(e),n,r,i):t&&(t=pe(t))&&(e=t.Uc(e,n,!!r,i))&&ue(e)},ue=function(t){if(!h(t)&&t&&!t.rb){var e=t.src;if(e&&e[Ht])$t(e.fa,t);else{var n=t.type,r=t.xc;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent&&e.detachEvent(ce(n),r),ne--,(n=pe(e))?($t(n,t),0==n.$b&&(n.src=null,e[te]=null)):Yt(t)}}},ce=function(t){return t in ee?ee[t]:ee[t]="on"+t},he=function(t,e,n,r){var i=!0;if((t=pe(t))&&(e=t.G[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.rb&&(o=fe(o,r),i=i&&!1!==o)}return i},fe=function(t,e){var n=t.listener,r=t.kc||t.src;return t.dc&&ue(t),n.call(r,e)},le=function(t,e){if(t.rb)return!0;if(!Bt){if(!e)t:{e=["window","event"];for(var r,i=n;r=e.shift();){if(null==i[r]){e=null;break t}i=i[r]}e=i}if(r=e,e=new Gt(r,this),i=!0,!(0>r.keyCode||void 0!=r.returnValue)){t:{var o=!1;if(0==r.keyCode)try{r.keyCode=-1;break t}catch(t){o=!0}(o||void 0==r.returnValue)&&(r.returnValue=!0)}for(r=[],o=e.currentTarget;o;o=o.parentNode)r.push(o);for(t=t.type,o=r.length-1;!e.nb&&0<=o;o--){e.currentTarget=r[o];var a=he(r[o],t,!0,e),i=i&&a}for(o=0;!e.nb&&o<r.length;o++)e.currentTarget=r[o],a=he(r[o],t,!1,e),i=i&&a}return i}return fe(t,new Gt(e,this))},pe=function(t){return t=t[te],t instanceof zt?t:null},de="__closure_events_fn_"+(1e9*Math.random()>>>0),ve=function(t){return j(t,"Listener can not be null."),f(t)?t:(j(t.handleEvent,"An object listener must have handleEvent method."),t[de]||(t[de]=function(e){return t.handleEvent(e)}),t[de])},ge=/^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/,be=function(){this.Cc="",this.we=me};be.prototype.Eb=!0,be.prototype.Bb=function(){return this.Cc},be.prototype.toString=function(){return"Const{"+this.Cc+"}"};var ye=function(t){return t instanceof be&&t.constructor===be&&t.we===me?t.Cc:(M("expected object of type Const, got '"+t+"'"),"type_error:Const")},me={},we=function(t){var e=new be;return e.Cc=t,e};we("");var ke=function(){this.wc="",this.xe=Te};ke.prototype.Eb=!0,ke.prototype.Bb=function(){return this.wc},ke.prototype.toString=function(){return"TrustedResourceUrl{"+this.wc+"}"};var Te={},Ee=function(){this.pa="",this.ve=Ie};Ee.prototype.Eb=!0,Ee.prototype.Bb=function(){return this.pa},Ee.prototype.toString=function(){return"SafeUrl{"+this.pa+"}"};var _e=function(t){return t instanceof Ee&&t.constructor===Ee&&t.ve===Ie?t.pa:(M("expected object of type SafeUrl, got '"+t+"' of type "+o(t)),"type_error:SafeUrl")},Ae=/^(?:(?:https?|mailto|ftp):|[^&:\/?#]*(?:[\/?#]|$))/i,Se=function(t){return t instanceof Ee?t:(t=t.Eb?t.Bb():String(t),Ae.test(t)||(t="about:invalid#zClosurez"),Oe(t))},Ie={},Oe=function(t){var e=new Ee;return e.pa=t,e};Oe("about:blank");var Ne=function(t){var e=[];return Re(new Pe,t,e),e.join("")},Pe=function(){this.yc=void 0},Re=function(t,e,n){if(null==e)n.push("null");else{if("object"==typeof e){if(s(e)){var r=e;e=r.length,n.push("[");for(var i="",o=0;o<e;o++)n.push(i),i=r[o],Re(t,t.yc?t.yc.call(r,String(o),i):i,n),i=",";return void n.push("]")}if(!(e instanceof String||e instanceof Number||e instanceof Boolean)){n.push("{"),o="";for(r in e)Object.prototype.hasOwnProperty.call(e,r)&&"function"!=typeof(i=e[r])&&(n.push(o),je(r,n),n.push(":"),Re(t,t.yc?t.yc.call(e,r,i):i,n),o=",");return void n.push("}")}e=e.valueOf()}switch(typeof e){case"string":je(e,n);break;case"number":n.push(isFinite(e)&&!isNaN(e)?String(e):"null");break;case"boolean":n.push(String(e));break;case"function":n.push("null");break;default:throw Error("Unknown type: "+typeof e)}}},xe={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},Ce=/\uffff/.test("￿")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g,je=function(t,e){e.push('"',t.replace(Ce,function(t){var e=xe[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),xe[t]=e),e}),'"')},Me=function(){};Me.prototype.Dd=null;var De,Le=function(t){return t.Dd||(t.Dd=t.$c())},Ue=function(){};y(Ue,Me),Ue.prototype.fc=function(){var t=Fe(this);return t?new ActiveXObject(t):new XMLHttpRequest},Ue.prototype.$c=function(){var t={};return Fe(this)&&(t[0]=!0,t[1]=!0),t};var Fe=function(t){if(!t.Vd&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var r=e[n];try{return new ActiveXObject(r),t.Vd=r}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.Vd};De=new Ue;var We=function(){};y(We,Me),We.prototype.fc=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new Ve;throw Error("Unsupported browser")},We.prototype.$c=function(){return{}};var Ve=function(){this.ua=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseText="",this.status=-1,this.statusText=this.responseXML=null,this.ua.onload=v(this.Re,this),this.ua.onerror=v(this.Sd,this),this.ua.onprogress=v(this.Se,this),this.ua.ontimeout=v(this.Te,this)};t=Ve.prototype,t.open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.ua.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.ua.send(t)}else this.ua.send()},t.abort=function(){this.ua.abort()},t.setRequestHeader=function(){},t.Re=function(){this.status=200,this.responseText=this.ua.responseText,Ke(this,4)},t.Sd=function(){this.status=500,this.responseText="",Ke(this,4)},t.Te=function(){this.Sd()},t.Se=function(){this.status=200,Ke(this,1)};var Ke=function(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()},Be=function(t,e,n){this.ef=n,this.Fe=t,this.wf=e,this.sc=0,this.lc=null};Be.prototype.get=function(){var t;return 0<this.sc?(this.sc--,t=this.lc,this.lc=t.next,t.next=null):t=this.Fe(),t},Be.prototype.put=function(t){this.wf(t),this.sc<this.ef&&(this.sc++,t.next=this.lc,this.lc=t)};var qe,Xe=function(t){n.setTimeout(function(){throw t},0)},Ge=function(){var t=n.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!tt("Presto")&&(t=function(){var t=document.createElement("IFRAME");t.style.display="none",t.src="",document.documentElement.appendChild(t);var e=t.contentWindow,t=e.document;t.open(),t.write(""),t.close();var n="callImmediate"+Math.random(),r="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host,t=v(function(t){"*"!=r&&t.origin!=r||t.data!=n||this.port1.onmessage()},this);e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,r)}}}),void 0!==t&&!tt("Trident")&&!tt("MSIE")){var e=new t,r={},i=r;return e.port1.onmessage=function(){if(void 0!==r.next){r=r.next;var t=r.Gd;r.Gd=null,t()}},function(t){i.next={Gd:t},i=i.next,e.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(t){var e=document.createElement("SCRIPT");e.onreadystatechange=function(){e.onreadystatechange=null,e.parentNode.removeChild(e),e=null,t(),t=null},document.documentElement.appendChild(e)}:function(t){n.setTimeout(t,0)}},He=function(){this.Jc=this.Za=null},Qe=new Be(function(){return new Je},function(t){t.reset()},100);He.prototype.add=function(t,e){var n=Qe.get();n.set(t,e),this.Jc?this.Jc.next=n:(j(!this.Za),this.Za=n),this.Jc=n},He.prototype.remove=function(){var t=null;return this.Za&&(t=this.Za,this.Za=this.Za.next,this.Za||(this.Jc=null),t.next=null),t};var Je=function(){this.next=this.scope=this.Tc=null};Je.prototype.set=function(t,e){this.Tc=t,this.scope=e,this.next=null},Je.prototype.reset=function(){this.next=this.scope=this.Tc=null};var Ye,ze=function(t,e){Ye||$e(),Ze||(Ye(),Ze=!0),tn.add(t,e)},$e=function(){if(-1!=String(n.Promise).indexOf("[native code]")){var t=n.Promise.resolve(void 0);Ye=function(){t.then(en)}}else Ye=function(){var t=en;!f(n.setImmediate)||n.Window&&n.Window.prototype&&!tt("Edge")&&n.Window.prototype.setImmediate==n.setImmediate?(qe||(qe=Ge()),qe(t)):n.setImmediate(t)}},Ze=!1,tn=new He,en=function(){for(var t;t=tn.remove();){try{t.Tc.call(t.scope)}catch(t){Xe(t)}Qe.put(t)}Ze=!1};!gt&&!pt||pt&&9<=Number(Tt)||gt&&At("1.9.1"),pt&&At("9");var nn=function(){this.pa="",this.ue=on};nn.prototype.Eb=!0,nn.prototype.Bb=function(){return this.pa},nn.prototype.toString=function(){return"SafeHtml{"+this.pa+"}"};var rn=function(t){return t instanceof nn&&t.constructor===nn&&t.ue===on?t.pa:(M("expected object of type SafeHtml, got '"+t+"' of type "+o(t)),"type_error:SafeHtml")},on={};nn.prototype.$e=function(t){return this.pa=t,this};var an=function(t,e){et(e,function(e,n){e&&e.Eb&&(e=e.Bb()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:sn.hasOwnProperty(n)?t.setAttribute(sn[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e})},sn={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"},un=function(t){t.prototype.then=t.prototype.then,t.prototype.$goog_Thenable=!0},cn=function(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}},hn=function(t,e){if(this.N=0,this.ra=void 0,this.bb=this.na=this.s=null,this.jc=this.Sc=!1,t!=i)try{var n=this;t.call(e,function(t){Tn(n,2,t)},function(t){if(!(t instanceof Rn))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Tn(n,3,t)})}catch(t){Tn(this,3,t)}},fn=function(){this.next=this.context=this.jb=this.Oa=this.child=null,this.xb=!1};fn.prototype.reset=function(){this.context=this.jb=this.Oa=this.child=null,this.xb=!1};var ln=new Be(function(){return new fn},function(t){t.reset()},100),pn=function(t,e,n){var r=ln.get();return r.Oa=t,r.jb=e,r.context=n,r},dn=function(t){if(t instanceof hn)return t;var e=new hn(i);return Tn(e,2,t),e},vn=function(t){return new hn(function(e,n){n(t)})},gn=function(t,e,n){En(t,e,n,null)||ze(g(e,t))},bn=function(t){return new hn(function(e){var n=t.length,r=[];if(n)for(var i,o=function(t,i,o){n--,r[t]=i?{Ne:!0,value:o}:{Ne:!1,reason:o},0==n&&e(r)},a=0;a<t.length;a++)i=t[a],gn(i,g(o,a,!0),g(o,a,!1));else e(r)})};hn.prototype.then=function(t,e,n){return null!=t&&U(t,"opt_onFulfilled should be a function."),null!=e&&U(e,"opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"),kn(this,f(t)?t:null,f(e)?e:null,n)},un(hn);var yn=function(t,e){return e=pn(e,e,void 0),e.xb=!0,wn(t,e),t};hn.prototype.f=function(t,e){return kn(this,null,t,e)},hn.prototype.cancel=function(t){0==this.N&&ze(function(){var e=new Rn(t);mn(this,e)},this)};var mn=function(t,e){if(0==t.N)if(t.s){var n=t.s;if(n.na){for(var r=0,i=null,o=null,a=n.na;a&&(a.xb||(r++,a.child==t&&(i=a),!(i&&1<r)));a=a.next)i||(o=a);i&&(0==n.N&&1==r?mn(n,e):(o?(r=o,j(n.na),j(null!=r),r.next==n.bb&&(n.bb=r),r.next=r.next.next):Sn(n),In(n,i,3,e)))}t.s=null}else Tn(t,3,e)},wn=function(t,e){t.na||2!=t.N&&3!=t.N||An(t),j(null!=e.Oa),t.bb?t.bb.next=e:t.na=e,t.bb=e},kn=function(t,e,n,r){var i=pn(null,null,null);return i.child=new hn(function(t,o){i.Oa=e?function(n){try{var i=e.call(r,n);t(i)}catch(t){o(t)}}:t,i.jb=n?function(e){try{var i=n.call(r,e);void 0===i&&e instanceof Rn?o(e):t(i)}catch(t){o(t)}}:o}),i.child.s=t,wn(t,i),i.child};hn.prototype.Jf=function(t){j(1==this.N),this.N=0,Tn(this,2,t)},hn.prototype.Kf=function(t){j(1==this.N),this.N=0,Tn(this,3,t)};var Tn=function(t,e,n){0==t.N&&(t===n&&(e=3,n=new TypeError("Promise cannot resolve to itself")),t.N=1,En(n,t.Jf,t.Kf,t)||(t.ra=n,t.N=e,t.s=null,An(t),3!=e||n instanceof Rn||Nn(t,n)))},En=function(t,e,n,r){if(t instanceof hn)return null!=e&&U(e,"opt_onFulfilled should be a function."),null!=n&&U(n,"opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"),wn(t,pn(e||i,n||null,r)),!0;if(cn(t))return t.then(e,n,r),!0;if(l(t))try{var o=t.then;if(f(o))return _n(t,o,e,n,r),!0}catch(t){return n.call(r,t),!0}return!1},_n=function(t,e,n,r,i){var o=!1,a=function(t){o||(o=!0,n.call(i,t))},s=function(t){o||(o=!0,r.call(i,t))};try{e.call(t,a,s)}catch(t){s(t)}},An=function(t){t.Sc||(t.Sc=!0,ze(t.Je,t))},Sn=function(t){var e=null;return t.na&&(e=t.na,t.na=e.next,e.next=null),t.na||(t.bb=null),null!=e&&j(null!=e.Oa),e};hn.prototype.Je=function(){for(var t;t=Sn(this);)In(this,t,this.N,this.ra);this.Sc=!1};var In=function(t,e,n,r){if(3==n&&e.jb&&!e.xb)for(;t&&t.jc;t=t.s)t.jc=!1;if(e.child)e.child.s=null,On(e,n,r);else try{e.xb?e.Oa.call(e.context):On(e,n,r)}catch(t){Pn.call(null,t)}ln.put(e)},On=function(t,e,n){2==e?t.Oa.call(t.context,n):t.jb&&t.jb.call(t.context,n)},Nn=function(t,e){t.jc=!0,ze(function(){t.jc&&Pn.call(null,e)})},Pn=Xe,Rn=function(t){m.call(this,t)};y(Rn,m),Rn.prototype.name="cancel";var xn=function(t,e){this.zc=[],this.$d=t,this.Jd=e||null,this.Cb=this.fb=!1,this.ra=void 0,this.ud=this.Cd=this.Nc=!1,this.Gc=0,this.s=null,this.Oc=0};xn.prototype.cancel=function(t){if(this.fb)this.ra instanceof xn&&this.ra.cancel();else{if(this.s){var e=this.s;delete this.s,t?e.cancel(t):0>=--e.Oc&&e.cancel()}this.$d?this.$d.call(this.Jd,this):this.ud=!0,this.fb||Mn(this,new Kn)}},xn.prototype.Hd=function(t,e){this.Nc=!1,Cn(this,t,e)};var Cn=function(t,e,n){t.fb=!0,t.ra=n,t.Cb=!e,Wn(t)},jn=function(t){if(t.fb){if(!t.ud)throw new Vn;t.ud=!1}};xn.prototype.callback=function(t){jn(this),Dn(t),Cn(this,!0,t)};var Mn=function(t,e){jn(t),Dn(e),Cn(t,!1,e)},Dn=function(t){j(!(t instanceof xn),"An execution sequence may not be initiated with a blocking Deferred.")},Ln=function(t){var e=Xn("https://apis.google.com/js/client.js?onload="+Bo);Un(e,null,t,void 0)},Un=function(t,e,n,r){j(!t.Cd,"Blocking Deferreds can not be re-used"),t.zc.push([e,n,r]),t.fb&&Wn(t)};xn.prototype.then=function(t,e,n){var r,i,o=new hn(function(t,e){r=t,i=e});return Un(this,r,function(t){t instanceof Kn?o.cancel():i(t)}),o.then(t,e,n)},un(xn);var Fn=function(t){return B(t.zc,function(t){return f(t[1])})},Wn=function(t){if(t.Gc&&t.fb&&Fn(t)){var e=t.Gc,r=qn[e];r&&(n.clearTimeout(r.Db),delete qn[e]),t.Gc=0}t.s&&(t.s.Oc--,delete t.s);for(var e=t.ra,i=r=!1;t.zc.length&&!t.Nc;){var o=t.zc.shift(),a=o[0],s=o[1],o=o[2];if(a=t.Cb?s:a)try{var u=a.call(o||t.Jd,e);void 0!==u&&(t.Cb=t.Cb&&(u==e||u instanceof Error),t.ra=e=u),(cn(e)||"function"==typeof n.Promise&&e instanceof n.Promise)&&(i=!0,t.Nc=!0)}catch(n){e=n,t.Cb=!0,Fn(t)||(r=!0)}}t.ra=e,i&&(u=v(t.Hd,t,!0),i=v(t.Hd,t,!1),e instanceof xn?(Un(e,u,i),e.Cd=!0):e.then(u,i)),r&&(e=new Bn(e),qn[e.Db]=e,t.Gc=e.Db)},Vn=function(){m.call(this)};y(Vn,m),Vn.prototype.message="Deferred has already fired",Vn.prototype.name="AlreadyCalledError";var Kn=function(){m.call(this)};y(Kn,m),Kn.prototype.message="Deferred was canceled",Kn.prototype.name="CanceledError";var Bn=function(t){this.Db=n.setTimeout(v(this.If,this),0),this.P=t};Bn.prototype.If=function(){throw j(qn[this.Db],"Cannot throw an error that is not scheduled."),delete qn[this.Db],this.P};var qn={},Xn=function(t){var e=new ke;return e.wc=t,Gn(e)},Gn=function(t){var e,n={},r=n.document||document;t instanceof ke&&t.constructor===ke&&t.xe===Te?e=t.wc:(M("expected object of type TrustedResourceUrl, got '"+t+"' of type "+o(t)),e="type_error:TrustedResourceUrl");var i=document.createElement("SCRIPT");t={fe:i,Zb:void 0};var a=new xn(Qn,t),s=null,u=null!=n.timeout?n.timeout:5e3;return 0<u&&(s=window.setTimeout(function(){Jn(i,!0),Mn(a,new Yn(1,"Timeout reached for loading script "+e))},u),t.Zb=s),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Jn(i,n.Uf||!1,s),a.callback(null))},i.onerror=function(){Jn(i,!0,s),Mn(a,new Yn(0,"Error while loading script "+e))},t=n.attributes||{},ut(t,{type:"text/javascript",charset:"UTF-8",src:e}),an(i,t),Hn(r).appendChild(i),a},Hn=function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement},Qn=function(){if(this&&this.fe){var t=this.fe;t&&"SCRIPT"==t.tagName&&Jn(t,!0,this.Zb)}},Jn=function(t,e,r){null!=r&&n.clearTimeout(r),t.onload=i,t.onerror=i,t.onreadystatechange=i,e&&window.setTimeout(function(){t&&t.parentNode&&t.parentNode.removeChild(t)},0)},Yn=function(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),m.call(this,n),this.code=t};y(Yn,m);var zn="StopIteration"in n?n.StopIteration:{message:"StopIteration",stack:""},$n=function(){};$n.prototype.next=function(){throw zn},$n.prototype.ye=function(){return this};var Zn=function(t,e){this.ga={},this.w=[],this.wb=this.o=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else t&&this.addAll(t)};Zn.prototype.Z=function(){tr(this);for(var t=[],e=0;e<this.w.length;e++)t.push(this.ga[this.w[e]]);return t},Zn.prototype.oa=function(){return tr(this),this.w.concat()},Zn.prototype.yb=function(t){return er(this.ga,t)},Zn.prototype.remove=function(t){return!!er(this.ga,t)&&(delete this.ga[t],this.o--,this.wb++,this.w.length>2*this.o&&tr(this),!0)};var tr=function(t){if(t.o!=t.w.length){for(var e=0,n=0;e<t.w.length;){var r=t.w[e];er(t.ga,r)&&(t.w[n++]=r),e++}t.w.length=n}if(t.o!=t.w.length){for(var i={},n=e=0;e<t.w.length;)r=t.w[e],er(i,r)||(t.w[n++]=r,i[r]=1),e++;t.w.length=n}};t=Zn.prototype,t.get=function(t,e){return er(this.ga,t)?this.ga[t]:e},t.set=function(t,e){er(this.ga,t)||(this.o++,this.w.push(t),this.wb++),this.ga[t]=e},t.addAll=function(t){var e;t instanceof Zn?(e=t.oa(),t=t.Z()):(e=rt(t),t=nt(t));for(var n=0;n<e.length;n++)this.set(e[n],t[n])},t.forEach=function(t,e){for(var n=this.oa(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);t.call(e,o,i,this)}},t.clone=function(){return new Zn(this)},t.ye=function(t){tr(this);var e=0,n=this.wb,r=this,i=new $n;return i.next=function(){if(n!=r.wb)throw Error("The map has changed since the iterator was created");if(e>=r.w.length)throw zn;var i=r.w[e++];return t?i:r.ga[i]},i};var er=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},nr=function(t){if(t.Z&&"function"==typeof t.Z)return t.Z();if(c(t))return t.split("");if(u(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}return nt(t)},rr=function(t){if(t.oa&&"function"==typeof t.oa)return t.oa();if(!t.Z||"function"!=typeof t.Z){if(u(t)||c(t)){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}return rt(t)}},ir=function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(u(t)||c(t))W(t,e,void 0);else for(var n=rr(t),r=nr(t),i=r.length,o=0;o<i;o++)e.call(void 0,r[o],n&&n[o],t)},or=function(t,e,n,r,i){this.reset(t,e,n,r,i)};or.prototype.Md=null;var ar=0;or.prototype.reset=function(t,e,n,r,i){"number"==typeof i||ar++,r||b(),this.Ib=t,this.hf=e,delete this.Md},or.prototype.ie=function(t){this.Ib=t};var sr=function(t){this.jf=t,this.Td=this.Pc=this.Ib=this.s=null},ur=function(t,e){this.name=t,this.value=e};ur.prototype.toString=function(){return this.name};var cr=new ur("SEVERE",1e3),hr=new ur("CONFIG",700),fr=new ur("FINE",500);sr.prototype.getParent=function(){return this.s},sr.prototype.ie=function(t){this.Ib=t};var lr=function(t){return t.Ib?t.Ib:t.s?lr(t.s):(M("Root logger has no level set."),null)};sr.prototype.log=function(t,e,r){if(t.value>=lr(this).value)for(f(e)&&(e=e()),t=new or(t,String(e),this.jf),r&&(t.Md=r),r="log:"+t.hf,n.console&&(n.console.timeStamp?n.console.timeStamp(r):n.console.markTimeline&&n.console.markTimeline(r)),n.msWriteProfilerMark&&n.msWriteProfilerMark(r),r=this;r;){var i=r,o=t;if(i.Td)for(var a=0;e=i.Td[a];a++)e(o);r=r.getParent()}};var pr={},dr=null,vr=function(t){dr||(dr=new sr(""),pr[""]=dr,dr.ie(hr));var e;if(!(e=pr[t])){e=new sr(t);var n=t.lastIndexOf("."),r=t.substr(n+1),n=vr(t.substr(0,n));n.Pc||(n.Pc={}),n.Pc[r]=e,e.s=n,pr[t]=e}return e},gr=function(){Kt.call(this),this.fa=new zt(this),this.ze=this,this.hd=null};y(gr,Kt),gr.prototype[Ht]=!0,t=gr.prototype,t.addEventListener=function(t,e,n,r){re(this,t,e,n,r)},t.removeEventListener=function(t,e,n,r){se(this,t,e,n,r)},t.dispatchEvent=function(t){mr(this);var e,n=this.hd;if(n){e=[];for(var r=1;n;n=n.hd)e.push(n),j(1e3>++r,"infinite loop")}if(n=this.ze,r=t.type||t,c(t))t=new Xt(t,n);else if(t instanceof Xt)t.target=t.target||n;else{var i=t;t=new Xt(r,n),ut(t,i)}var o,i=!0;if(e)for(var a=e.length-1;!t.nb&&0<=a;a--)o=t.currentTarget=e[a],i=yr(o,r,!0,t)&&i;if(t.nb||(o=t.currentTarget=n,i=yr(o,r,!0,t)&&i,t.nb||(i=yr(o,r,!1,t)&&i)),e)for(a=0;!t.nb&&a<e.length;a++)o=t.currentTarget=e[a],i=yr(o,r,!1,t)&&i;return i},t.cb=function(){if(gr.xd.cb.call(this),this.fa){var t,e=this.fa,n=0;for(t in e.G){for(var r=e.G[t],i=0;i<r.length;i++)++n,Yt(r[i]);delete e.G[t],e.$b--}}this.hd=null},t.listen=function(t,e,n,r){return mr(this),this.fa.add(String(t),e,!1,n,r)};var br=function(t,e,n,r,i){t.fa.add(String(e),n,!0,r,i)},yr=function(t,e,n,r){if(!(e=t.fa.G[String(e)]))return!0;e=e.concat();for(var i=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.rb&&a.capture==n){var s=a.listener,u=a.kc||a.src;a.dc&&$t(t.fa,a),i=!1!==s.call(u,r)&&i}}return i&&0!=r.ee};gr.prototype.Uc=function(t,e,n,r){return this.fa.Uc(String(t),e,n,r)};var mr=function(t){j(t.fa,"Event target is not initialized. Did you call the superclass (goog.events.EventTarget) constructor?")},wr=function(t,e){t&&t.log(fr,e,void 0)},kr=function(t,e,r){if(f(t))r&&(t=v(t,r));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=v(t.handleEvent,t)}return 2147483647<Number(e)?-1:n.setTimeout(t,e||0)},Tr=function(t){var e=null;return new hn(function(n,r){-1==(e=kr(function(){n(void 0)},t))&&r(Error("Failed to schedule timer."))}).f(function(t){throw n.clearTimeout(e),t})},Er=/^(?:([^:\/?#.]+):)?(?:\/\/(?:([^\/?#]*)@)?([^\/#?]*?)(?::([0-9]+))?(?=[\/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/,_r=function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r,i=t[n].indexOf("="),o=null;0<=i?(r=t[n].substring(0,i),o=t[n].substring(i+1)):r=t[n],e(r,o?decodeURIComponent(o.replace(/\+/g," ")):"")}}},Ar=function(t){gr.call(this),this.headers=new Zn,this.Lc=t||null,this.va=!1,this.Kc=this.b=null,this.Hb=this.Zd=this.qc="",this.Ka=this.Yc=this.oc=this.Rc=!1,this.sb=0,this.Ec=null,this.de="",this.Hc=this.sf=this.te=!1};y(Ar,gr);var Sr=Ar.prototype,Ir=vr("goog.net.XhrIo");Sr.U=Ir;var Or=/^https?$/i,Nr=["POST","PUT"];Ar.prototype.send=function(t,e,r,i){if(this.b)throw Error("[goog.net.XhrIo] Object is active with another request="+this.qc+"; newUri="+t);e=e?e.toUpperCase():"GET",this.qc=t,this.Hb="",this.Zd=e,this.Rc=!1,this.va=!0,this.b=this.Lc?this.Lc.fc():De.fc(),this.Kc=Le(this.Lc?this.Lc:De),this.b.onreadystatechange=v(this.be,this),this.sf&&"onprogress"in this.b&&(this.b.onprogress=v(function(t){this.ae(t,!0)},this),this.b.upload&&(this.b.upload.onprogress=v(this.ae,this)));try{wr(this.U,Wr(this,"Opening Xhr")),this.Yc=!0,this.b.open(e,String(t),!0),this.Yc=!1}catch(t){return wr(this.U,Wr(this,"Error opening Xhr: "+t.message)),void this.P(5,t)}t=r||"";var o=this.headers.clone();i&&ir(i,function(t,e){o.set(e,t)}),i=q(o.oa()),r=n.FormData&&t instanceof n.FormData,!X(Nr,e)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach(function(t,e){this.b.setRequestHeader(e,t)},this),this.de&&(this.b.responseType=this.de),"withCredentials"in this.b&&this.b.withCredentials!==this.te&&(this.b.withCredentials=this.te);try{Dr(this),0<this.sb&&(this.Hc=Pr(this.b),wr(this.U,Wr(this,"Will abort after "+this.sb+"ms if incomplete, xhr2 "+this.Hc)),this.Hc?(this.b.timeout=this.sb,this.b.ontimeout=v(this.Zb,this)):this.Ec=kr(this.Zb,this.sb,this)),wr(this.U,Wr(this,"Sending request")),this.oc=!0,this.b.send(t),this.oc=!1}catch(t){wr(this.U,Wr(this,"Send error: "+t.message)),this.P(5,t)}};var Pr=function(t){return pt&&At(9)&&h(t.timeout)&&void 0!==t.ontimeout},Rr=function(t){return"content-type"==t.toLowerCase()};Ar.prototype.Zb=function(){void 0!==e&&this.b&&(this.Hb="Timed out after "+this.sb+"ms, aborting",wr(this.U,Wr(this,this.Hb)),this.dispatchEvent("timeout"),this.abort(8))},Ar.prototype.P=function(t,e){this.va=!1,this.b&&(this.Ka=!0,this.b.abort(),this.Ka=!1),this.Hb=e,xr(this),Mr(this)};var xr=function(t){t.Rc||(t.Rc=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))};Ar.prototype.abort=function(){this.b&&this.va&&(wr(this.U,Wr(this,"Aborting")),this.va=!1,this.Ka=!0,this.b.abort(),this.Ka=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Mr(this))},Ar.prototype.cb=function(){this.b&&(this.va&&(this.va=!1,this.Ka=!0,this.b.abort(),this.Ka=!1),Mr(this,!0)),Ar.xd.cb.call(this)},Ar.prototype.be=function(){this.isDisposed()||(this.Yc||this.oc||this.Ka?Cr(this):this.nf())},Ar.prototype.nf=function(){Cr(this)};var Cr=function(t){if(t.va&&void 0!==e)if(t.Kc[1]&&4==Lr(t)&&2==Ur(t))wr(t.U,Wr(t,"Local request error detected and ignored"));else if(t.oc&&4==Lr(t))kr(t.be,0,t);else if(t.dispatchEvent("readystatechange"),4==Lr(t)){wr(t.U,Wr(t,"Request complete")),t.va=!1;try{var r,i=Ur(t);t:switch(i){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:r=!0;break t;default:r=!1}var o;if(!(o=r)){var a;if(a=0===i){var s=String(t.qc).match(Er)[1]||null;if(!s&&n.self&&n.self.location)var u=n.self.location.protocol,s=u.substr(0,u.length-1);a=!Or.test(s?s.toLowerCase():"")}o=a}if(o)t.dispatchEvent("complete"),t.dispatchEvent("success");else{var c;try{c=2<Lr(t)?t.b.statusText:""}catch(e){wr(t.U,"Can not get status: "+e.message),c=""}t.Hb=c+" ["+Ur(t)+"]",xr(t)}}finally{Mr(t)}}};Ar.prototype.ae=function(t,e){j("progress"===t.type,"goog.net.EventType.PROGRESS is of the same type as raw XHR progress."),this.dispatchEvent(jr(t,"progress")),this.dispatchEvent(jr(t,e?"downloadprogress":"uploadprogress"))};var jr=function(t,e){return{type:e,lengthComputable:t.lengthComputable,loaded:t.loaded,total:t.total}},Mr=function(t,e){if(t.b){Dr(t);var n=t.b,r=t.Kc[0]?i:null;t.b=null,t.Kc=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=r}catch(e){(t=t.U)&&t.log(cr,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}},Dr=function(t){t.b&&t.Hc&&(t.b.ontimeout=null),h(t.Ec)&&(n.clearTimeout(t.Ec),t.Ec=null)},Lr=function(t){return t.b?t.b.readyState:0},Ur=function(t){try{return 2<Lr(t)?t.b.status:-1}catch(t){return-1}},Fr=function(t){try{return t.b?t.b.responseText:""}catch(e){return wr(t.U,"Can not get responseText: "+e.message),""}},Wr=function(t,e){return e+" ["+t.Zd+" "+t.qc+" "+Ur(t)+"]"},Vr=function(t,e){this.ea=this.Xa=this.ha="",this.lb=null,this.Ja=this.xa="",this.S=this.df=!1;var n;t instanceof Vr?(this.S=void 0!==e?e:t.S,Kr(this,t.ha),n=t.Xa,Jr(this),this.Xa=n,Br(this,t.ea),qr(this,t.lb),Xr(this,t.xa),Gr(this,t.W.clone()),t=t.Ja,Jr(this),this.Ja=t):t&&(n=String(t).match(Er))?(this.S=!!e,Kr(this,n[1]||"",!0),t=n[2]||"",Jr(this),this.Xa=$r(t),Br(this,n[3]||"",!0),qr(this,n[4]),Xr(this,n[5]||"",!0),Gr(this,n[6]||"",!0),t=n[7]||"",Jr(this),this.Ja=$r(t)):(this.S=!!e,this.W=new ai(null,0,this.S))};Vr.prototype.toString=function(){var t=[],e=this.ha;e&&t.push(Zr(e,ei,!0),":");var n=this.ea;return(n||"file"==e)&&(t.push("//"),(e=this.Xa)&&t.push(Zr(e,ei,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.lb)&&t.push(":",String(n))),(n=this.xa)&&(this.ea&&"/"!=n.charAt(0)&&t.push("/"),t.push(Zr(n,"/"==n.charAt(0)?ri:ni,!0))),(n=this.W.toString())&&t.push("?",n),(n=this.Ja)&&t.push("#",Zr(n,oi)),t.join("")},Vr.prototype.resolve=function(t){var e=this.clone(),n=!!t.ha;if(n?Kr(e,t.ha):n=!!t.Xa,n){var r=t.Xa;Jr(e),e.Xa=r}else n=!!t.ea;if(n?Br(e,t.ea):n=null!=t.lb,r=t.xa,n)qr(e,t.lb);else if(n=!!t.xa){if("/"!=r.charAt(0))if(this.ea&&!this.xa)r="/"+r;else{var i=e.xa.lastIndexOf("/");-1!=i&&(r=e.xa.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(N(i,"./")||N(i,"/.")){for(var r=0==i.lastIndexOf("/",0),i=i.split("/"),o=[],a=0;a<i.length;){var s=i[a++];"."==s?r&&a==i.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&a==i.length&&o.push("")):(o.push(s),r=!0)}r=o.join("/")}else r=i}return n?Xr(e,r):n=""!==t.W.toString(),n?Gr(e,t.W.clone()):n=!!t.Ja,n&&(t=t.Ja,Jr(e),e.Ja=t),e},Vr.prototype.clone=function(){return new Vr(this)};var Kr=function(t,e,n){Jr(t),t.ha=n?$r(e,!0):e,t.ha&&(t.ha=t.ha.replace(/:$/,""))},Br=function(t,e,n){Jr(t),t.ea=n?$r(e,!0):e},qr=function(t,e){if(Jr(t),e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.lb=e}else t.lb=null},Xr=function(t,e,n){Jr(t),t.xa=n?$r(e,!0):e},Gr=function(t,e,n){Jr(t),e instanceof ai?(t.W=e,t.W.td(t.S)):(n||(e=Zr(e,ii)),t.W=new ai(e,0,t.S))},Hr=function(t,e,n){Jr(t),t.W.set(e,n)},Qr=function(t,e){return t.W.get(e)};Vr.prototype.removeParameter=function(t){return Jr(this),this.W.remove(t),this};var Jr=function(t){if(t.df)throw Error("Tried to modify a read-only Uri")};Vr.prototype.td=function(t){return this.S=t,this.W&&this.W.td(t),this};var Yr=function(t){return t instanceof Vr?t.clone():new Vr(t,void 0)},zr=function(t,e){var n=new Vr(null,void 0);return Kr(n,"https"),t&&Br(n,t),e&&Xr(n,e),n},$r=function(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""},Zr=function(t,e,n){return c(t)?(t=encodeURI(t).replace(e,ti),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null},ti=function(t){return t=t.charCodeAt(0),"%"+(t>>4&15).toString(16)+(15&t).toString(16)},ei=/[#\/\?@]/g,ni=/[\#\?:]/g,ri=/[\#\?]/g,ii=/[\#\?@]/g,oi=/#/g,ai=function(t,e,n){this.o=this.l=null,this.O=t||null,this.S=!!n},si=function(t){t.l||(t.l=new Zn,t.o=0,t.O&&_r(t.O,function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)}))},ui=function(t){var e=rr(t);if(void 0===e)throw Error("Keys are undefined");var n=new ai(null,0,void 0);t=nr(t);for(var r=0;r<e.length;r++){var i=e[r],o=t[r];s(o)?ci(n,i,o):n.add(i,o)}return n};t=ai.prototype,t.add=function(t,e){si(this),this.O=null,t=this.R(t);var n=this.l.get(t);return n||this.l.set(t,n=[]),n.push(e),this.o=D(this.o)+1,this},t.remove=function(t){return si(this),t=this.R(t),!!this.l.yb(t)&&(this.O=null,this.o=D(this.o)-this.l.get(t).length,this.l.remove(t))},t.yb=function(t){return si(this),t=this.R(t),this.l.yb(t)},t.oa=function(){si(this);for(var t=this.l.Z(),e=this.l.oa(),n=[],r=0;r<e.length;r++)for(var i=t[r],o=0;o<i.length;o++)n.push(e[r]);return n},t.Z=function(t){si(this);var e=[];if(c(t))this.yb(t)&&(e=J(e,this.l.get(this.R(t))));else{t=this.l.Z();for(var n=0;n<t.length;n++)e=J(e,t[n])}return e},t.set=function(t,e){return si(this),this.O=null,t=this.R(t),this.yb(t)&&(this.o=D(this.o)-this.l.get(t).length),this.l.set(t,[e]),this.o=D(this.o)+1,this},t.get=function(t,e){return t=t?this.Z(t):[],0<t.length?String(t[0]):e};var ci=function(t,e,n){t.remove(e),0<n.length&&(t.O=null,t.l.set(t.R(e),Y(n)),t.o=D(t.o)+n.length)};ai.prototype.toString=function(){if(this.O)return this.O;if(!this.l)return"";for(var t=[],e=this.l.oa(),n=0;n<e.length;n++)for(var r=e[n],i=encodeURIComponent(String(r)),r=this.Z(r),o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),t.push(a)}return this.O=t.join("&")},ai.prototype.clone=function(){var t=new ai;return t.O=this.O,this.l&&(t.l=this.l.clone(),t.o=this.o),t},ai.prototype.R=function(t){return t=String(t),this.S&&(t=t.toLowerCase()),t},ai.prototype.td=function(t){t&&!this.S&&(si(this),this.O=null,this.l.forEach(function(t,e){var n=e.toLowerCase();e!=n&&(this.remove(e),ci(this,n,t))},this)),this.S=t};var hi=function(){var t=Oi();return pt&&!!Tt&&11==Tt||/Edge\/\d+/.test(t)},fi=function(){return n.window&&n.window.location.href||""},li=function(t,e){e=e||n.window;var r="about:blank";t&&(r=_e(Se(t))),e.location.href=r},pi=function(t,e){var n,r=[];for(n in t)n in e?typeof t[n]!=typeof e[n]?r.push(n):s(t[n])?ot(t[n],e[n])||r.push(n):"object"==typeof t[n]&&null!=t[n]&&null!=e[n]?0<pi(t[n],e[n]).length&&r.push(n):t[n]!==e[n]&&r.push(n):r.push(n);for(n in e)n in t||r.push(n);return r},di=function(){var t;return t=Oi(),!((t="Chrome"!=Si(t)?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t)&&(!pt||!Tt||9<Tt)},vi=function(t){return t=(t||Oi()).toLowerCase(),!!(t.match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))},gi=function(t){t=t||n.window;try{t.close()}catch(t){}},bi=function(t,e,n){var r=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;e={width:e,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Oi().toLowerCase(),r&&(e.target=r,N(n,"crios/")&&(e.target="_blank")),"Firefox"==Si(Oi())&&(t=t||"http://localhost",e.scrollbars=!0);var a;n=t||"about:blank",(r=e)||(r={}),t=window,e=n instanceof Ee?n:Se(void 0!==n.href?n.href:String(n)),n=r.target||n.target,i=[];for(a in r)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+r[a]);break;case"target":case"noreferrer":break;default:i.push(a+"="+(r[a]?1:0))}if(a=i.join(","),(tt("iPhone")&&!tt("iPod")&&!tt("iPad")||tt("iPad")||tt("iPod"))&&t.navigator&&t.navigator.standalone&&n&&"_self"!=n?(a=t.document.createElement("A"),"undefined"!=typeof HTMLAnchorElement&&"undefined"!=typeof Location&&"undefined"!=typeof Element&&(i=a&&(a instanceof HTMLAnchorElement||!(a instanceof Location||a instanceof Element)),o=l(a)?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):void 0===a?"undefined":null===a?"null":typeof a,j(i,"Argument is not a HTMLAnchorElement (or a non-Element mock); got: %s",o)),e=e instanceof Ee?e:Se(e),a.href=_e(e),a.setAttribute("target",n),r.noreferrer&&a.setAttribute("rel","noreferrer"),r=document.createEvent("MouseEvent"),r.initMouseEvent("click",!0,!0,t,1),a.dispatchEvent(r),a={}):r.noreferrer?(a=t.open("",n,a),r=_e(e),a&&(vt&&N(r,";")&&(r="'"+r.replace(/'/g,"%27")+"'"),a.opener=null,t=we("b/12014412, meta tag with sanitized URL"),O.test(r)&&(-1!=r.indexOf("&")&&(r=r.replace(T,"&amp;")),-1!=r.indexOf("<")&&(r=r.replace(E,"&lt;")),-1!=r.indexOf(">")&&(r=r.replace(_,"&gt;")),-1!=r.indexOf('"')&&(r=r.replace(A,"&quot;")),-1!=r.indexOf("'")&&(r=r.replace(S,"&#39;")),-1!=r.indexOf("\0")&&(r=r.replace(I,"&#0;"))),r='<META HTTP-EQUIV="refresh" content="0; url='+r+'">',L(ye(t),"must provide justification"),j(!/^[\s\xa0]*$/.test(ye(t)),"must provide non-empty justification"),a.document.write(rn((new nn).$e(r))),a.document.close())):a=t.open(_e(e),n,a),a)try{a.focus()}catch(t){}return a},yi=function(t){return new hn(function(e){var n=function(){Tr(2e3).then(function(){if(t&&!t.closed)return n();e()})};return n()})},mi=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,wi=function(){var t=null;return new hn(function(e){"complete"==n.document.readyState?e():(t=function(){e()},ae(window,"load",t))}).f(function(e){throw se(window,"load",t),e})},ki=function(){return Ti(void 0)?wi().then(function(){return new hn(function(t,e){var r=n.document,i=setTimeout(function(){e(Error("Cordova framework is not ready."))},1e3);r.addEventListener("deviceready",function(){clearTimeout(i),t()},!1)})}):vn(Error("Cordova must run in an Android or iOS file scheme."))},Ti=function(t){return t=t||Oi(),!("file:"!==xi()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))},Ei=function(){var t=n.window;try{return!(!t||t==t.top)}catch(t){return!1}},_i=function(){return r.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":r.INTERNAL.hasOwnProperty("node")?"Node":"Browser"},Ai=function(){var t=_i();return"ReactNative"===t||"Node"===t},Si=function(t){var e=t.toLowerCase();return N(e,"opera/")||N(e,"opr/")||N(e,"opios/")?"Opera":N(e,"iemobile")?"IEMobile":N(e,"msie")||N(e,"trident/")?"IE":N(e,"edge/")?"Edge":N(e,"firefox/")?"Firefox":N(e,"silk/")?"Silk":N(e,"blackberry")?"Blackberry":N(e,"webos")?"Webos":!N(e,"safari/")||N(e,"chrome/")||N(e,"crios/")||N(e,"android")?!N(e,"chrome/")&&!N(e,"crios/")||N(e,"edge/")?N(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":"Chrome":"Safari"},Ii=function(t){var e=_i();return("Browser"===e?Si(Oi()):e)+"/JsCore/"+t},Oi=function(){return n.navigator&&n.navigator.userAgent||""},Ni=function(t,e){t=t.split("."),e=e||n;for(var r=0;r<t.length&&"object"==typeof e&&null!=e;r++)e=e[t[r]];return r!=t.length&&(e=void 0),e},Pi=function(){var t;if(t=(Ri()||"chrome-extension:"===xi()||Ti())&&!Ai())t:{try{var e=n.localStorage,r=Li();if(e){e.setItem(r,"1"),e.removeItem(r),t=!hi()||!!n.indexedDB;break t}}catch(t){}t=!1}return t},Ri=function(){return"http:"===xi()||"https:"===xi()},xi=function(){return n.location&&n.location.protocol||null},Ci=function(t){return t=t||Oi(),!vi(t)&&"Firefox"!=Si(t)},ji=function(t){return void 0===t?null:Ne(t)},Mi=function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n},Di=function(t){if(null!==t)return JSON.parse(t)},Li=function(t){return t||""+Math.floor(1e9*Math.random()).toString()},Ui=function(t){return t=t||Oi(),"Safari"!=Si(t)&&!t.toLowerCase().match(/iphone|ipad|ipod/)},Fi=function(){var t=n.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var r=0;r<t.CP.length;r++)t.CP[r]=null},Wi=function(){return!n.navigator||"boolean"!=typeof n.navigator.onLine||n.navigator.onLine},Vi=function(t,e,n,r){if(t>e)throw Error("Short delay should be less than long delay!");this.Ff=t,this.gf=e,t=n||Oi(),r=r||_i(),this.cf=vi(t)||"ReactNative"===r};Vi.prototype.get=function(){return this.cf?this.gf:this.Ff};var Ki,Bi=function(){var t=n.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState},qi=function(){var t=n.document,e=null;return Bi()||!t?dn():new hn(function(n){e=function(){Bi()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)}).f(function(n){throw t.removeEventListener("visibilitychange",e,!1),n})},Xi={},Gi=function(t){Xi[t]||(Xi[t]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t))};try{var Hi={};Object.defineProperty(Hi,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Hi,"abcd",{configurable:!0,enumerable:!0,value:2}),Ki=2==Hi.abcd}catch(t){Ki=!1}var Qi=function(t,e,n){Ki?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n},Ji=function(t,e){Ki?Object.defineProperty(t,"provider",{configurable:!0,enumerable:!0,get:function(){return Gi("firebase.auth.AuthCredential.provider is deprecated. Please use the providerId field instead."),e}}):t.provider=e},Yi=function(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Qi(t,n,e[n])},zi=function(t){var e={};return Yi(e,t),e},$i=function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n},Zi=function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var r=t[e[n]];if(void 0===r||null===r||""===r)return!1}return!0},to=function(t){var e=t;if("object"==typeof t&&null!=t){var n,e="length"in t?[]:{};for(n in t)Qi(e,n,to(t[n]))}return e},eo="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),no=["client_id","response_type","scope","redirect_uri","state"],ro={Pf:{Mb:500,Lb:600,providerId:"facebook.com",qd:no},Qf:{Mb:500,Lb:620,providerId:"github.com",qd:no},Rf:{Mb:515,Lb:680,providerId:"google.com",qd:no},Sf:{Mb:485,Lb:705,providerId:"twitter.com",qd:eo}},io=function(t){for(var e in ro)if(ro[e].providerId==t)return ro[e];return null},oo=function(t,e){this.code="auth/"+t,this.message=e||so[t]||""};y(oo,Error),oo.prototype.C=function(){return{code:this.code,message:this.message}},oo.prototype.toJSON=function(){return this.C()};var ao=function(t){var e=t&&t.code;return e?new oo(e.substring(5),t.message):null},so={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"","code-expired":"","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"The user's credential is no longer valid. The user must sign in again.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-identifier-number":"","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"","missing-iframe-start":"An internal error has occurred.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"","missing-verification-code":"","missing-identifier-number":"","missing-verification-id":"","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","user-cancelled":"User did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},uo=function(t,e,n,r,i){if(this.da=t,this.J=e||null,this.tb=n||null,this.sd=r||null,this.P=i||null,!this.tb&&!this.P)throw new oo("invalid-auth-event");if(this.tb&&this.P)throw new oo("invalid-auth-event");if(this.tb&&!this.sd)throw new oo("invalid-auth-event")};uo.prototype.ic=function(){return this.sd},uo.prototype.getError=function(){return this.P},uo.prototype.C=function(){return{type:this.da,eventId:this.J,urlResponse:this.tb,sessionId:this.sd,error:this.P&&this.P.C()}};var co=function(t){return t=t||{},t.type?new uo(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&ao(t.error)):null},ho=function(t){var e="unauthorized-domain",n=void 0,r=Yr(t);t=r.ea,r=r.ha,"chrome-extension"==r?n=w("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==r||"https"==r?n=w("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",oo.call(this,e,n)};y(ho,oo);var fo=function(t){this.ff=t.sub,b(),this.gc=t.email||null},lo=function(t,e){return t.then(function(t){if(t.idToken){var n;t:{var r=t.idToken.split(".");if(3==r.length){for(var r=r[1],i=(4-r.length%4)%4,o=0;o<i;o++)r+=".";try{var a=JSON.parse(Pt(r));if(a.sub&&a.iss&&a.aud&&a.exp){n=new fo(a);break t}}catch(t){}}n=null}if(!n||e!=n.ff)throw new oo("user-mismatch");return t}throw new oo("user-mismatch")}).f(function(t){throw t&&t.code&&"auth/user-not-found"==t.code?new oo("user-mismatch"):t})},po=function(t,e){if(e.idToken||e.accessToken)e.idToken&&Qi(this,"idToken",e.idToken),e.accessToken&&Qi(this,"accessToken",e.accessToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new oo("internal-error","failed to construct a credential");Qi(this,"accessToken",e.oauthToken),Qi(this,"secret",e.oauthTokenSecret)}Ji(this,t),Qi(this,"providerId",t)};po.prototype.Ab=function(t){return ra(t,vo(this))},po.prototype.cd=function(t,e){var n=vo(this);return n.idToken=e,ia(t,n)},po.prototype.ed=function(t,e){var n=vo(this);return lo(oa(t,n),e)};var vo=function(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,{postBody:ui(e).toString(),requestUri:"http://localhost"}};po.prototype.C=function(){var t={providerId:this.providerId};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),t};var go=function(t,e){this.vf=e||[],Yi(this,{providerId:t,isOAuthProvider:!0}),this.Id={}};go.prototype.setCustomParameters=function(t){return this.Id=at(t),this};var bo=function(t){go.call(this,t,no),this.rd=[]};y(bo,go),bo.prototype.addScope=function(t){return X(this.rd,t)||this.rd.push(t),this},bo.prototype.Rd=function(){return Y(this.rd)},bo.prototype.credential=function(t,e){if(!t&&!e)throw new oo("argument-error","credential failed: must provide the ID token and/or the access token.");return new po(this.providerId,{idToken:t||null,accessToken:e||null})};var yo=function(){bo.call(this,"facebook.com")};y(yo,bo),Qi(yo,"PROVIDER_ID","facebook.com");var mo=function(t){if(!t)throw new oo("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return l(t)&&(e=t.accessToken),(new yo).credential(null,e)},wo=function(){bo.call(this,"github.com")};y(wo,bo),Qi(wo,"PROVIDER_ID","github.com");var ko=function(t){if(!t)throw new oo("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return l(t)&&(e=t.accessToken),(new wo).credential(null,e)},To=function(){bo.call(this,"google.com"),this.addScope("profile")};y(To,bo),Qi(To,"PROVIDER_ID","google.com");var Eo=function(t,e){var n=t;return l(t)&&(n=t.idToken,e=t.accessToken),(new To).credential(n,e)},_o=function(){go.call(this,"twitter.com",eo)};y(_o,go),Qi(_o,"PROVIDER_ID","twitter.com");var Ao=function(t,e){var n=t;if(l(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new oo("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new po("twitter.com",n)},So=function(t,e){this.gc=t,this.jd=e,Ji(this,"password"),Qi(this,"providerId","password")};So.prototype.Ab=function(t){return Pa(t,Sa,{email:this.gc,password:this.jd})},So.prototype.cd=function(t,e){return Pa(t,wa,{idToken:e,email:this.gc,password:this.jd})},So.prototype.ed=function(t,e){return lo(this.Ab(t),e)},So.prototype.C=function(){return{email:this.gc,password:this.jd}};var Io=function(){Yi(this,{providerId:"password",isOAuthProvider:!1})};Yi(Io,{PROVIDER_ID:"password"});var Oo=function(t){if(!(t.Bd&&t.Ad||t.Yb&&t.ya))throw new oo("internal-error");this.I=t,Qi(this,"providerId","identifier")};Oo.prototype.Ab=function(t){return t.se(No(this))},Oo.prototype.cd=function(t,e){var n=No(this);return n.idToken=e,Pa(t,Oa,n)},Oo.prototype.ed=function(t,e){var n=No(this);return n.operation="REAUTH",t=Pa(t,Na,n),lo(t,e)},Oo.prototype.C=function(){var t={providerId:"identifier"};return this.I.Bd&&(t.verificationId=this.I.Bd),this.I.Ad&&(t.verificationCode=this.I.Ad),this.I.Yb&&(t.temporaryProof=this.I.Yb),this.I.ya&&(t.identifierNumber=this.I.ya),t};var No=function(t){return t.I.Yb&&t.I.ya?{temporaryProof:t.I.Yb,identifierNumber:t.I.ya}:{sessionInfo:t.I.Bd,code:t.I.Ad}},Po=function(t){try{this.Ce=t||r.auth()}catch(t){throw new oo("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.identifierAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Yi(this,{providerId:"identifier",isOAuthProvider:!1})};Po.prototype.se=function(t,e){var n=this.Ce.g;return dn(e.verify()).then(function(r){if(!c(r))throw new oo("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":return Pa(n,ya,{identifierNumber:t,recaptchaToken:r});default:throw new oo("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}})},Yi(Po,{PROVIDER_ID:"identifier"});var Ro=function(t){if(t.temporaryProof&&t.identifierNumber)return new Oo({Yb:t.temporaryProof,ya:t.identifierNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,r=t&&t.oauthTokenSecret;t=t&&t.oauthIdToken;try{switch(e){case"google.com":return Eo(t,n);case"facebook.com":return mo(n);case"github.com":return ko(n);case"twitter.com":return Ao(n,r);default:return new bo(e).credential(t,n)}}catch(t){return null}},xo=function(t){if(!t.isOAuthProvider)throw new oo("invalid-oauth-provider")},Co=function(t,e,n){oo.call(this,t,n),t=e||{},t.email&&Qi(this,"email",t.email),t.ya&&Qi(this,"identifierNumber",t.ya),t.credential&&Qi(this,"credential",t.credential)};y(Co,oo),Co.prototype.C=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.identifierNumber&&(t.identifierNumber=this.identifierNumber);var e=this.credential&&this.credential.C();return e&&ut(t,e),t},Co.prototype.toJSON=function(){return this.C()};var jo=function(t){if(t.code){var e=t.code||"";0==e.indexOf("auth/")&&(e=e.substring(5));var n={credential:Ro(t)};if(t.email)n.email=t.email;else{if(!t.identifierNumber)return new oo(e,t.message||void 0);n.ya=t.identifierNumber}return new Co(e,n,t.message)}return null},Mo=function(t){this.Of=t};y(Mo,Me),Mo.prototype.fc=function(){return new this.Of},Mo.prototype.$c=function(){return{}};var Do,Lo=function(t,e,i){var o;if(o="Node"==_i(),!(o=n.XMLHttpRequest||o&&r.INTERNAL.node&&r.INTERNAL.node.XMLHttpRequest))throw new oo("internal-error","The XMLHttpRequest compatibility library was not found.");this.j=t,t=e||{},this.Bf=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.Cf=t.secureTokenTimeout||Uo,this.ge=at(t.secureTokenHeaders||Fo),this.Le=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.Me=t.firebaseTimeout||Wo,this.Pd=at(t.firebaseHeaders||Vo),i&&(this.Pd["X-Client-Version"]=i,this.ge["X-Client-Version"]=i),this.Ee=new We,this.Nf=new Mo(o)},Uo=new Vi(3e4,6e4),Fo={"Content-Type":"application/x-www-form-urlencoded"},Wo=new Vi(3e4,6e4),Vo={"Content-Type":"application/json"},Ko=function(t,e,n,r,i,o,a){Wi()?(di()?t=v(t.Ef,t):(Do||(Do=new hn(function(t,e){qo(t,e)})),t=v(t.Df,t)),t(e,n,r,i,o,a)):n&&n(null)};Lo.prototype.Ef=function(t,e,n,r,i,o){var a,s="Node"==_i(),u=Ai()?s?new Ar(this.Nf):new Ar:new Ar(this.Ee);o&&(u.sb=Math.max(0,o),a=setTimeout(function(){u.dispatchEvent("timeout")},o)),u.listen("complete",function(){a&&clearTimeout(a);var t=null;try{t=JSON.parse(Fr(this))||null}catch(e){t=null}e&&e(t)}),br(u,"ready",function(){a&&clearTimeout(a),this.Ga||(this.Ga=!0,this.cb())}),br(u,"timeout",function(){a&&clearTimeout(a),this.Ga||(this.Ga=!0,this.cb()),e&&e(null)}),u.send(t,n,r,i)};var Bo="__fcb"+Math.floor(1e6*Math.random()).toString(),qo=function(t,e){((window.gapi||{}).client||{}).request?t():(n[Bo]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},Ln(function(){e(Error("CORS_UNSUPPORTED"))}))};Lo.prototype.Df=function(t,e,n,r,i){var o=this;Do.then(function(){window.gapi.client.setApiKey(o.j);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:r,headers:i,authType:"none",callback:function(t){window.gapi.auth.setToken(a),e&&e(t)}})}).f(function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})})};var Xo=function(t,e){return new hn(function(n,r){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?Ko(t,t.Bf+"?key="+encodeURIComponent(t.j),function(t){t?t.error?r(Ra(t)):t.access_token&&t.refresh_token?n(t):r(new oo("internal-error")):r(new oo("network-request-failed"))},"POST",ui(e).toString(),t.ge,t.Cf.get()):r(new oo("internal-error"))})},Go=function(t,e,n,r,i,o){var a=Yr(t.Le+e);Hr(a,"key",t.j),o&&Hr(a,"cb",b().toString());var s="GET"==n;if(s)for(var u in r)r.hasOwnProperty(u)&&Hr(a,u,r[u]);return new hn(function(e,o){Ko(t,a.toString(),function(t){t?t.error?o(Ra(t,i||{})):e(t):o(new oo("network-request-failed"))},n,s?void 0:Ne(Mi(r)),t.Pd,t.Me.get())})},Ho=function(t){if(!ge.test(t.email))throw new oo("invalid-email")},Qo=function(t){"email"in t&&Ho(t)},Jo=function(t,e){return Pa(t,ha,{identifier:e,continueUri:Ri()?fi():"http://localhost"}).then(function(t){return t.allProviders||[]})},Yo=function(t){return Pa(t,ga,{}).then(function(t){return t.authorizedDomains||[]})},zo=function(t){if(!t.idToken)throw new oo("internal-error")},$o=function(t){if(t.identifierNumber||t.temporaryProof){if(!t.identifierNumber||!t.temporaryProof)throw new oo("internal-error")}else{if(!t.sessionInfo)throw new oo("missing-verification-id");if(!t.code)throw new oo("missing-verification-code")}};Lo.prototype.signInAnonymously=function(){return Pa(this,ka,{})},Lo.prototype.updateEmail=function(t,e){return Pa(this,ma,{idToken:t,email:e})},Lo.prototype.updatePassword=function(t,e){return Pa(this,wa,{idToken:t,password:e})};var Zo={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};Lo.prototype.updateProfile=function(t,e){var n={idToken:t},r=[];return et(Zo,function(t,i){var o=e[i];null===o?r.push(t):i in e&&(n[i]=o)}),r.length&&(n.deleteAttribute=r),Pa(this,ma,n)},Lo.prototype.sendPasswordResetEmail=function(t){return Pa(this,va,{requestType:"PASSWORD_RESET",email:t})},Lo.prototype.sendEmailVerification=function(t){return Pa(this,da,{requestType:"VERIFY_EMAIL",idToken:t})},Lo.prototype.se=function(t){return Pa(this,Ia,t)};var ta=function(t,e,n){return Pa(t,la,{idToken:e,deleteProvider:n})},ea=function(t){if(!t.requestUri||!t.sessionId&&!t.postBody)throw new oo("internal-error")},na=function(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=jo(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=jo(t)):"EMAIL_EXISTS"==t.errorMessage&&(t.code="email-already-in-use",e=jo(t)),e)throw e;if(!t.idToken)throw new oo("internal-error")},ra=function(t,e){return e.returnIdpCredential=!0,Pa(t,Ta,e)},ia=function(t,e){return e.returnIdpCredential=!0,Pa(t,_a,e)},oa=function(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,Pa(t,Ea,e)},aa=function(t){if(!t.oobCode)throw new oo("invalid-action-code")};Lo.prototype.confirmPasswordReset=function(t,e){return Pa(this,ba,{oobCode:t,newPassword:e})},Lo.prototype.checkActionCode=function(t){return Pa(this,ua,{oobCode:t})},Lo.prototype.applyActionCode=function(t){return Pa(this,sa,{oobCode:t})};var sa={endpoint:"setAccountInfo",A:aa,Wa:"email"},ua={endpoint:"resetPassword",A:aa,Y:function(t){if(!t.email||!t.requestType)throw new oo("internal-error")}},ca={endpoint:"signupNewUser",A:function(t){if(Ho(t),!t.password)throw new oo("weak-password")},Y:zo,sa:!0},ha={endpoint:"createAuthUri"},fa={endpoint:"deleteAccount",Ua:["idToken"]},la={endpoint:"setAccountInfo",Ua:["idToken","deleteProvider"],A:function(t){if(!s(t.deleteProvider))throw new oo("internal-error")}},pa={endpoint:"getAccountInfo"},da={endpoint:"getOobConfirmationCode",Ua:["idToken","requestType"],A:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new oo("internal-error")},Wa:"email"},va={endpoint:"getOobConfirmationCode",Ua:["requestType"],A:function(t){if("PASSWORD_RESET"!=t.requestType)throw new oo("internal-error");Ho(t)},Wa:"email"},ga={De:!0,endpoint:"getProjectConfig",We:"GET"},ba={endpoint:"resetPassword",A:aa,Wa:"email"},ya={endpoint:"sendVerificationCode",Ua:["identifierNumber","recaptchaToken"],Wa:"sessionInfo"},ma={endpoint:"setAccountInfo",Ua:["idToken"],A:Qo,sa:!0},wa={endpoint:"setAccountInfo",Ua:["idToken"],A:function(t){if(Qo(t),!t.password)throw new oo("weak-password")},Y:zo,sa:!0},ka={endpoint:"signupNewUser",Y:zo,sa:!0},Ta={endpoint:"verifyAssertion",A:ea,Y:na,sa:!0},Ea={endpoint:"verifyAssertion",A:ea,Y:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new oo("user-not-found");if(!t.idToken)throw new oo("internal-error")},sa:!0},_a={endpoint:"verifyAssertion",A:function(t){if(ea(t),!t.idToken)throw new oo("internal-error")},Y:na,sa:!0},Aa={endpoint:"verifyCustomToken",A:function(t){if(!t.token)throw new oo("invalid-custom-token")},Y:zo,sa:!0},Sa={endpoint:"verifyPassword",A:function(t){if(Ho(t),!t.password)throw new oo("wrong-password")},Y:zo,sa:!0},Ia={endpoint:"verifyidentifierNumber",A:$o,Y:zo},Oa={endpoint:"verifyidentifierNumber",A:function(t){if(!t.idToken)throw new oo("internal-error");$o(t)},Y:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",jo(t);zo(t)}},Na={Ge:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyidentifierNumber",A:$o,Y:zo},Pa=function(t,e,n){if(!Zi(n,e.Ua))return vn(new oo("internal-error"));var r,i=e.We||"POST";return dn(n).then(e.A).then(function(){return e.sa&&(n.returnSecureToken=!0),Go(t,e.endpoint,i,n,e.Ge,e.De||!1)}).then(function(t){return r=t}).then(e.Y).then(function(){if(!e.Wa)return r;if(!(e.Wa in r))throw new oo("internal-error");return r[e.Wa]})},Ra=function(t,e){var n;n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"";var r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new oo(r[n]):null)return n;n=t.error&&t.error.message||"",r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_identifier_NUMBER:"invalid-identifier-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_identifier_NUMBER:"missing-identifier-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired"},ut(r,e||{}),e=(e=n.match(/^[^\s]+\s*:\s*(.*)$/))&&1<e.length?e[1]:void 0;for(var i in r)if(0===n.indexOf(i))return new oo(r[i],e);return!e&&t&&(e=ji(t)),new oo("internal-error",e)},xa=function(t){this.V=t};xa.prototype.value=function(){return this.V},xa.prototype.je=function(t){return this.V.style=t,this};var Ca=function(t){this.V=t||{}};Ca.prototype.value=function(){return this.V},Ca.prototype.je=function(t){return this.V.style=t,this};var ja=function(t){this.Lf=t,this.nc=null,this.gd=Da(this)},Ma=function(t){var e=new Ca;return e.V.where=document.body,e.V.url=t.Lf,e.V.messageHandlersFilter=Ni("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),e.V.attributes=e.V.attributes||{},new xa(e.V.attributes).je({position:"absolute",top:"-100px",width:"1px",height:"1px"}),e.V.dontclear=!0,e},Da=function(t){return Wa().then(function(){return new hn(function(e,n){Ni("gapi.iframes.getContext")().open(Ma(t).value(),function(r){t.nc=r,t.nc.restyle({setHideOnLeave:!1});var i=setTimeout(function(){n(Error("Network Error"))},Fa.get()),o=function(){clearTimeout(i),e()};r.ping(o).then(o,function(){n(Error("Network Error"))})})})})};ja.prototype.sendMessage=function(t){var e=this;return this.gd.then(function(){return new hn(function(n){e.nc.send(t.type,t,n,Ni("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})};var La=function(t,e){t.gd.then(function(){t.nc.register("authEvent",e,Ni("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})},Ua=new Vi(3e4,6e4),Fa=new Vi(5e3,15e3),Wa=function(){return new hn(function(t,e){if(Wi()){var r=function(){Fi(),Ni("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){Fi(),e(Error("Network Error"))},timeout:Ua.get()})};if(Ni("gapi.iframes.Iframe"))t();else if(Ni("gapi.load"))r();else{var i="__iframefcb"+Math.floor(1e6*Math.random()).toString();n[i]=function(){Ni("gapi.load")?r():e(Error("Network Error"))},dn(Xn("https://apis.google.com/js/api.js?onload="+i)).f(function(){e(Error("Network Error"))})}}else e(Error("Network Error"))})},Va=function(t,e,n){this.v=t,this.j=e,this.D=n,this.Ya=null,this.ac=zr(this.v,"/__/auth/iframe"),Hr(this.ac,"apiKey",this.j),Hr(this.ac,"appName",this.D)};Va.prototype.setVersion=function(t){return this.Ya=t,this},Va.prototype.toString=function(){return this.Ya?Hr(this.ac,"v",this.Ya):this.ac.removeParameter("v"),this.ac.toString()};var Ka=function(t,e,n,r,i){this.v=t,this.j=e,this.D=n,this.Be=r,this.Ya=this.J=this.pd=null,this.Pb=i};Ka.prototype.setVersion=function(t){return this.Ya=t,this},Ka.prototype.toString=function(){var t=zr(this.v,"/__/auth/handler");if(Hr(t,"apiKey",this.j),Hr(t,"appName",this.D),Hr(t,"authType",this.Be),this.Pb.isOAuthProvider){Hr(t,"providerId",this.Pb.providerId);var e,n=this.Pb,r=Mi(n.Id);for(e in r)r[e]=r[e].toString();for(n=n.vf,r=at(r),e=0;e<n.length;e++){var i=n[e];i in r&&delete r[i]}it(r)||Hr(t,"customParameters",ji(r))}if("function"==typeof this.Pb.Rd&&(n=this.Pb.Rd(),n.length&&Hr(t,"scopes",n.join(","))),this.pd?Hr(t,"redirectUrl",this.pd):t.removeParameter("redirectUrl"),this.J?Hr(t,"eventId",this.J):t.removeParameter("eventId"),this.Ya?Hr(t,"v",this.Ya):t.removeParameter("v"),this.bc)for(var o in this.bc)this.bc.hasOwnProperty(o)&&!Qr(t,o)&&Hr(t,o,this.bc[o]);return t.toString()};var Ba=function(t,e,n,r){this.v=t,this.j=e,this.D=n,this.Oe=(this.Ea=r||null)?Ii(this.Ea):null,r=this.Ea,this.Xe=new Va(t,e,n).setVersion(r).toString(),this.ma=[],this.g=new Lo(e,null,this.Oe),this.pc=this.wa=null},qa=function(t){var e=fi();return Yo(t).then(function(t){t:{for(var n=Yr(e),r=n.ha,n=n.ea,i=0;i<t.length;i++){var o,a=t[i];o=n;var s=r;if(0==a.indexOf("chrome-extension://")?o=Yr(a).ea==o&&"chrome-extension"==s:"http"!=s&&"https"!=s?o=!1:mi.test(a)?o=o==a:(a=a.split(".").join("\\."),o=new RegExp("^(.+\\."+a+"|"+a+")$","i").test(o)),o){t=!0;break t}}t=!1}if(!t)throw new ho(fi())})};t=Ba.prototype,t.Gb=function(){if(this.pc)return this.pc;var t=this;return this.pc=wi().then(function(){t.mc=new ja(t.Xe),Ga(t)})},t.Vb=function(t,e,n){var r=new oo("popup-closed-by-user"),i=new oo("web-storage-unsupported"),o=this,a=!1;return this.La().then(function(){Ha(o).then(function(n){n||(t&&gi(t),e(i),a=!0)})}).f(function(){}).then(function(){if(!a)return yi(t)}).then(function(){if(!a)return Tr(n).then(function(){e(r)})})},t.ke=function(){var t=Oi();return!Ci(t)&&!Ui(t)},t.Ud=function(){return!1},t.Nb=function(t,e,n,r,i,o,a){if(!t)return vn(new oo("popup-blocked"));if(a&&!Ci())return this.La().f(function(e){gi(t),i(e)}),r(),dn();this.wa||(this.wa=qa(this.g));var s=this;return this.wa.then(function(){var e=s.La().f(function(e){throw gi(t),i(e),e});return r(),e}).then(function(){if(xo(n),!a){var r=Xa(s.v,s.j,s.D,e,n,null,o,s.Ea);li(r,t)}}).f(function(t){throw"auth/network-request-failed"==t.code&&(s.wa=null),t})},t.Ob=function(t,e,n){this.wa||(this.wa=qa(this.g));var r=this;return this.wa.then(function(){xo(e);var i=Xa(r.v,r.j,r.D,t,e,fi(),n,r.Ea);li(i)})},t.La=function(){var t=this;return this.Gb().then(function(){return t.mc.gd}).f(function(){throw t.wa=null,new oo("network-request-failed")})},t.ne=function(){return!0};var Xa=function(t,e,n,r,i,o,a,s,u){return t=new Ka(t,e,n,r,i),t.pd=o,t.J=a,o=t.setVersion(s),o.bc=at(u||null),o.toString()},Ga=function(t){if(!t.mc)throw Error("IfcHandler must be initialized!");La(t.mc,function(e){var n={};if(e&&e.authEvent){var r=!1;for(e=co(e.authEvent),n=0;n<t.ma.length;n++)r=t.ma[n](e)||r;return n={},n.status=r?"ACK":"ERROR",dn(n)}return n.status="ERROR",dn(n)})},Ha=function(t){var e={type:"webStorageSupport"};return t.Gb().then(function(){return t.mc.sendMessage(e)}).then(function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()})};Ba.prototype.$a=function(t){this.ma.push(t)},Ba.prototype.Tb=function(t){Q(this.ma,function(e){return e==t})};var Qa=function(t){if(this.B=t||r.INTERNAL.reactNative&&r.INTERNAL.reactNative.AsyncStorage,!this.B)throw new oo("internal-error","The React Native compatibility library was not found.")};t=Qa.prototype,t.get=function(t){return dn(this.B.getItem(t)).then(function(t){return t&&Di(t)})},t.set=function(t,e){return dn(this.B.setItem(t,ji(e)))},t.remove=function(t){return dn(this.B.removeItem(t))},t.ab=function(){},t.Ta=function(){};var Ja=function(){this.B={}};t=Ja.prototype,t.get=function(t){return dn(this.B[t])},t.set=function(t,e){return this.B[t]=e,dn()},t.remove=function(t){return delete this.B[t],dn()},t.ab=function(){},t.Ta=function(){};var Ya=function(){if(!za()){if("Node"==_i())throw new oo("internal-error","The LocalStorage compatibility library was not found.");throw new oo("web-storage-unsupported")}this.B=n.localStorage||r.INTERNAL.node.localStorage},za=function(){var t="Node"==_i(),t=n.localStorage||t&&r.INTERNAL.node&&r.INTERNAL.node.localStorage;if(!t)return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}};t=Ya.prototype,t.get=function(t){var e=this;return dn().then(function(){var n=e.B.getItem(t);return Di(n)})},t.set=function(t,e){var n=this;return dn().then(function(){var r=ji(e);null===r?n.remove(t):n.B.setItem(t,r)})},t.remove=function(t){var e=this;return dn().then(function(){e.B.removeItem(t)})},t.ab=function(t){n.window&&re(n.window,"storage",t)},t.Ta=function(t){n.window&&se(n.window,"storage",t)};var $a=function(){this.B={}};t=$a.prototype,t.get=function(){return dn(null)},t.set=function(){return dn()},t.remove=function(){return dn()},t.ab=function(){},t.Ta=function(){};var Za=function(){if(!ts()){if("Node"==_i())throw new oo("internal-error","The SessionStorage compatibility library was not found.");throw new oo("web-storage-unsupported")}this.B=n.sessionStorage||r.INTERNAL.node.sessionStorage},ts=function(){var t="Node"==_i(),t=n.sessionStorage||t&&r.INTERNAL.node&&r.INTERNAL.node.sessionStorage;if(!t)return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}};t=Za.prototype,t.get=function(t){var e=this;return dn().then(function(){var n=e.B.getItem(t);return Di(n)})},t.set=function(t,e){var n=this;return dn().then(function(){var r=ji(e);null===r?n.remove(t):n.B.setItem(t,r)})},t.remove=function(t){var e=this;return dn().then(function(){e.B.removeItem(t)})},t.ab=function(){},t.Ta=function(){};var es,ns=function(t,e,r,i,o,a){if(!window.indexedDB)throw new oo("web-storage-unsupported");this.He=t,this.fd=e,this.Qc=r,this.re=i,this.wb=o,this.$={},this.Wb=[],this.Jb=0,this.Ye=a||n.indexedDB},rs=function(t){return new hn(function(e,n){var r=t.Ye.open(t.He,t.wb);r.onerror=function(t){n(Error(t.target.errorCode))},r.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore(t.fd,{keyPath:t.Qc})}catch(t){n(t)}},r.onsuccess=function(t){e(t.target.result)}})},is=function(t){return t.Xd||(t.Xd=rs(t)),t.Xd},os=function(t,e){return e.objectStore(t.fd)},as=function(t,e,n){return e.transaction([t.fd],n?"readwrite":"readonly")},ss=function(t){return new hn(function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(Error(t.target.errorCode))}})};t=ns.prototype,t.set=function(t,e){var n,r=!1,i=this;return yn(is(this).then(function(e){return n=e,e=os(i,as(i,n,!0)),ss(e.get(t))}).then(function(o){var a=os(i,as(i,n,!0));return o?(o.value=e,ss(a.put(o))):(i.Jb++,r=!0,o={},o[i.Qc]=t,o[i.re]=e,ss(a.add(o)))}).then(function(){i.$[t]=e}),function(){r&&i.Jb--})},t.get=function(t){var e=this;return is(this).then(function(n){return ss(os(e,as(e,n,!1)).get(t))}).then(function(t){return t&&t.value})},t.remove=function(t){var e=!1,n=this;return yn(is(this).then(function(r){return e=!0,n.Jb++,ss(os(n,as(n,r,!0)).delete(t))}).then(function(){delete n.$[t]}),function(){e&&n.Jb--})},t.Hf=function(){var t=this;return is(this).then(function(e){var n=os(t,as(t,e,!1));return n.getAll?ss(n.getAll()):new hn(function(t,e){var r=[],i=n.openCursor();i.onsuccess=function(e){(e=e.target.result)?(r.push(e.value),e.continue()):t(r)},i.onerror=function(t){e(Error(t.target.errorCode))}})}).then(function(e){var n={},r=[];if(0==t.Jb){for(r=0;r<e.length;r++)n[e[r][t.Qc]]=e[r][t.re];r=pi(t.$,n),t.$=n}return r})},t.ab=function(t){0==this.Wb.length&&this.vd(),this.Wb.push(t)},t.Ta=function(t){Q(this.Wb,function(e){return e==t}),0==this.Wb.length&&this.Bc()},t.vd=function(){var t=this;this.Bc();var e=function(){return t.kd=Tr(800).then(v(t.Hf,t)).then(function(e){0<e.length&&W(t.Wb,function(t){t(e)})}).then(e).f(function(t){"STOP_EVENT"!=t.message&&e()}),t.kd};e()},t.Bc=function(){this.kd&&this.kd.cancel("STOP_EVENT")};var us,cs=function(){this.Ld={Browser:hs,Node:fs,ReactNative:ls}[_i()]},hs={M:Ya,yd:Za},fs={M:Ya,yd:Za},ls={M:Qa,yd:$a},ps=function(t){var e={},n=t.email,r=t.newEmail;if(t=t.requestType,!n||!t)throw Error("Invalid provider user info!");e.fromEmail=r||null,e.email=n,Qi(this,"operation",t),Qi(this,"data",to(e))},ds=function(t,e,n,r,i,o){if(this.pf=t,this.xf=e,this.Qe=n,this.rc=r,this.zd=i,this.yf=!!o,this.kb=null,this.Ma=this.rc,this.zd<this.rc)throw Error("Proactive refresh lower bound greater than upper bound!")};ds.prototype.start=function(){this.Ma=this.rc,gs(this,!0)};var vs=function(t,e){return e?(t.Ma=t.rc,t.Qe()):(e=t.Ma,t.Ma*=2,t.Ma>t.zd&&(t.Ma=t.zd),e)},gs=function(t,e){t.stop(),t.kb=Tr(vs(t,e)).then(function(){return t.yf?dn():qi()}).then(function(){return t.pf()}).then(function(){gs(t,!0)}).f(function(e){t.xf(e)&&gs(t,!1)})};ds.prototype.stop=function(){this.kb&&(this.kb.cancel(),this.kb=null)};var bs=function(t){var e={};e["facebook.com"]=ms,e["google.com"]=ks,e["github.com"]=ws,e["twitter.com"]=Ts;var n=t&&t.providerId;return n?e[n]?new e[n](t):new ys(t):null},ys=function(t){var e=Di(t.rawUserInfo||"{}");if(!(t=t.providerId))throw Error("Invalid additional user info!");Qi(this,"profile",to(e||{})),Qi(this,"providerId",t)},ms=function(t){if(ys.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider id!")};y(ms,ys);var ws=function(t){if(ys.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider id!");Qi(this,"username",this.profile&&this.profile.login||null)};y(ws,ys);var ks=function(t){if(ys.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider id!")};y(ks,ys);var Ts=function(t){if(ys.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider id!");Qi(this,"username",t.screenName||null)};y(Ts,ys);var Es,_s=function(t,e,n,r){this.kf=t,this.he=e,this.zf=n,this.Ub=r,this.T={},us||(us=new cs),t=us;try{var i;hi()?(es||(es=new ns("firebaseLocalStorageDb","firebaseLocalStorage","fbase_key","value",1)),i=es):i=new t.Ld.M,this.Qa=i}catch(t){this.Qa=new Ja,this.Ub=!0}try{this.Dc=new t.Ld.yd}catch(t){this.Dc=new Ja}this.wd=v(this.le,this),this.$={}},As=function(){return Es||(Es=new _s("firebase",":",!(Ui(Oi())||!Ei()),Ci())),Es};t=_s.prototype,t.R=function(t,e){return this.kf+this.he+t.name+(e?this.he+e:"")},t.get=function(t,e){return(t.M?this.Qa:this.Dc).get(this.R(t,e))},t.remove=function(t,e){return e=this.R(t,e),t.M&&!this.Ub&&(this.$[e]=null),(t.M?this.Qa:this.Dc).remove(e)},t.set=function(t,e,n){var r=this.R(t,n),i=this,o=t.M?this.Qa:this.Dc;return o.set(r,e).then(function(){return o.get(r)}).then(function(e){t.M&&!this.Ub&&(i.$[r]=e)})},t.addListener=function(t,e,r){t=this.R(t,e),this.Ub||(this.$[t]=n.localStorage.getItem(t)),it(this.T)&&this.vd(),this.T[t]||(this.T[t]=[]),this.T[t].push(r)},t.removeListener=function(t,e,n){t=this.R(t,e),this.T[t]&&(Q(this.T[t],function(t){return t==n}),0==this.T[t].length&&delete this.T[t]),it(this.T)&&this.Bc()},t.vd=function(){this.Qa.ab(this.wd),this.Ub||hi()||Ss(this)};var Ss=function(t){Is(t),t.dd=setInterval(function(){for(var e in t.T){var r=n.localStorage.getItem(e),i=t.$[e];r!=i&&(t.$[e]=r,r=new Gt({type:"storage",key:e,target:window,oldValue:i,newValue:r,rf:!0}),t.le(r))}},1e3)},Is=function(t){t.dd&&(clearInterval(t.dd),t.dd=null)};_s.prototype.Bc=function(){this.Qa.Ta(this.wd),Is(this)},_s.prototype.le=function(t){if(t&&t.Pe){var e=t.eb.key;if(void 0!==t.eb.rf?this.Qa.Ta(this.wd):Is(this),this.zf){var r=n.localStorage.getItem(e);t=t.eb.newValue,t!=r&&(t?n.localStorage.setItem(e,t):t||n.localStorage.removeItem(e))}this.$[e]=n.localStorage.getItem(e),this.Ed(e)}else W(t,v(this.Ed,this))},_s.prototype.Ed=function(t){this.T[t]&&W(this.T[t],function(t){t()})};var Os=function(t,e){this.u=t,this.i=e||As()},Ns={name:"authEvent",M:!0},Ps=function(t){return t.i.get(Ns,t.u).then(function(t){return co(t)})};Os.prototype.$a=function(t){this.i.addListener(Ns,this.u,t)},Os.prototype.Tb=function(t){this.i.removeListener(Ns,this.u,t)};var Rs=function(t){this.i=t||As()},xs={name:"sessionId",M:!1};Rs.prototype.ic=function(t){return this.i.get(xs,t)};var Cs=function(t,e,n,r,i,o){this.v=t,this.j=e,this.D=n,this.Ea=r||null,this.me=e+":"+n,this.Af=new Rs,this.Qd=new Os(this.me),this.Zc=null,this.ma=[],this.bf=i||500,this.tf=o||2e3,this.Fb=this.uc=null},js=function(t){return new oo("invalid-cordova-configuration",t)};Cs.prototype.La=function(){return this.ad?this.ad:this.ad=ki().then(function(){if("function"!=typeof Ni("universalLinks.subscribe",n))throw js("cordova-universal-links-plugin is not installed");if(void 0===Ni("BuildInfo.packageName",n))throw js("cordova-plugin-buildinfo is not installed");if("function"!=typeof Ni("cordova.plugins.browsertab.openUrl",n))throw js("cordova-plugin-browsertab is not installed");if("function"!=typeof Ni("cordova.InAppBrowser.open",n))throw js("cordova-plugin-inappbrowser is not installed")},function(){throw new oo("cordova-not-ready")})};var Ms=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")},Ds=function(t){var e=new Wt;return e.update(t),z(e.digest())};t=Cs.prototype,t.Vb=function(t,e){return e(new oo("operation-not-supported-in-this-environment")),dn()},t.Nb=function(){return vn(new oo("operation-not-supported-in-this-environment"))},t.ne=function(){return!1},t.ke=function(){return!0},t.Ud=function(){return!0},t.Ob=function(t,e,r){if(this.uc)return vn(new oo("redirect-operation-pending"));var i=this,o=n.document,a=null,s=null,u=null,c=null;return this.uc=yn(dn().then(function(){return xo(e),Fs(i)}).then(function(){return Ls(i,t,e,r)}).then(function(){return new hn(function(t,e){s=function(){var e=Ni("cordova.plugins.browsertab.close",n);return t(),"function"==typeof e&&e(),i.Fb&&"function"==typeof i.Fb.close&&(i.Fb.close(),i.Fb=null),!1},i.$a(s),u=function(){a||(a=Tr(i.tf).then(function(){e(new oo("redirect-cancelled-by-user"))}))},c=function(){Bi()&&u()},o.addEventListener("resume",u,!1),Oi().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",c,!1)}).f(function(t){return Ws(i).then(function(){throw t})})}),function(){u&&o.removeEventListener("resume",u,!1),c&&o.removeEventListener("visibilitychange",c,!1),a&&a.cancel(),s&&i.Tb(s),i.uc=null})};var Ls=function(t,e,r,i){var o=Ms(),a=new uo(e,i,null,o,new oo("no-auth-event")),s=Ni("BuildInfo.packageName",n);if("string"!=typeof s)throw new oo("invalid-cordova-configuration");var u=Ni("BuildInfo.displayName",n),c={};if(Oi().toLowerCase().match(/iphone|ipad|ipod/))c.ibi=s;else{if(!Oi().toLowerCase().match(/android/))return vn(new oo("operation-not-supported-in-this-environment"));c.apn=s}u&&(c.appDisplayName=u),o=Ds(o),c.sessionId=o;var h=Xa(t.v,t.j,t.D,e,r,null,i,t.Ea,c);return t.La().then(function(){var e=t.me;return t.Af.i.set(Ns,a.C(),e)}).then(function(){var e=Ni("cordova.plugins.browsertab.isAvailable",n);if("function"!=typeof e)throw new oo("invalid-cordova-configuration");var r=null;e(function(e){if(e){if("function"!=typeof(r=Ni("cordova.plugins.browsertab.openUrl",n)))throw new oo("invalid-cordova-configuration");r(h)}else{if("function"!=typeof(r=Ni("cordova.InAppBrowser.open",n)))throw new oo("invalid-cordova-configuration");e=r;var i;i=Oi(),i=!(!i.match(/(iPad|iPhone|iPod).*OS 7_\d/i)&&!i.match(/(iPad|iPhone|iPod).*OS 8_\d/i)),t.Fb=e(h,i?"_blank":"_system","location=yes")}})})},Us=function(t,e){for(var n=0;n<t.ma.length;n++)try{t.ma[n](e)}catch(t){}},Fs=function(t){return t.Zc||(t.Zc=t.La().then(function(){return new hn(function(e){var n=function(r){return e(r),t.Tb(n),!1};t.$a(n),Vs(t)})})),t.Zc},Ws=function(t){var e=null;return Ps(t.Qd).then(function(n){return e=n,n=t.Qd,n.i.remove(Ns,n.u)}).then(function(){return e})},Vs=function(t){var e=Ni("universalLinks.subscribe",n);if("function"!=typeof e)throw new oo("invalid-cordova-configuration");var r=new uo("unknown",null,null,null,new oo("no-auth-event")),i=!1,o=Tr(t.bf).then(function(){return Ws(t).then(function(){i||Us(t,r)})}),a=function(e){i=!0,o&&o.cancel(),Ws(t).then(function(n){var i=r;if(n&&e&&e.url){var o,i=null;o=e.url;var a=Yr(o),s=Qr(a,"link"),u=Qr(Yr(s),"link"),a=Qr(a,"deep_link_id");o=Qr(Yr(a),"link")||a||u||s||o,-1!=o.indexOf("/__/auth/callback")&&(i=Yr(o),i=Di(Qr(i,"firebaseError")||null),i=(i="object"==typeof i?ao(i):null)?new uo(n.da,n.J,null,null,i):new uo(n.da,n.J,o,n.ic())),i=i||r}Us(t,i)})},s=n.handleOpenURL;n.handleOpenURL=function(t){if(0==t.indexOf(Ni("BuildInfo.packageName",n)+"://")&&a({url:t}),"function"==typeof s)try{s(t)}catch(t){console.error(t)}},e(null,a)};Cs.prototype.$a=function(t){this.ma.push(t),Fs(this).f(function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new uo("unknown",null,null,null,new oo("no-auth-event")),t(e))})},Cs.prototype.Tb=function(t){Q(this.ma,function(e){return e==t})};var Ks=function(t){this.u=t,this.i=As()},Bs={name:"pendingRedirect",M:!1},qs=function(t){return t.i.set(Bs,"pending",t.u)},Xs=function(t){return t.i.remove(Bs,t.u)},Gs=function(t){return t.i.get(Bs,t.u).then(function(t){return"pending"==t})},Hs=function(t,e,n){this.v=t,this.j=e,this.D=n,this.Xb=[],this.ib=!1,this.Mc=v(this.Wc,this),this.Ra=new eu(this),this.ld=new su(this),this.Kb=new Ks(this.j+":"+this.D),this.Aa={},this.Aa.unknown=this.Ra,this.Aa.signInViaRedirect=this.Ra,this.Aa.linkViaRedirect=this.Ra,this.Aa.reauthViaRedirect=this.Ra,this.Aa.signInViaPopup=this.ld,this.Aa.linkViaPopup=this.ld,this.Aa.reauthViaPopup=this.ld,this.K=Qs(this.v,this.j,this.D)},Qs=function(t,e,n){var i=r.SDK_VERSION||null;return Ti()?new Cs(t,e,n,i):new Ba(t,e,n,i)};Hs.prototype.reset=function(){this.ib=!1,this.K.Tb(this.Mc),this.K=Qs(this.v,this.j,this.D)},Hs.prototype.Gb=function(){var t=this;this.ib||(this.ib=!0,this.K.$a(this.Mc));var e=this.K;return this.K.La().f(function(n){throw t.K==e&&t.reset(),n})};var Js=function(t){t.K.ke()&&t.Gb().f(function(e){var n=new uo("unknown",null,null,null,new oo("operation-not-supported-in-this-environment"));$s(e)&&t.Wc(n)}),t.K.Ud()||nu(t.Ra)};Hs.prototype.subscribe=function(t){if(X(this.Xb,t)||this.Xb.push(t),!this.ib){var e=this;Gs(this.Kb).then(function(t){t?Xs(e.Kb).then(function(){e.Gb().f(function(t){var n=new uo("unknown",null,null,null,new oo("operation-not-supported-in-this-environment"));$s(t)&&e.Wc(n)})}):Js(e)}).f(function(){Js(e)})}},Hs.prototype.unsubscribe=function(t){Q(this.Xb,function(e){return e==t})},Hs.prototype.Wc=function(t){if(!t)throw new oo("invalid-auth-event");for(var e=!1,n=0;n<this.Xb.length;n++){var r=this.Xb[n];if(r.Fd(t.da,t.J)){(e=this.Aa[t.da])&&e.ce(t,r),e=!0;break}}return nu(this.Ra),e};var Ys=new Vi(2e3,1e4),zs=new Vi(3e4,6e4);Hs.prototype.getRedirectResult=function(){return this.Ra.getRedirectResult()},Hs.prototype.Nb=function(t,e,n,r,i){var o=this;return this.K.Nb(t,e,n,function(){o.ib||(o.ib=!0,o.K.$a(o.Mc))},function(){o.reset()},r,i)};var $s=function(t){return!(!t||"auth/cordova-not-ready"!=t.code)};Hs.prototype.Ob=function(t,e,n){var r,i=this;return qs(this.Kb).then(function(){return i.K.Ob(t,e,n).f(function(t){if($s(t))throw new oo("operation-not-supported-in-this-environment");return r=t,Xs(i.Kb).then(function(){throw r})}).then(function(){return i.K.ne()?new hn(function(){}):Xs(i.Kb).then(function(){return i.getRedirectResult()}).then(function(){}).f(function(){})})})},Hs.prototype.Vb=function(t,e,n,r){return this.K.Vb(n,function(n){t.Va(e,null,n,r)},Ys.get())};var Zs={},tu=function(t,e,n){var r=e+":"+n;return Zs[r]||(Zs[r]=new Hs(t,e,n)),Zs[r]},eu=function(t){this.i=t,this.qb=null,this.Rb=[],this.Qb=[],this.ob=null,this.od=!1};eu.prototype.reset=function(){this.qb=null,this.ob&&(this.ob.cancel(),this.ob=null)},eu.prototype.ce=function(t,e){if(!t)return vn(new oo("invalid-auth-event"));this.reset(),this.od=!0;var n=t.da,r=t.J,i=t.getError()&&"auth/web-storage-unsupported"==t.getError().code,o=t.getError()&&"auth/operation-not-supported-in-this-environment"==t.getError().code;return"unknown"!=n||i||o?t=t.P?this.md(t,e):e.zb(n,r)?this.nd(t,e):vn(new oo("invalid-auth-event")):(ou(this,!1,null,null),t=dn()),t};var nu=function(t){t.od||(t.od=!0,ou(t,!1,null,null))};eu.prototype.md=function(t){return ou(this,!0,null,t.getError()),dn()},eu.prototype.nd=function(t,e){var n=this;e=e.zb(t.da,t.J);var r=t.tb,i=t.ic(),o=!!t.da.match(/Redirect$/);return e(r,i).then(function(t){ou(n,o,t,null)}).f(function(t){ou(n,o,null,t)})};var ru=function(t,e){if(t.qb=function(){return vn(e)},t.Qb.length)for(var n=0;n<t.Qb.length;n++)t.Qb[n](e)},iu=function(t,e){if(t.qb=function(){return dn(e)},t.Rb.length)for(var n=0;n<t.Rb.length;n++)t.Rb[n](e)},ou=function(t,e,n,r){e?r?ru(t,r):iu(t,n):iu(t,{user:null}),t.Rb=[],t.Qb=[]};eu.prototype.getRedirectResult=function(){var t=this;return new hn(function(e,n){t.qb?t.qb().then(e,n):(t.Rb.push(e),t.Qb.push(n),au(t))})};var au=function(t){var e=new oo("timeout");t.ob&&t.ob.cancel(),t.ob=Tr(zs.get()).then(function(){t.qb||ou(t,!0,null,e)})},su=function(t){this.i=t};su.prototype.ce=function(t,e){if(!t)return vn(new oo("invalid-auth-event"));var n=t.da,r=t.J;return t.P?this.md(t,e):e.zb(n,r)?this.nd(t,e):vn(new oo("invalid-auth-event"))},su.prototype.md=function(t,e){return e.Va(t.da,null,t.getError(),t.J),dn()},su.prototype.nd=function(t,e){var n=t.J,r=t.da,i=e.zb(r,n),o=t.tb;return t=t.ic(),i(o,t).then(function(t){e.Va(r,t,null,n)}).f(function(t){e.Va(r,null,t,n)})};var uu=function(t){this.g=t,this.Ba=this.X=null,this.Ha=0};uu.prototype.C=function(){return{apiKey:this.g.j,refreshToken:this.X,accessToken:this.Ba,expirationTime:this.Ha}};var cu=function(t,e){var n=e.idToken,r=e.refreshToken;e=hu(e.expiresIn),t.Ba=n,t.Ha=e,t.X=r},hu=function(t){return b()+1e3*parseInt(t,10)},fu=function(t,e){return Xo(t.g,e).then(function(e){return t.Ba=e.access_token,t.Ha=hu(e.expires_in),t.X=e.refresh_token,{accessToken:t.Ba,expirationTime:t.Ha,refreshToken:t.X}}).f(function(e){throw"auth/user-token-expired"==e.code&&(t.X=null),e})};uu.prototype.getToken=function(t){return t=!!t,this.Ba&&!this.X?vn(new oo("user-token-expired")):t||!this.Ba||b()>this.Ha-3e4?this.X?fu(this,{grant_type:"refresh_token",refresh_token:this.X}):dn(null):dn({accessToken:this.Ba,expirationTime:this.Ha,refreshToken:this.X})};var lu=function(t,e,n,r,i){Yi(this,{uid:t,displayName:r||null,photoURL:i||null,email:n||null,providerId:e})},pu=function(t,e){Xt.call(this,t);for(var n in e)this[n]=e[n]};y(pu,Xt);var du=function(t,e,n){this.ba=[],this.j=t.apiKey,this.D=t.appName,this.v=t.authDomain||null,t=r.SDK_VERSION?Ii(r.SDK_VERSION):null,this.g=new Lo(this.j,null,t),this.ia=new uu(this.g),yu(this,e.idToken),cu(this.ia,e),Qi(this,"refreshToken",this.ia.X),Tu(this,n||{}),gr.call(this),this.vc=!1,this.v&&Pi()&&(this.m=tu(this.v,this.j,this.D)),this.Ac=[],this.ka=null,this.mb=vu(this),this.vb=v(this.Xc,this)};y(du,gr),du.prototype.Xc=function(){this.mb.kb&&(this.mb.stop(),this.mb.start())};var vu=function(t){return new ds(function(){return t.getToken(!0)},function(t){return!(!t||"auth/network-request-failed"!=t.code)},function(){var e=t.ia.Ha-b()-3e5;return 0<e?e:0},3e4,96e4,!1)},gu=function(t){t.Kd||t.mb.kb||(t.mb.start(),se(t,"tokenChanged",t.vb),re(t,"tokenChanged",t.vb))},bu=function(t){se(t,"tokenChanged",t.vb),t.mb.stop()},yu=function(t,e){t.Yd=e,Qi(t,"_lat",e)},mu=function(t,e){Q(t.Ac,function(t){return t==e})},wu=function(t){for(var e=[],n=0;n<t.Ac.length;n++)e.push(t.Ac[n](t));return bn(e).then(function(){return t})},ku=function(t){t.m&&!t.vc&&(t.vc=!0,t.m.subscribe(t))},Tu=function(t,e){Yi(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,identifierNumber:e.identifierNumber||null,isAnonymous:e.isAnonymous||!1,providerData:[]})};Qi(du.prototype,"providerId","firebase");var Eu=function(){},_u=function(t){return dn().then(function(){if(t.Kd)throw new oo("app-deleted")})},Au=function(t){return K(t.providerData,function(t){return t.providerId})},Su=function(t,e){e&&(Iu(t,e.providerId),t.providerData.push(e))},Iu=function(t,e){Q(t.providerData,function(t){return t.providerId==e})},Ou=function(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Qi(t,e,n)};du.prototype.copy=function(t){var e=this;e!=t&&(Yi(this,{uid:t.uid,displayName:t.displayName,photoURL:t.photoURL,email:t.email,emailVerified:t.emailVerified,identifierNumber:t.identifierNumber,isAnonymous:t.isAnonymous,providerData:[]}),W(t.providerData,function(t){Su(e,t)}),this.ia=t.ia,Qi(this,"refreshToken",this.ia.X))},du.prototype.reload=function(){var t=this;return this.c(_u(this).then(function(){return Nu(t).then(function(){return wu(t)}).then(Eu)}))};var Nu=function(t){return t.getToken().then(function(e){var n=t.isAnonymous;return Ru(t,e).then(function(){return n||Ou(t,"isAnonymous",!1),e})})};du.prototype.getToken=function(t){var e=this;return this.c(_u(this).then(function(){return e.ia.getToken(t)}).then(function(t){if(!t)throw new oo("internal-error");return t.accessToken!=e.Yd&&(yu(e,t.accessToken),e.Na()),Ou(e,"refreshToken",t.refreshToken),t.accessToken}))};var Pu=function(t,e){e.idToken&&t.Yd!=e.idToken&&(cu(t.ia,e),t.Na(),yu(t,e.idToken),Ou(t,"refreshToken",t.ia.X))};du.prototype.Na=function(){this.dispatchEvent(new pu("tokenChanged"))};var Ru=function(t,e){return Pa(t.g,pa,{idToken:e}).then(v(t.qf,t))};du.prototype.qf=function(t){if(!(t=t.users)||!t.length)throw new oo("internal-error");t=t[0],Tu(this,{uid:t.localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,identifierNumber:t.identifierNumber});for(var e=xu(t),n=0;n<e.length;n++)Su(this,e[n]);Ou(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length))};var xu=function(t){return(t=t.providerUserInfo)&&t.length?K(t,function(t){return new lu(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl)}):[]},Cu=function(t,e){var n=null;return t.c(e.ed(t.g,t.uid).then(function(e){return Pu(t,e),n=Du(t,e,"reauthenticate"),t.ka=null,t.reload()}).then(function(){return n}),!0)};du.prototype.reauthenticate=function(t){return Gi("firebase.User.prototype.reauthenticate is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.reauthenticateWithCredential(t)},du.prototype.reauthenticateWithCredential=function(t){return Cu(this,t).then(function(){})};var ju=function(t,e){return Nu(t).then(function(){if(X(Au(t),e))return wu(t).then(function(){throw new oo("provider-already-linked")})})},Mu=function(t,e){var n=null;return t.c(ju(t,e.providerId).then(function(){return t.getToken()}).then(function(n){return e.cd(t.g,n)}).then(function(e){return n=Du(t,e,"link"),Lu(t,e)}).then(function(){return n}))};du.prototype.link=function(t){return Gi("firebase.User.prototype.link is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.linkWithCredential(t)},du.prototype.linkWithCredential=function(t){return Mu(this,t).then(function(t){return t.user})};var Du=function(t,e,n){var r=Ro(e);return e=bs(e),zi({user:t,credential:r,additionalUserInfo:e,operationType:n})},Lu=function(t,e){return Pu(t,e),t.reload().then(function(){return t})};t=du.prototype,t.updateEmail=function(t){var e=this;return this.c(this.getToken().then(function(n){return e.g.updateEmail(n,t)}).then(function(t){return Pu(e,t),e.reload()}))},t.updatePassword=function(t){var e=this;return this.c(this.getToken().then(function(n){return e.g.updatePassword(n,t)}).then(function(t){return Pu(e,t),e.reload()}))},t.updateProfile=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return _u(this);var e=this;return this.c(this.getToken().then(function(n){return e.g.updateProfile(n,{displayName:t.displayName,photoUrl:t.photoURL})}).then(function(t){return Pu(e,t),Ou(e,"displayName",t.displayName||null),Ou(e,"photoURL",t.photoUrl||null),wu(e)}).then(Eu))},t.unlink=function(t){var e=this;return this.c(Nu(this).then(function(n){return X(Au(e),t)?ta(e.g,n,[t]).then(function(t){var n={};return W(t.providerUserInfo||[],function(t){n[t.providerId]=!0}),W(Au(e),function(t){n[t]||Iu(e,t)}),wu(e)}):wu(e).then(function(){throw new oo("no-such-provider")})}))},t.delete=function(){var t=this;return this.c(this.getToken().then(function(e){return Pa(t.g,fa,{idToken:e})}).then(function(){t.dispatchEvent(new pu("userDeleted"))})).then(function(){for(var e=0;e<t.ba.length;e++)t.ba[e].cancel("app-deleted");t.ba=[],t.Kd=!0,bu(t),Qi(t,"refreshToken",null),t.m&&t.m.unsubscribe(t)})},t.Fd=function(t,e){return!!("linkViaPopup"==t&&(this.ca||null)==e&&this.aa||"reauthViaPopup"==t&&(this.ca||null)==e&&this.aa||"linkViaRedirect"==t&&(this.za||null)==e||"reauthViaRedirect"==t&&(this.za||null)==e)},t.Va=function(t,e,n,r){"linkViaPopup"!=t&&"reauthViaPopup"!=t||r!=(this.ca||null)||(n&&this.Pa?this.Pa(n):e&&!n&&this.aa&&this.aa(e),this.F&&(this.F.cancel(),this.F=null),delete this.aa,delete this.Pa)},t.zb=function(t,e){return"linkViaPopup"==t&&e==(this.ca||null)?v(this.Nd,this):"reauthViaPopup"==t&&e==(this.ca||null)?v(this.Od,this):"linkViaRedirect"==t&&(this.za||null)==e?v(this.Nd,this):"reauthViaRedirect"==t&&(this.za||null)==e?v(this.Od,this):null},t.hc=function(){return Li(this.uid+":::")};var Uu=function(t,e){return Wu(t,"linkViaPopup",e,function(){return ju(t,e.providerId).then(function(){return wu(t)})},!1)};du.prototype.linkWithPopup=function(t){return Uu(this,t).then(function(t){return t?zi({user:t.user,credential:t.credential,operationType:t.operationType}):t})};var Fu=function(t,e){return Wu(t,"reauthViaPopup",e,function(){return dn()},!0)};du.prototype.reauthenticateWithPopup=function(t){return Fu(this,t).then(function(t){return t?zi({user:t.user,credential:t.credential,operationType:t.operationType}):t})};var Wu=function(t,e,n,i,o){if(!Pi())return vn(new oo("operation-not-supported-in-this-environment"));if(t.ka&&!o)return vn(t.ka);var a=io(n.providerId),s=t.hc(),u=null;(!Ci()||Ei())&&t.v&&n.isOAuthProvider&&(u=Xa(t.v,t.j,t.D,e,n,null,s,r.SDK_VERSION||null));var c=bi(u,a&&a.Mb,a&&a.Lb);return i=i().then(function(){if(Ku(t),!o)return t.getToken().then(function(){})}).then(function(){return t.m.Nb(c,e,n,s,!!u)}).then(function(){return new hn(function(n,r){t.Va(e,null,new oo("cancelled-popup-request"),t.ca||null),t.aa=n,t.Pa=r,t.ca=s,t.F=t.m.Vb(t,e,c,s)})}).then(function(t){return c&&gi(c),t}).f(function(t){throw c&&gi(c),t}),t.c(i,o)};du.prototype.linkWithRedirect=function(t){var e=this;return Vu(this,"linkViaRedirect",t,function(){return ju(e,t.providerId)},!1)},du.prototype.reauthenticateWithRedirect=function(t){return Vu(this,"reauthViaRedirect",t,function(){return dn()},!0)};var Vu=function(t,e,n,r,i){if(!Pi())return vn(new oo("operation-not-supported-in-this-environment"));if(t.ka&&!i)return vn(t.ka);var o=null,a=t.hc();return r=r().then(function(){if(Ku(t),!i)return t.getToken().then(function(){})}).then(function(){return t.za=a,wu(t)}).then(function(e){return t.Sa&&(e=t.Sa,e=e.i.set(Hu,t.C(),e.u)),e}).then(function(){return t.m.Ob(e,n,a)}).f(function(e){if(o=e,t.Sa)return Qu(t.Sa);throw o}).then(function(){if(o)throw o}),t.c(r,i)},Ku=function(t){if(!t.m||!t.vc){if(t.m&&!t.vc)throw new oo("internal-error");throw new oo("auth-domain-config-required")}};du.prototype.Nd=function(t,e){var n=this;this.F&&(this.F.cancel(),this.F=null);var r=null,i=this.getToken().then(function(r){return ia(n.g,{requestUri:t,sessionId:e,idToken:r})}).then(function(t){return r=Du(n,t,"link"),Lu(n,t)}).then(function(){return r});return this.c(i)},du.prototype.Od=function(t,e){var n=this;this.F&&(this.F.cancel(),this.F=null);var r=null,i=dn().then(function(){return lo(oa(n.g,{requestUri:t,sessionId:e}),n.uid)}).then(function(t){return r=Du(n,t,"reauthenticate"),Pu(n,t),n.ka=null,n.reload()}).then(function(){return r});return this.c(i,!0)},du.prototype.sendEmailVerification=function(){var t=this;return this.c(this.getToken().then(function(e){return t.g.sendEmailVerification(e)}).then(function(e){if(t.email!=e)return t.reload()}).then(function(){}))},du.prototype.c=function(t,e){var n=this,r=Bu(this,t,e);return this.ba.push(r),yn(r,function(){G(n.ba,r)}),r};var Bu=function(t,e,n){return t.ka&&!n?(e.cancel(),vn(t.ka)):e.f(function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.ka||t.dispatchEvent(new pu("userInvalidated")),t.ka=e),e})};du.prototype.toJSON=function(){return this.C()},du.prototype.C=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,identifierNumber:this.identifierNumber,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.j,appName:this.D,authDomain:this.v,stsTokenManager:this.ia.C(),redirectEventId:this.za||null};return W(this.providerData,function(e){t.providerData.push($i(e))}),t};var qu=function(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName},n={};if(!(t.stsTokenManager&&t.stsTokenManager.accessToken&&t.stsTokenManager.expirationTime))return null;n.idToken=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null,n.expiresIn=(t.stsTokenManager.expirationTime-b())/1e3;var r=new du(e,n,t);return t.providerData&&W(t.providerData,function(t){t&&Su(r,zi(t))}),t.redirectEventId&&(r.za=t.redirectEventId),r},Xu=function(t,e,n){var r=new du(t,e);return n&&(r.Sa=n),r.reload().then(function(){return r})},Gu=function(t){this.u=t,this.i=As()},Hu={name:"redirectUser",M:!1},Qu=function(t){return t.i.remove(Hu,t.u)},Ju=function(t,e){return t.i.get(Hu,t.u).then(function(t){return t&&e&&(t.authDomain=e),qu(t||{})})},Yu=function(t){this.u=t,this.i=As()},zu={name:"authUser",M:!0},$u=function(t,e){return t.i.set(zu,e.C(),t.u)},Zu=function(t){return t.i.remove(zu,t.u)},tc=function(t,e){return t.i.get(zu,t.u).then(function(t){return t&&e&&(t.authDomain=e),qu(t||{})})},ec=function(t){if(this.Fa=!1,Qi(this,"app",t),!pc(this).options||!pc(this).options.apiKey)throw new oo("invalid-api-key");t=r.SDK_VERSION?Ii(r.SDK_VERSION):null,this.g=new Lo(pc(this).options&&pc(this).options.apiKey,null,t),this.ba=[],this.Ca=[],this.ub=[],this.mf=r.INTERNAL.createSubscribe(v(this.Ze,this)),this.Ic=void 0,r.INTERNAL.createSubscribe(v(this.af,this)),sc(this,null),this.ta=new Yu(pc(this).options.apiKey+":"+pc(this).name),this.pb=new Gu(pc(this).options.apiKey+":"+pc(this).name),this.cc=this.c(cc(this)),this.qa=this.c(hc(this)),this.bd=!1,this.Vc=v(this.Gf,this),this.qe=v(this.gb,this),this.vb=v(this.Xc,this),this.oe=v(this.Ue,this),this.pe=v(this.Ve,this),rc(this),this.INTERNAL={},this.INTERNAL.delete=v(this.delete,this),this.Ia=0};ec.prototype.toJSON=function(){return{apiKey:pc(this).options.apiKey,authDomain:pc(this).options.authDomain,appName:pc(this).name,currentUser:dc(this)&&dc(this).C()}};var nc=function(t){return t.Ie||vn(new oo("auth-domain-config-required"))},rc=function(t){var e=pc(t).options.authDomain,n=pc(t).options.apiKey;e&&Pi()&&(t.Ie=t.cc.then(function(){if(!t.Fa)return t.m=tu(e,n,pc(t).name),t.m.subscribe(t),dc(t)&&ku(dc(t)),t.Sb&&(ku(t.Sb),t.Sb=null),t.m}))};t=ec.prototype,t.Fd=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.ca==e&&!!this.aa;default:return!1}},t.Va=function(t,e,n,r){"signInViaPopup"==t&&this.ca==r&&(n&&this.Pa?this.Pa(n):e&&!n&&this.aa&&this.aa(e),this.F&&(this.F.cancel(),this.F=null),delete this.aa,delete this.Pa)},t.zb=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.ca==e&&this.aa?v(this.Ke,this):null},t.Ke=function(t,e){var n=this;t={requestUri:t,sessionId:e},this.F&&(this.F.cancel(),this.F=null);var r=null,i=null,o=ra(n.g,t).then(function(t){return r=Ro(t),i=bs(t),t});return t=n.cc.then(function(){return o}).then(function(t){return ac(n,t)}).then(function(){return zi({user:dc(n),credential:r,additionalUserInfo:i,operationType:"signIn"})}),this.c(t)},t.hc=function(){return Li()};var ic=function(t,e){if(!Pi())return vn(new oo("operation-not-supported-in-this-environment"));var n=io(e.providerId),i=t.hc(),o=null;(!Ci()||Ei())&&pc(t).options.authDomain&&e.isOAuthProvider&&(o=Xa(pc(t).options.authDomain,pc(t).options.apiKey,pc(t).name,"signInViaPopup",e,null,i,r.SDK_VERSION||null));var a=bi(o,n&&n.Mb,n&&n.Lb),n=nc(t).then(function(t){return t.Nb(a,"signInViaPopup",e,i,!!o)}).then(function(){return new hn(function(e,n){t.Va("signInViaPopup",null,new oo("cancelled-popup-request"),t.ca),t.aa=e,t.Pa=n,t.ca=i,t.F=t.m.Vb(t,"signInViaPopup",a,i)})}).then(function(t){return a&&gi(a),t}).f(function(t){throw a&&gi(a),t});return t.c(n)};ec.prototype.signInWithPopup=function(t){return ic(this,t).then(function(t){return t?zi({user:t.user,credential:t.credential,operationType:t.operationType}):t})},ec.prototype.getRedirectResult=function(){return oc(this).then(function(t){return t?zi({user:t.user,credential:t.credential,operationType:t.operationType}):t})},ec.prototype.signInWithRedirect=function(t){if(!Pi())return vn(new oo("operation-not-supported-in-this-environment"));var e=this,n=nc(this).then(function(){return e.m.Ob("signInViaRedirect",t)});return this.c(n)};var oc=function(t){if(!Pi())return vn(new oo("operation-not-supported-in-this-environment"));var e=nc(t).then(function(){return t.m.getRedirectResult()});return t.c(e)},ac=function(t,e){var n={};return n.apiKey=pc(t).options.apiKey,n.authDomain=pc(t).options.authDomain,n.appName=pc(t).name,t.cc.then(function(){return Xu(n,e,t.pb)}).then(function(e){return dc(t)&&e.uid==dc(t).uid?(dc(t).copy(e),t.gb(e)):(sc(t,e),ku(e),t.gb(e))}).then(function(){t.Na()})},sc=function(t,e){dc(t)&&(mu(dc(t),t.qe),se(dc(t),"tokenChanged",t.vb),se(dc(t),"userDeleted",t.oe),se(dc(t),"userInvalidated",t.pe),bu(dc(t))),e&&(e.Ac.push(t.qe),re(e,"tokenChanged",t.vb),re(e,"userDeleted",t.oe),re(e,"userInvalidated",t.pe),0<t.Ia&&gu(e)),Qi(t,"currentUser",e)};ec.prototype.signOut=function(){var t=this,e=this.qa.then(function(){return dc(t)?(sc(t,null),Zu(t.ta).then(function(){t.Na()})):dn()});return this.c(e)};var uc=function(t){var e=Ju(t.pb,pc(t).options.authDomain).then(function(e){return(t.Sb=e)&&(e.Sa=t.pb),Qu(t.pb)});return t.c(e)},cc=function(t){var e=pc(t).options.authDomain,n=uc(t).then(function(){return tc(t.ta,e)}).then(function(e){return e?(e.Sa=t.pb,t.Sb&&(t.Sb.za||null)==(e.za||null)?e:e.reload().then(function(){return $u(t.ta,e).then(function(){return e})}).f(function(n){return"auth/network-request-failed"==n.code?e:Zu(t.ta)})):null}).then(function(e){sc(t,e||null)});return t.c(n)},hc=function(t){return t.cc.then(function(){return t.getRedirectResult()}).f(function(){}).then(function(){if(!t.Fa)return t.Vc()}).f(function(){}).then(function(){if(!t.Fa){t.bd=!0;var e=t.ta;e.i.addListener(zu,e.u,t.Vc)}})};t=ec.prototype,t.Gf=function(){var t=this;return tc(this.ta,pc(this).options.authDomain).then(function(e){if(!t.Fa){var n;if(n=dc(t)&&e){n=dc(t).uid;var r=e.uid;n=void 0!==n&&null!==n&&""!==n&&void 0!==r&&null!==r&&""!==r&&n==r}if(n)return dc(t).copy(e),dc(t).getToken();(dc(t)||e)&&(sc(t,e),e&&(ku(e),e.Sa=t.pb),t.m&&t.m.subscribe(t),t.Na())}})},t.gb=function(t){return $u(this.ta,t)},t.Xc=function(){this.Na(),this.gb(dc(this))},t.Ue=function(){this.signOut()},t.Ve=function(){this.signOut()};var fc=function(t,e){var n=null,r=null;return t.c(e.then(function(e){return n=Ro(e),r=bs(e),ac(t,e)}).then(function(){return zi({user:dc(t),credential:n,additionalUserInfo:r,operationType:"signIn"})}))};t=ec.prototype,t.Ze=function(t){var e=this;this.addAuthTokenListener(function(){t.next(dc(e))})},t.af=function(t){var e=this;gc(this,function(){t.next(dc(e))})},t.onAuthStateChanged=function(t,e,n){var i=this;return this.bd&&r.Promise.resolve().then(function(){f(t)?t(dc(i)):f(t.next)&&t.next(dc(i))}),this.mf(t,e,n)},t.getToken=function(t){var e=this,n=this.qa.then(function(){return dc(e)?dc(e).getToken(t).then(function(t){return{accessToken:t}}):null});return this.c(n)},t.signInWithCustomToken=function(t){var e=this;return this.qa.then(function(){return fc(e,Pa(e.g,Aa,{token:t}))}).then(function(t){return t=t.user,Ou(t,"isAnonymous",!1),e.gb(t)}).then(function(){return dc(e)})},t.signInWithEmailAndPassword=function(t,e){var n=this;return this.qa.then(function(){return fc(n,Pa(n.g,Sa,{email:t,password:e}))}).then(function(t){return t.user})},t.createUserWithEmailAndPassword=function(t,e){var n=this;return this.qa.then(function(){return fc(n,Pa(n.g,ca,{email:t,password:e}))}).then(function(t){return t.user})},t.signInWithCredential=function(t){return lc(this,t).then(function(t){return t.user})};var lc=function(t,e){return t.qa.then(function(){return fc(t,e.Ab(t.g))})};ec.prototype.signInAnonymously=function(){var t=dc(this),e=this;return t&&t.isAnonymous?dn(t):this.qa.then(function(){return fc(e,e.g.signInAnonymously())}).then(function(t){return t=t.user,Ou(t,"isAnonymous",!0),e.gb(t)}).then(function(){return dc(e)})};var pc=function(t){return t.app},dc=function(t){return t.currentUser};ec.prototype.getUid=function(){return dc(this)&&dc(this).uid||null};var vc=function(t){return dc(t)&&dc(t)._lat||null};t=ec.prototype,t.Na=function(){if(this.bd){for(var t=0;t<this.Ca.length;t++)this.Ca[t]&&this.Ca[t](vc(this));if(this.Ic!==this.getUid()&&this.ub.length)for(this.Ic=this.getUid(),t=0;t<this.ub.length;t++)this.ub[t]&&this.ub[t](vc(this))}},t.Ae=function(t){this.addAuthTokenListener(t),0<++this.Ia&&dc(this)&&gu(dc(this))},t.uf=function(t){var e=this;W(this.Ca,function(n){n==t&&e.Ia--}),0>this.Ia&&(this.Ia=0),0==this.Ia&&dc(this)&&bu(dc(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.Ca.push(t),this.c(this.qa.then(function(){e.Fa||X(e.Ca,t)&&t(vc(e))}))},t.removeAuthTokenListener=function(t){Q(this.Ca,function(e){return e==t})};var gc=function(t,e){t.ub.push(e),t.c(t.qa.then(function(){!t.Fa&&X(t.ub,e)&&t.Ic!==t.getUid()&&(t.Ic=t.getUid(),e(vc(t)))}))};t=ec.prototype,t.delete=function(){this.Fa=!0;for(var t=0;t<this.ba.length;t++)this.ba[t].cancel("app-deleted");return this.ba=[],this.ta&&(t=this.ta,t.i.removeListener(zu,t.u,this.Vc)),this.m&&this.m.unsubscribe(this),r.Promise.resolve()},t.c=function(t){var e=this;return this.ba.push(t),yn(t,function(){G(e.ba,t)}),t},t.fetchProvidersForEmail=function(t){return this.c(Jo(this.g,t))},t.verifyPasswordResetCode=function(t){return this.checkActionCode(t).then(function(t){return t.data.email})},t.confirmPasswordReset=function(t,e){return this.c(this.g.confirmPasswordReset(t,e).then(function(){}))},t.checkActionCode=function(t){return this.c(this.g.checkActionCode(t).then(function(t){return new ps(t)}))},t.applyActionCode=function(t){return this.c(this.g.applyActionCode(t).then(function(){}))},t.sendPasswordResetEmail=function(t){return this.c(this.g.sendPasswordResetEmail(t).then(function(){}))};var bc="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" "),yc=function(t,e){return{name:t||"",ja:"a valid string",optional:!!e,la:c}},mc=function(t){return{name:t||"",ja:"a valid object",optional:!1,la:l}},wc=function(t,e){return{name:t||"",ja:"a function",optional:!!e,la:f}},kc=function(){return{name:"",ja:"null",optional:!1,la:a}},Tc=function(){return{name:"credential",ja:"a valid credential",optional:!1,la:function(t){return!!t&&!!t.Ab}}},Ec=function(){return{name:"authProvider",ja:"a valid Auth provider",optional:!1,la:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}},_c=function(t,e,n,r){return{name:n||"",ja:t.ja+" or "+e.ja,optional:!!r,la:function(n){return t.la(n)||e.la(n)}}},Ac=function(t,e){for(var n in e){var r=e[n].name;t[r]=Ic(r,t[n],e[n].a)}},Sc=function(t,e,n,r){t[e]=Ic(e,n,r)},Ic=function(t,e,n){if(!n)return e;var r=Oc(t);t=function(){var t,i=Array.prototype.slice.call(arguments);t:{t=Array.prototype.slice.call(i);var o;o=0;for(var a=!1,s=0;s<n.length;s++)if(n[s].optional)a=!0;else{if(a)throw new oo("internal-error","Argument validator encountered a required argument after an optional argument.");o++}if(a=n.length,t.length<o||a<t.length)t="Expected "+(o==a?1==o?"1 argument":o+" arguments":o+"-"+a+" arguments")+" but got "+t.length+".";else{for(o=0;o<t.length;o++)if(a=n[o].optional&&void 0===t[o],!n[o].la(t[o])&&!a){if(t=n[o],0>o||o>=bc.length)throw new oo("internal-error","Argument validator received an unsupported number of arguments.");t=bc[o]+" argument "+(t.name?'"'+t.name+'" ':"")+"must be "+t.ja+".";break t}t=null}}if(t)throw new oo("argument-error",r+" failed: "+t);return e.apply(this,i)};for(var i in e)t[i]=e[i];for(i in e.prototype)t.prototype[i]=e.prototype[i];return t},Oc=function(t){return t=t.split("."),t[t.length-1]};Ac(ec.prototype,{applyActionCode:{name:"applyActionCode",a:[yc("code")]},checkActionCode:{name:"checkActionCode",a:[yc("code")]},confirmPasswordReset:{name:"confirmPasswordReset",a:[yc("code"),yc("newPassword")]},createUserWithEmailAndPassword:{name:"createUserWithEmailAndPassword",a:[yc("email"),yc("password")]},fetchProvidersForEmail:{name:"fetchProvidersForEmail",a:[yc("email")]},getRedirectResult:{name:"getRedirectResult",a:[]},onAuthStateChanged:{name:"onAuthStateChanged",a:[_c(mc(),wc(),"nextOrObserver"),wc("opt_error",!0),wc("opt_completed",!0)]},sendPasswordResetEmail:{name:"sendPasswordResetEmail",a:[yc("email")]},signInAnonymously:{name:"signInAnonymously",a:[]},signInWithCredential:{name:"signInWithCredential",a:[Tc()]},signInWithCustomToken:{name:"signInWithCustomToken",a:[yc("token")]},signInWithEmailAndPassword:{name:"signInWithEmailAndPassword",a:[yc("email"),yc("password")]},signInWithPopup:{name:"signInWithPopup",a:[Ec()]},signInWithRedirect:{name:"signInWithRedirect",a:[Ec()]},signOut:{name:"signOut",a:[]},toJSON:{name:"toJSON",a:[yc(null,!0)]},verifyPasswordResetCode:{name:"verifyPasswordResetCode",a:[yc("code")]}}),Ac(du.prototype,{delete:{name:"delete",a:[]},getToken:{name:"getToken",a:[{name:"opt_forceRefresh",ja:"a boolean",optional:!0,la:function(t){return"boolean"==typeof t}}]},link:{name:"link",a:[Tc()]},linkWithCredential:{name:"linkWithCredential",a:[Tc()]},linkWithPopup:{name:"linkWithPopup",a:[Ec()]},linkWithRedirect:{name:"linkWithRedirect",a:[Ec()]},reauthenticate:{name:"reauthenticate",a:[Tc()]},reauthenticateWithCredential:{name:"reauthenticateWithCredential",a:[Tc()]},reauthenticateWithPopup:{name:"reauthenticateWithPopup",a:[Ec()]},reauthenticateWithRedirect:{name:"reauthenticateWithRedirect",a:[Ec()]},reload:{name:"reload",a:[]},sendEmailVerification:{name:"sendEmailVerification",a:[]},toJSON:{name:"toJSON",a:[yc(null,!0)]},unlink:{name:"unlink",a:[yc("provider")]},updateEmail:{name:"updateEmail",a:[yc("email")]},updatePassword:{name:"updatePassword",a:[yc("password")]},updateProfile:{name:"updateProfile",a:[mc("profile")]}}),Ac(hn.prototype,{f:{name:"catch"},then:{name:"then"}}),Sc(Io,"credential",function(t,e){return new So(t,e)},[yc("email"),yc("password")]),Ac(yo.prototype,{addScope:{name:"addScope",a:[yc("scope")]},setCustomParameters:{name:"setCustomParameters",a:[mc("customOAuthParameters")]}}),Sc(yo,"credential",mo,[_c(yc(),mc(),"token")]),Ac(wo.prototype,{addScope:{name:"addScope",a:[yc("scope")]},setCustomParameters:{name:"setCustomParameters",a:[mc("customOAuthParameters")]}}),Sc(wo,"credential",ko,[_c(yc(),mc(),"token")]),Ac(To.prototype,{addScope:{name:"addScope",a:[yc("scope")]},setCustomParameters:{name:"setCustomParameters",a:[mc("customOAuthParameters")]}}),Sc(To,"credential",Eo,[_c(yc(),_c(mc(),kc()),"idToken"),_c(yc(),kc(),"accessToken",!0)]),Ac(_o.prototype,{setCustomParameters:{name:"setCustomParameters",a:[mc("customOAuthParameters")]}}),Sc(_o,"credential",Ao,[_c(yc(),mc(),"token"),yc("secret",!0)]),Ac(oo.prototype,{toJSON:{name:"toJSON",a:[yc(null,!0)]}}),Ac(Co.prototype,{toJSON:{name:"toJSON",a:[yc(null,!0)]}}),Ac(ho.prototype,{toJSON:{name:"toJSON",a:[yc(null,!0)]}}),function(){if(void 0===r||!r.INTERNAL||!r.INTERNAL.registerService)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={Auth:ec,Error:oo};Sc(t,"EmailAuthProvider",Io,[]),Sc(t,"FacebookAuthProvider",yo,[]),Sc(t,"GithubAuthProvider",wo,[]),Sc(t,"GoogleAuthProvider",To,[]),Sc(t,"TwitterAuthProvider",_o,[]),r.INTERNAL.registerService("auth",function(t,e){return t=new ec(t),e({INTERNAL:{getUid:v(t.getUid,t),getToken:v(t.getToken,t),addAuthTokenListener:v(t.Ae,t),removeAuthTokenListener:v(t.uf,t)}}),t},t,function(t,e){if("create"===t)try{e.auth()}catch(t){}}),r.INTERNAL.extendNamespace({User:du})}()}).call(this)}).call(void 0!==typeof e?e:void 0!==typeof self?self:void 0!==typeof window?window:{}),t.exports=r.auth}).call(e,n(9))},143:function(module,exports,__webpack_require__){(function(global){/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/

---

typedarray.js
Copyright (c) 2010, Linden Research, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
var firebase=__webpack_require__(25);(function(){!function(){function n(t){return void 0!==t}function ba(){}function ca(t){t.Vb=function(){return t.Ye?t.Ye:t.Ye=new t}}function da(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e}function ea(t){return"array"==da(t)}function fa(t){var e=da(t);return"array"==e||"object"==e&&"number"==typeof t.length}function p(t){return"string"==typeof t}function ga(t){return"number"==typeof t}function ha(t){return"function"==da(t)}function ia(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function ja(t,e,n){return t.call.apply(t.bind,arguments)}function ka(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function q(t,e,n){return q=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ja:ka,q.apply(null,arguments)}function la(t,e){function n(){}n.prototype=e.prototype,t.wg=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.sg=function(t,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return e.prototype[n].apply(t,i)}}function ma(a){if(a=String(a),/^\s*$/.test(a)?0:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,"")))try{return eval("("+a+")")}catch(t){}throw Error("Invalid JSON string: "+a)}function na(){this.Fd=void 0}function oa(t,e,n){switch(typeof e){case"string":pa(e,n);break;case"number":n.push(isFinite(e)&&!isNaN(e)?e:"null");break;case"boolean":n.push(e);break;case"undefined":n.push("null");break;case"object":if(null==e){n.push("null");break}if(ea(e)){var r=e.length;n.push("[");for(var i="",o=0;o<r;o++)n.push(i),i=e[o],oa(t,t.Fd?t.Fd.call(e,String(o),i):i,n),i=",";n.push("]");break}n.push("{"),r="";for(o in e)Object.prototype.hasOwnProperty.call(e,o)&&"function"!=typeof(i=e[o])&&(n.push(r),pa(o,n),n.push(":"),oa(t,t.Fd?t.Fd.call(e,o,i):i,n),r=",");n.push("}");break;case"function":break;default:throw Error("Unknown type: "+typeof e)}}function pa(t,e){e.push('"',t.replace(ra,function(t){if(t in qa)return qa[t];var e=t.charCodeAt(0),n="\\u";return 16>e?n+="000":256>e?n+="00":4096>e&&(n+="0"),qa[t]=n+e.toString(16)}),'"')}function sa(){this.Wa=-1}function ta(){this.Wa=-1,this.Wa=64,this.M=[],this.Wd=[],this.Af=[],this.zd=[],this.zd[0]=128;for(var t=1;t<this.Wa;++t)this.zd[t]=0;this.Pd=this.$b=0,this.reset()}function ua(t,e,n){n||(n=0);var r=t.Af;if(p(e))for(var i=0;16>i;i++)r[i]=e.charCodeAt(n)<<24|e.charCodeAt(n+1)<<16|e.charCodeAt(n+2)<<8|e.charCodeAt(n+3),n+=4;else for(i=0;16>i;i++)r[i]=e[n]<<24|e[n+1]<<16|e[n+2]<<8|e[n+3],n+=4;for(i=16;80>i;i++){var o=r[i-3]^r[i-8]^r[i-14]^r[i-16];r[i]=4294967295&(o<<1|o>>>31)}e=t.M[0],n=t.M[1];for(var a,s=t.M[2],u=t.M[3],c=t.M[4],i=0;80>i;i++)40>i?20>i?(o=u^n&(s^u),a=1518500249):(o=n^s^u,a=1859775393):60>i?(o=n&s|u&(n|s),a=2400959708):(o=n^s^u,a=3395469782),o=(e<<5|e>>>27)+o+c+a+r[i]&4294967295,c=u,u=s,s=4294967295&(n<<30|n>>>2),n=e,e=o;t.M[0]=t.M[0]+e&4294967295,t.M[1]=t.M[1]+n&4294967295,t.M[2]=t.M[2]+s&4294967295,t.M[3]=t.M[3]+u&4294967295,t.M[4]=t.M[4]+c&4294967295}function Da(t,e){var n=Ea(t,e,void 0);return 0>n?null:p(t)?t.charAt(n):t[n]}function Ea(t,e,n){for(var r=t.length,i=p(t)?t.split(""):t,o=0;o<r;o++)if(o in i&&e.call(n,i[o],o,t))return o;return-1}function Fa(e,n){var r=xa(e,n);0<=r&&t.splice.call(e,r,1)}function Ga(e,n,r){return 2>=arguments.length?t.slice.call(e,n):t.slice.call(e,n,r)}function Ha(t,e){t.sort(e||Ia)}function Ia(t,e){return t>e?1:t<e?-1:0}function v(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function Ja(t,e){var n,r={};for(n in t)r[n]=e.call(void 0,t[n],n,t);return r}function Ka(t,e){for(var n in t)if(!e.call(void 0,t[n],n,t))return!1;return!0}function La(t){var e,n=0;for(e in t)n++;return n}function Ma(t){for(var e in t)return e}function Na(t){var e,n=[],r=0;for(e in t)n[r++]=t[e];return n}function Oa(t){var e,n=[],r=0;for(e in t)n[r++]=e;return n}function Pa(t,e){for(var n in t)if(t[n]==e)return!0;return!1}function Qa(t,e,n){for(var r in t)if(e.call(n,t[r],r,t))return r}function Ra(t,e){var n=Qa(t,e,void 0);return n&&t[n]}function Sa(t){for(var e in t)return!1;return!0}function Ta(t){var e,n={};for(e in t)n[e]=t[e];return n}function ab(t,e){if(!fa(t))throw Error("encodeByteArray takes an array as a parameter");bb();for(var n=e?Za:Ya,r=[],i=0;i<t.length;i+=3){var o=t[i],a=i+1<t.length,s=a?t[i+1]:0,u=i+2<t.length,c=u?t[i+2]:0,h=o>>2,o=(3&o)<<4|s>>4,s=(15&s)<<2|c>>6,c=63&c;u||(c=64,a||(s=64)),r.push(n[h],n[o],n[s],n[c])}return r.join("")}function bb(){if(!Ya){Ya={},Za={},$a={};for(var t=0;65>t;t++)Ya[t]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(t),Za[t]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(t),$a[Za[t]]=t,62<=t&&($a["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(t)]=t)}}function cb(t,e){if(!t)throw db(e)}function db(t){return Error("Firebase Database ("+firebase.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)}function eb(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function w(t,e){if(Object.prototype.hasOwnProperty.call(t,e))return t[e]}function fb(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function gb(t){var e=[];return fb(t,function(t,n){ea(n)?ya(n,function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))}),e.length?"&"+e.join("&"):""}function ib(){var t=this;this.reject=this.resolve=null,this.ra=new hb(function(e,n){t.resolve=e,t.reject=n})}function jb(t,e){return function(n,r){n?t.reject(n):t.resolve(r),ha(e)&&(kb(t.ra),1===e.length?e(n):e(n,r))}}function kb(t){t.then(void 0,ba)}function lb(t){return"undefined"!=typeof JSON&&n(JSON.parse)?JSON.parse(t):ma(t)}function x(t){if("undefined"!=typeof JSON&&n(JSON.stringify))t=JSON.stringify(t);else{var e=[];oa(new na,t,e),t=e.join("")}return t}function mb(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);55296<=i&&56319>=i&&(i-=55296,r++,cb(r<t.length,"Surrogate pair missing trail surrogate."),i=65536+(i<<10)+(t.charCodeAt(r)-56320)),128>i?e[n++]=i:(2048>i?e[n++]=i>>6|192:(65536>i?e[n++]=i>>12|224:(e[n++]=i>>18|240,e[n++]=i>>12&63|128),e[n++]=i>>6&63|128),e[n++]=63&i|128)}return e}function nb(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);128>r?e++:2048>r?e+=2:55296<=r&&56319>=r?(e+=4,n++):e+=3}return e}function y(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")}function A(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}return t=t+" failed: "+r+" argument "}function B(t,e,r,i){if((!i||n(r))&&!ha(r))throw Error(A(t,e,i)+"must be a valid function.")}function ob(t,e,r){if(n(r)&&(!ia(r)||null===r))throw Error(A(t,e,!0)+"must be a valid context object.")}function pb(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test("undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:"")}function C(t,e){this.name=t,this.R=e}function qb(t,e){return new C(t,e)}function rb(t,e){return sb(t.name,e.name)}function tb(t,e){return sb(t,e)}function ub(t){this.uc=t,this.Cd="firebase:"}function vb(){this.pc={}}function wb(t){try{if("undefined"!=typeof window&&void 0!==window[t]){var e=window[t];return e.setItem("firebase:sentinel","cache"),e.removeItem("firebase:sentinel"),new ub(e)}}catch(t){}return new vb}function zb(t,e,n,r,i){this.host=t.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.Sc=e,this.pe=n,this.qg=r,this.gf=i||"",this.$a=xb.get("host:"+t)||this.host}function Ab(t,e){e!==t.$a&&(t.$a=e,"s-"===t.$a.substr(0,2)&&xb.set("host:"+t.host,t.$a))}function Bb(t,e,n){if(D("string"==typeof e,"typeof type must == string"),D("object"==typeof n,"typeof params must == object"),e===Cb)e=(t.Sc?"wss://":"ws://")+t.$a+"/.ws?";else{if(e!==Db)throw Error("Unknown connection type: "+e);e=(t.Sc?"https://":"http://")+t.$a+"/.lp?"}t.host!==t.$a&&(n.ns=t.pe);var r=[];return v(n,function(t,e){r.push(e+"="+t)}),e+r.join("&")}function Eb(t,e){return t&&"object"==typeof t?(D(".sv"in t,"Unexpected leaf node or priority contents"),e[t[".sv"]]):t}function Fb(t,e){var n=new Gb;return Hb(t,new E(""),function(t,r){Ib(n,t,Jb(r,e))}),n}function Jb(t,e){var n,r=t.C().H(),r=Eb(r,e);if(t.J()){var i=Eb(t.Ca(),e);return i!==t.Ca()||r!==t.C().H()?new Kb(i,G(r)):t}return n=t,r!==t.C().H()&&(n=n.fa(new Kb(r))),t.O(H,function(t,r){var i=Jb(r,e);i!==r&&(n=n.T(t,i))}),n}function Nb(t){try{var e;bb();for(var n=$a,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],a=i<t.length?n[t.charAt(i)]:0;++i;var s=i<t.length?n[t.charAt(i)]:64;++i;var u=i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();r.push(o<<2|a>>4),64!=s&&(r.push(a<<4&240|s>>2),64!=u&&r.push(s<<6&192|u))}if(8192>r.length)e=String.fromCharCode.apply(null,r);else{for(t="",n=0;n<r.length;n+=8192)t+=String.fromCharCode.apply(null,Ga(r,n,n+8192));e=t}return e}catch(t){I("base64Decode failed: ",t)}return null}function Ob(t){var e=mb(t);t=new ta,t.update(e);var e=[],n=8*t.Pd;56>t.$b?t.update(t.zd,56-t.$b):t.update(t.zd,t.Wa-(t.$b-56));for(var r=t.Wa-1;56<=r;r--)t.Wd[r]=255&n,n/=256;for(ua(t,t.Wd),r=n=0;5>r;r++)for(var i=24;0<=i;i-=8)e[n]=t.M[r]>>i&255,++n;return ab(e)}function Pb(t){for(var e="",n=0;n<arguments.length;n++)e=fa(arguments[n])?e+Pb.apply(null,arguments[n]):"object"==typeof arguments[n]?e+x(arguments[n]):e+arguments[n],e+=" ";return e}function Sb(t,e){cb(!e||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?("undefined"!=typeof console&&("function"==typeof console.log?Qb=q(console.log,console):"object"==typeof console.log&&(Qb=function(t){console.log(t)})),e&&yb.set("logging_enabled",!0)):ha(t)?Qb=t:(Qb=null,yb.remove("logging_enabled"))}function I(t){if(!0===Rb&&(Rb=!1,null===Qb&&!0===yb.get("logging_enabled")&&Sb(!0)),Qb){var e=Pb.apply(null,arguments);Qb(e)}}function Tb(t){return function(){I(t,arguments)}}function Ub(t){if("undefined"!=typeof console){var e="FIREBASE INTERNAL ERROR: "+Pb.apply(null,arguments);void 0!==console.error?console.error(e):console.log(e)}}function Vb(t){var e=Pb.apply(null,arguments);throw Error("FIREBASE FATAL ERROR: "+e)}function J(t){if("undefined"!=typeof console){var e="FIREBASE WARNING: "+Pb.apply(null,arguments);void 0!==console.warn?console.warn(e):console.log(e)}}function Wb(t){var e,n,r,i,o,a=t;if(o=n=t=e="",r=!0,i="https",p(a)){var s=a.indexOf("//");for(0<=s&&(i=a.substring(0,s-1),a=a.substring(s+2)),s=a.indexOf("/"),-1===s&&(s=a.length),e=a.substring(0,s),o="",a=a.substring(s).split("/"),s=0;s<a.length;s++)if(0<a[s].length){var u=a[s];try{u=decodeURIComponent(u.replace(/\+/g," "))}catch(t){}o+="/"+u}a=e.split("."),3===a.length?(t=a[1],n=a[0].toLowerCase()):2===a.length&&(t=a[0]),s=e.indexOf(":"),0<=s&&(r="https"===i||"wss"===i)}return"firebase"===t&&Vb(e+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),n&&"undefined"!=n||Vb("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),r||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&J("Insecure Firebase access from a secure page. Please use https in calls to new Firebase()."),{jc:new zb(e,r,n,"ws"===i||"wss"===i),path:new E(o)}}function Xb(t){return ga(t)&&(t!=t||t==Number.POSITIVE_INFINITY||t==Number.NEGATIVE_INFINITY)}function Yb(t){if("complete"===document.readyState)t();else{var e=!1,n=function(){document.body?e||(e=!0,t()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&n()}),window.attachEvent("onload",n))}}function sb(t,e){if(t===e)return 0;if("[MIN_NAME]"===t||"[MAX_NAME]"===e)return-1;if("[MIN_NAME]"===e||"[MAX_NAME]"===t)return 1;var n=Zb(t),r=Zb(e);return null!==n?null!==r?0==n-r?t.length-e.length:n-r:-1:null!==r?1:t<e?-1:1}function $b(t,e){if(e&&t in e)return e[t];throw Error("Missing required key ("+t+") in object: "+x(e))}function ac(t){if("object"!=typeof t||null===t)return x(t);var e,n=[];for(e in t)n.push(e);n.sort(),e="{";for(var r=0;r<n.length;r++)0!==r&&(e+=","),e+=x(n[r]),e+=":",e+=ac(t[n[r]]);return e+"}"}function bc(t,e){if(t.length<=e)return[t];for(var n=[],r=0;r<t.length;r+=e)r+e>t?n.push(t.substring(r,t.length)):n.push(t.substring(r,r+e));return n}function cc(t,e){if(ea(t))for(var n=0;n<t.length;++n)e(n,t[n]);else v(t,e)}function dc(t){D(!Xb(t),"Invalid JSON number");var e,n,r,i;for(0===t?(r=n=0,e=-1/0==1/t?1:0):(e=0>t,t=Math.abs(t),t>=Math.pow(2,-1022)?(r=Math.min(Math.floor(Math.log(t)/Math.LN2),1023),n=r+1023,r=Math.round(t*Math.pow(2,52-r)-Math.pow(2,52))):(n=0,r=Math.round(t/Math.pow(2,-1074)))),i=[],t=52;t;--t)i.push(r%2?1:0),r=Math.floor(r/2);for(t=11;t;--t)i.push(n%2?1:0),n=Math.floor(n/2);for(i.push(e?1:0),i.reverse(),e=i.join(""),n="",t=0;64>t;t+=8)r=parseInt(e.substr(t,8),2).toString(16),1===r.length&&(r="0"+r),n+=r;return n.toLowerCase()}function Zb(t){return ec.test(t)&&-2147483648<=(t=Number(t))&&2147483647>=t?t:null}function fc(t){try{t()}catch(t){setTimeout(function(){throw J("Exception was thrown by user callback.",t.stack||""),t},Math.floor(0))}}function gc(t,e,n){Object.defineProperty(t,e,{get:n})}function hc(t,e){var n=setTimeout(t,e);return"object"==typeof n&&n.unref&&n.unref(),n}function ic(t){var e={},n={},r={},i="";try{var o=t.split("."),e=lb(Nb(o[0])||""),n=lb(Nb(o[1])||""),i=o[2],r=n.d||{};delete n.d}catch(t){}return{tg:e,Je:n,data:r,mg:i}}function jc(t){t=ic(t);var e=t.Je;return!!t.mg&&!!e&&"object"==typeof e&&e.hasOwnProperty("iat")}function kc(t){return"object"==typeof(t=ic(t).Je)&&!0===w(t,"admin")}function lc(){}function nc(t){return q(t.compare,t)}function pc(t){D(!t.e()&&".priority"!==K(t),"Can't create PathIndex with empty path or .priority key"),this.bc=t}function rc(){}function sc(){}function uc(){}function xc(t,e){this.od=t,this.cc=e}function yc(t,e,n){return new xc(Ja(t.od,function(r,i){var o=w(t.cc,i);if(D(o,"Missing index implementation for "+i),r===mc){if(o.xc(e.R)){for(var a=[],s=n.Wb(qb),u=M(s);u;)u.name!=e.name&&a.push(u),u=M(s);return a.push(e),zc(a,nc(o))}return mc}return o=n.get(e.name),a=r,o&&(a=a.remove(new C(e.name,o))),a.Oa(e,e.R)}),t.cc)}function Ac(t,e,n){return new xc(Ja(t.od,function(t){if(t===mc)return t;var r=n.get(e.name);return r?t.remove(new C(e.name,r)):t}),t.cc)}function Kb(t,e){this.B=t,D(n(this.B)&&null!==this.B,"LeafNode shouldn't be created with null/undefined value."),this.aa=e||L,Cc(this.aa),this.Db=null}function Gc(){this.set={}}function Hc(t,e){v(t.set,function(t,n){e(n,t)})}function Ic(t){D(ea(t)&&0<t.length,"Requires a non-empty array"),this.Bf=t,this.Dc={}}function Jc(t,e){D(Da(t.Bf,function(t){return t===e}),"Unknown event: "+e)}function Lc(){if(Ic.call(this,["online"]),this.hc=!0,"undefined"!=typeof window&&void 0!==window.addEventListener&&!pb()){var t=this;window.addEventListener("online",function(){t.hc||(t.hc=!0,t.Ge("online",!0))},!1),window.addEventListener("offline",function(){t.hc&&(t.hc=!1,t.Ge("online",!1))},!1)}}function Mc(){Ic.call(this,["visible"]);var t,e;if("undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(e="visibilitychange",t="hidden"):void 0!==document.mozHidden?(e="mozvisibilitychange",t="mozHidden"):void 0!==document.msHidden?(e="msvisibilitychange",t="msHidden"):void 0!==document.webkitHidden&&(e="webkitvisibilitychange",t="webkitHidden")),this.Mb=!0,e){var n=this;document.addEventListener(e,function(){var e=!document[t];e!==n.Mb&&(n.Mb=e,n.Ge("visible",e))},!1)}}function E(t,e){if(1==arguments.length){this.o=t.split("/");for(var n=0,r=0;r<this.o.length;r++)0<this.o[r].length&&(this.o[n]=this.o[r],n++);this.o.length=n,this.Y=0}else this.o=t,this.Y=e}function P(t,e){var n=K(t);if(null===n)return e;if(n===K(e))return P(N(t),N(e));throw Error("INTERNAL ERROR: innerPath ("+e+") is not within outerPath ("+t+")")}function Nc(t,e){for(var n=t.slice(),r=e.slice(),i=0;i<n.length&&i<r.length;i++){var o=sb(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1}function K(t){return t.Y>=t.o.length?null:t.o[t.Y]}function Ec(t){return t.o.length-t.Y}function N(t){var e=t.Y;return e<t.o.length&&e++,new E(t.o,e)}function Oc(t){return t.Y<t.o.length?t.o[t.o.length-1]:null}function Pc(t,e){this.Qa=t.slice(),this.Ha=Math.max(1,this.Qa.length),this.Qe=e;for(var n=0;n<this.Qa.length;n++)this.Ha+=nb(this.Qa[n]);Qc(this)}function Qc(t){if(768<t.Ha)throw Error(t.Qe+"has a key path longer than 768 bytes ("+t.Ha+").");if(32<t.Qa.length)throw Error(t.Qe+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Rc(t))}function Rc(t){return 0==t.Qa.length?"":"in property '"+t.Qa.join(".")+"'"}function Sc(){this.children={},this.bd=0,this.value=null}function Tc(t,e,n){this.ud=t||"",this.Pc=e||null,this.A=n||new Sc}function Uc(t,e){for(var n,r=e instanceof E?e:new E(e),i=t;null!==(n=K(r));)i=new Tc(n,i,w(i.A.children,n)||new Sc),r=N(r);return i}function Vc(t,e){D(void 0!==e,"Cannot set value to undefined"),t.A.value=e,Wc(t)}function Xc(t,e,n,r){n&&!r&&e(t),t.O(function(t){Xc(t,e,!0,r)}),n&&r&&e(t)}function Yc(t,e){for(var n=t.parent();null!==n&&!e(n);)n=n.parent()}function Wc(t){if(null!==t.Pc){var e=t.Pc,n=t.ud,r=t.e(),i=eb(e.A.children,n);r&&i?(delete e.A.children[n],e.A.bd--,Wc(e)):r||i||(e.A.children[n]=t.A,e.A.bd++,Wc(e))}}function Zc(t,e){this.La=t,this.ba=e||$c}function ad(t,e){for(var n,r=t.ba,i=null;!r.e();){if(0===(n=t.La(e,r.key))){if(r.left.e())return i?i.key:null;for(r=r.left;!r.right.e();)r=r.right;return r.key}0>n?r=r.left:0<n&&(i=r,r=r.right)}throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?")}function bd(t,e,n,r,i){for(this.Hd=i||null,this.le=r,this.Pa=[],i=1;!t.e();)if(i=e?n(t.key,e):1,r&&(i*=-1),0>i)t=this.le?t.left:t.right;else{if(0===i){this.Pa.push(t);break}this.Pa.push(t),t=this.le?t.right:t.left}}function M(t){if(0===t.Pa.length)return null;var e,n=t.Pa.pop();if(e=t.Hd?t.Hd(n.key,n.value):{key:n.key,value:n.value},t.le)for(n=n.left;!n.e();)t.Pa.push(n),n=n.right;else for(n=n.right;!n.e();)t.Pa.push(n),n=n.left;return e}function cd(t){if(0===t.Pa.length)return null;var e;return e=t.Pa,e=e[e.length-1],t.Hd?t.Hd(e.key,e.value):{key:e.key,value:e.value}}function dd(t,e,n,r,i){this.key=t,this.value=e,this.color=null==n||n,this.left=null!=r?r:$c,this.right=null!=i?i:$c}function ed(t){return t.left.e()?t:ed(t.left)}function hd(t){return t.left.e()?$c:(t.left.ea()||t.left.left.ea()||(t=id(t)),t=t.X(null,null,null,hd(t.left),null),gd(t))}function gd(t){return t.right.ea()&&!t.left.ea()&&(t=ld(t)),t.left.ea()&&t.left.left.ea()&&(t=jd(t)),t.left.ea()&&t.right.ea()&&(t=kd(t)),t}function id(t){return t=kd(t),t.right.left.ea()&&(t=t.X(null,null,null,null,jd(t.right)),t=ld(t),t=kd(t)),t}function ld(t){return t.right.X(null,null,t.color,t.X(null,null,!0,null,t.right.left),null)}function jd(t){return t.left.X(null,null,t.color,null,t.X(null,null,!0,t.left.right,null))}function kd(t){return t.X(null,null,!t.color,t.left.X(null,null,!t.left.color,null,null),t.right.X(null,null,!t.right.color,null,null))}function md(){}function O(t,e,n){this.k=t,(this.aa=e)&&Cc(this.aa),t.e()&&D(!this.aa||this.aa.e(),"An empty node cannot have a priority"),this.yb=n,this.Db=null}function pd(t,e){var n;return n=(n=od(t,e))?(n=n.Gc())&&n.name:t.k.Gc(),n?new C(n,t.k.get(n)):null}function qd(t,e){var n;return n=(n=od(t,e))?(n=n.ec())&&n.name:t.k.ec(),n?new C(n,t.k.get(n)):null}function od(t,e){return e===tc?null:t.yb.get(e.toString())}function G(t,e){if(null===t)return L;var n=null;if("object"==typeof t&&".priority"in t?n=t[".priority"]:void 0!==e&&(n=e),D(null===n||"string"==typeof n||"number"==typeof n||"object"==typeof n&&".sv"in n,"Invalid priority type found: "+typeof n),"object"==typeof t&&".value"in t&&null!==t[".value"]&&(t=t[".value"]),"object"!=typeof t||".sv"in t)return new Kb(t,G(n));if(t instanceof Array){var r=L,i=t;return v(i,function(t,e){if(eb(i,e)&&"."!==e.substring(0,1)){var n=G(t);!n.J()&&n.e()||(r=r.T(e,n))}}),r.fa(G(n))}var o=[],a=!1,s=t;if(fb(s,function(t){if("string"!=typeof t||"."!==t.substring(0,1)){var e=G(s[t]);e.e()||(a=a||!e.C().e(),o.push(new C(t,e)))}}),0==o.length)return L;var u=zc(o,rb,function(t){return t.name},tb);if(a){var c=zc(o,nc(H));return new O(u,G(n),new xc({".priority":c},{".priority":H}))}return new O(u,G(n),Bc)}function sd(t){this.count=parseInt(Math.log(t+1)/rd,10),this.Oe=this.count-1,this.Cf=t+1&parseInt(Array(this.count+1).join("1"),2)}function td(t){var e=!(t.Cf&1<<t.Oe);return t.Oe--,e}function zc(t,e,n,r){function i(e,r){var o=r-e;if(0==o)return null;if(1==o){var a=t[e],s=n?n(a):a;return new dd(s,a.R,!1,null,null)}var a=parseInt(o/2,10)+e,o=i(e,a),u=i(a+1,r),a=t[a],s=n?n(a):a;return new dd(s,a.R,!1,o,u)}t.sort(e);var o=function(e){function r(e,r){var u=s-e,c=s;s-=e;var c=i(u+1,c),u=t[u],h=n?n(u):u,c=new dd(h,u.R,r,null,c);o?o.left=c:a=c,o=c}for(var o=null,a=null,s=t.length,u=0;u<e.count;++u){var c=td(e),h=Math.pow(2,e.count-(u+1));c?r(h,!1):(r(h,!1),r(h,!0))}return a}(new sd(t.length));return null!==o?new Zc(r||e,o):new Zc(r||e)}function Fc(t){return"number"==typeof t?"number:"+dc(t):"string:"+t}function Cc(t){if(t.J()){var e=t.H();D("string"==typeof e||"number"==typeof e||"object"==typeof e&&eb(e,".sv"),"Priority must be a string or number.")}else D(t===qc||t.e(),"priority of unexpected type.");D(t===qc||t.C().e(),"Priority nodes can't have a priority of their own.")}function ud(){O.call(this,new Zc(tb),L,Bc)}function vd(t,e){this.value=t,this.children=e||wd}function xd(t){var e=R;return v(t,function(t,n){e=e.set(new E(n),t)}),e}function yd(t,e,n){if(null!=t.value&&n(t.value))return{path:Q,value:t.value};if(e.e())return null;var r=K(e);return t=t.children.get(r),null!==t?(e=yd(t,N(e),n),null!=e?{path:new E(r).n(e.path),value:e.value}:null):null}function zd(t,e){return yd(t,e,function(){return!0})}function Ad(t,e,n){if(e.e())return n;var r=K(e);return e=Ad(t.children.get(r)||R,N(e),n),r=e.e()?t.children.remove(r):t.children.Oa(r,e),new vd(t.value,r)}function Bd(t,e){return Cd(t,Q,e)}function Cd(t,e,n){var r={};return t.children.ha(function(t,i){r[t]=Cd(i,e.n(t),n)}),n(e,t.value,r)}function Dd(t,e,n){return Ed(t,e,Q,n)}function Ed(t,e,n,r){var i=!!t.value&&r(n,t.value);return i||(e.e()?null:(i=K(e),(t=t.children.get(i))?Ed(t,N(e),n.n(i),r):null))}function Fd(t,e,n){Gd(t,e,Q,n)}function Gd(t,e,n,r){if(e.e())return t;t.value&&r(n,t.value);var i=K(e);return(t=t.children.get(i))?Gd(t,N(e),n.n(i),r):R}function Hd(t,e){Id(t,Q,e)}function Id(t,e,n){t.children.ha(function(t,r){Id(r,e.n(t),n)}),t.value&&n(e,t.value)}function Jd(t,e){t.children.ha(function(t,n){n.value&&e(t,n.value)})}function Md(t){return p(t)&&0!==t.length&&!Kd.test(t)}function Nd(t){return null===t||p(t)||ga(t)&&!Xb(t)||ia(t)&&eb(t,".sv")}function Od(t,e,r,i){i&&!n(e)||Pd(A(t,1,i),e,r)}function Pd(t,e,r){if(r instanceof E&&(r=new Pc(r,t)),!n(e))throw Error(t+"contains undefined "+Rc(r));if(ha(e))throw Error(t+"contains a function "+Rc(r)+" with contents: "+e.toString());if(Xb(e))throw Error(t+"contains "+e.toString()+" "+Rc(r));if(p(e)&&e.length>10485760/3&&10485760<nb(e))throw Error(t+"contains a string greater than 10485760 utf8 bytes "+Rc(r)+" ('"+e.substring(0,50)+"...')");if(ia(e)){var i=!1,o=!1;if(fb(e,function(e,n){if(".value"===e)i=!0;else if(".priority"!==e&&".sv"!==e&&(o=!0,!Md(e)))throw Error(t+" contains an invalid key ("+e+") "+Rc(r)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(e),Pd(t,n,r),r.pop()}),i&&o)throw Error(t+' contains ".value" child '+Rc(r)+" in addition to actual children.")}}function Qd(t,e){var n,r;for(n=0;n<e.length;n++){r=e[n];for(var i=r.slice(),o=0;o<i.length;o++)if((".priority"!==i[o]||o!==i.length-1)&&!Md(i[o]))throw Error(t+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"')}for(e.sort(Nc),i=null,n=0;n<e.length;n++){if(r=e[n],null!==i&&i.contains(r))throw Error(t+"contains a path "+i.toString()+" that is ancestor of another path "+r.toString());i=r}}function Rd(t,e,n){var r=A(t,1,!1);if(!ia(e)||ea(e))throw Error(r+" must be an object containing the children to replace.");var i=[];fb(e,function(t,e){var o=new E(t);if(Pd(r,e,n.n(o)),".priority"===Oc(o)&&!Nd(e))throw Error(r+"contains an invalid value for '"+o.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");i.push(o)}),Qd(r,i)}function Sd(t,e,n){if(Xb(n))throw Error(A(t,e,!1)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!Nd(n))throw Error(A(t,e,!1)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}function Td(t,e,r){if(!r||n(e))switch(e){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw Error(A(t,1,r)+'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".')}}function Ud(t,e){if(n(e)&&!Md(e))throw Error(A(t,2,!0)+'was an invalid key: "'+e+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')}function Vd(t,e){if(!p(e)||0===e.length||Ld.test(e))throw Error(A(t,1,!1)+'was an invalid path: "'+e+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')}function Wd(t,e){if(".info"===K(e))throw Error(t+" failed: Can't modify data under /.info/")}function Xd(t,e){var n,r=e.path.toString();if(!(n=!p(e.jc.host)||0===e.jc.host.length||!Md(e.jc.pe))&&(n=0!==r.length)&&(r&&(r=r.replace(/^\/*\.info(\/|$)/,"/")),n=!(p(r)&&0!==r.length&&!Ld.test(r))),n)throw Error(A(t,1,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')}function Gb(){this.k=this.B=null}function Ib(t,e,n){if(e.e())t.B=n,t.k=null;else if(null!==t.B)t.B=t.B.F(e,n);else{null==t.k&&(t.k=new Gc);var r=K(e);t.k.contains(r)||t.k.add(r,new Gb),t=t.k.get(r),e=N(e),Ib(t,e,n)}}function Yd(t,e){if(e.e())return t.B=null,t.k=null,!0;if(null!==t.B){if(t.B.J())return!1;var n=t.B;return t.B=null,n.O(H,function(e,n){Ib(t,new E(e),n)}),Yd(t,e)}return null===t.k||(n=K(e),e=N(e),t.k.contains(n)&&Yd(t.k.get(n),e)&&t.k.remove(n),!!t.k.e()&&(t.k=null,!0))}function Hb(t,e,n){null!==t.B?n(e,t.B):t.O(function(t,r){Hb(r,new E(e.toString()+"/"+t),n)})}function Zd(t,e){this.type=$d,this.source=t,this.path=e}function ae(t,e,n){this.type=be,this.source=t,this.path=e,this.children=n}function de(t,e,n){this.type=ee,this.source=fe,this.path=t,this.Ob=e,this.Id=n}function ce(t,e,n){this.type=ge,this.source=t,this.path=e,this.Ga=n}function he(t,e,n,r){this.ee=t,this.Se=e,this.Hb=n,this.Ee=r,D(!r||e,"Tagged queries must be from server.")}function je(t,e,n){this.A=t,this.da=e,this.Sb=n}function ke(t){return t.da}function le(t){return t.Sb}function me(t,e){return e.e()?t.da&&!t.Sb:ne(t,K(e))}function ne(t,e){return t.da&&!t.Sb||t.A.Da(e)}function oe(t,e){this.N=t,this.Ld=e}function pe(t,e,n,r){return new oe(new je(e,n,r),t.Ld)}function qe(t){return t.N.da?t.N.j():null}function re(t){return t.Ld.da?t.Ld.j():null}function se(){}function ue(t,e,n){this.xf=t,this.Ka=e,this.yd=n}function ve(t,e){this.Sd=t,this.Df=e}function we(t){this.U=t}function De(t,e,n,r,i,o){var a=e.N;if(null!=r.lc(n))return e;var s;if(n.e())D(ke(e.w()),"If change path is empty, we must have complete server data"),le(e.w())?(i=re(e),r=r.rc(i instanceof O?i:L)):r=r.Aa(re(e)),o=t.U.ya(e.N.j(),r,o);else{var u=K(n);if(".priority"==u)D(1==Ec(n),"Can't have a priority with additional path components"),o=a.j(),s=e.w().j(),r=r.ad(n,o,s),o=null!=r?t.U.fa(o,r):a.j();else{var c=N(n);ne(a,u)?(s=e.w().j(),r=r.ad(n,a.j(),s),r=null!=r?a.j().Q(u).F(c,r):a.j().Q(u)):r=r.qc(u,e.w()),o=null!=r?t.U.F(a.j(),u,r,c,i,o):a.j()}}return pe(e,o,a.da||n.e(),t.U.Na())}function ze(t,e,n,r,i,o,a,s){var u=e.w();if(a=a?t.U:t.U.Ub(),n.e())r=a.ya(u.j(),r,null);else if(a.Na()&&!u.Sb)r=u.j().F(n,r),r=a.ya(u.j(),r,null);else{var c=K(n);if(!me(u,n)&&1<Ec(n))return e;var h=N(n);r=u.j().Q(c).F(h,r),r=".priority"==c?a.fa(u.j(),r):a.F(u.j(),c,r,h,te,null)}return u=u.da||n.e(),e=new oe(e.N,new je(r,u,a.Na())),De(t,e,n,i,new ue(i,e,o),s)}function ye(t,e,n,r,i,o,a){var s=e.N;if(i=new ue(i,e,o),n.e())a=t.U.ya(e.N.j(),r,a),t=pe(e,a,!0,t.U.Na());else if(".priority"===(o=K(n)))a=t.U.fa(e.N.j(),r),t=pe(e,a,s.da,s.Sb);else{n=N(n);var u=s.j().Q(o);if(!n.e()){var c=i.Te(o);r=null!=c?".priority"===Oc(n)&&c.P(n.parent()).e()?c:c.F(n,r):L}u.Z(r)?t=e:(a=t.U.F(s.j(),o,r,n,i,a),t=pe(e,a,s.da,t.U.Na()))}return t}function Ae(t,e,n,r,i,o,a){var s=e;return Hd(r,function(r,u){var c=n.n(r);ne(e.N,K(c))&&(s=ye(t,s,c,u,i,o,a))}),Hd(r,function(r,u){var c=n.n(r);ne(e.N,K(c))||(s=ye(t,s,c,u,i,o,a))}),s}function Fe(t,e){return Hd(e,function(e,n){t=t.F(e,n)}),t}function Be(t,e,n,r,i,o,a,s){if(e.w().j().e()&&!ke(e.w()))return e;var u=e;n=n.e()?r:Ad(R,n,r);var c=e.w().j();return n.children.ha(function(n,r){if(c.Da(n)){var h=e.w().j().Q(n),h=Fe(h,r);u=ze(t,u,new E(n),h,i,o,a,s)}}),n.children.ha(function(n,r){var h=!ne(e.w(),n)&&null==r.value;c.Da(n)||h||(h=e.w().j().Q(n),h=Fe(h,r),u=ze(t,u,new E(n),h,i,o,a,s))}),u}function Ce(t,e,n,r,i,o,a){if(null!=i.lc(n))return e;var s=le(e.w()),u=e.w();if(null!=r.value){if(n.e()&&u.da||me(u,n))return ze(t,e,n,u.j().P(n),i,o,s,a);if(n.e()){var c=R;return u.j().O(tc,function(t,e){c=c.set(new E(t),e)}),Be(t,e,n,c,i,o,s,a)}return e}return c=R,Hd(r,function(t){var e=n.n(t);me(u,e)&&(c=c.set(t,u.j().P(e)))}),Be(t,e,n,c,i,o,s,a)}function Ge(t){this.V=t,this.g=t.m.g}function He(t,e,n,r){var i=[],o=[];return ya(e,function(e){e.type===Ie&&t.g.nd(e.qe,e.Ja)&&o.push(new S(Je,e.Ja,e.Xa))}),Ke(t,i,Le,e,r,n),Ke(t,i,Me,e,r,n),Ke(t,i,Je,o,r,n),Ke(t,i,Ie,e,r,n),Ke(t,i,Ne,e,r,n),i}function Ke(t,e,n,r,i,o){r=za(r,function(t){return t.type===n}),Ha(r,q(t.Ff,t)),ya(r,function(n){var r=Oe(t,n,o);ya(i,function(i){i.nf(n.type)&&e.push(i.createEvent(r,t.V))})})}function Oe(t,e,n){return"value"!==e.type&&"child_removed"!==e.type&&(e.Dd=n.Ve(e.Xa,e.Ja,t.g)),e}function Pe(t,e){this.V=t;var n=t.m,r=new Qe(n.g),n=T(n)?new Qe(n.g):n.xa?new Re(n):new Se(n);this.hf=new we(n);var i=e.w(),o=e.N,a=r.ya(L,i.j(),null),s=n.ya(L,o.j(),null);this.Ka=new oe(new je(s,o.da,n.Na()),new je(a,i.da,r.Na())),this.Za=[],this.Jf=new Ge(t)}function Te(t){return t.V}function Ve(t,e){var n=t.Ka.N,r=[];return n.j().J()||n.j().O(H,function(t,e){r.push(new S(Me,e,t))}),n.da&&r.push(Ee(n.j())),Ue(t,r,n.j(),e)}function Ue(t,e,n,r){return He(t.Jf,e,n,r?[r]:t.Za)}function We(t,e,n,r){this.ae=e,this.Md=n,this.Dd=r,this.hd=t}function Xe(t,e,n){this.ae=t,this.error=e,this.path=n}function Ye(){this.vb=[]}function Ze(t,e){for(var n=null,r=0;r<e.length;r++){var i=e[r],o=i.Yb();null===n||o.Z(n.Yb())||(t.vb.push(n),n=null),null===n&&(n=new $e(o)),n.add(i)}n&&t.vb.push(n)}function af(t,e,n){Ze(t,n),bf(t,function(t){return t.Z(e)})}function cf(t,e,n){Ze(t,n),bf(t,function(t){return t.contains(e)||e.contains(t)})}function bf(t,e){for(var n=!0,r=0;r<t.vb.length;r++){var i=t.vb[r];if(i)if(i=i.Yb(),e(i)){for(var i=t.vb[r],o=0;o<i.jd.length;o++){var a=i.jd[o];if(null!==a){i.jd[o]=null;var s=a.Tb();Qb&&I("event: "+a.toString()),fc(s)}}t.vb[r]=null}else n=!1}n&&(t.vb=[])}function $e(t){this.qa=t,this.jd=[]}function Qe(t){this.g=t}function Se(t){this.he=new Qe(t.g),this.g=t.g;var e;t.ka?(e=ef(t),e=t.g.Ec(ff(t),e)):e=t.g.Hc(),this.Uc=e,t.na?(e=gf(t),t=t.g.Ec(hf(t),e)):t=t.g.Fc(),this.vc=t}function Re(t){this.sa=new Se(t),this.g=t.g,D(t.xa,"Only valid if limit has been set"),this.oa=t.oa,this.Ib=!jf(t)}function kf(t,e,n,r,i,o){var a;if(t.Ib){var s=nc(t.g);a=function(t,e){return s(e,t)}}else a=nc(t.g);D(e.Eb()==t.oa,"");var u=new C(n,r),c=t.Ib?pd(e,t.g):qd(e,t.g),h=t.sa.matches(u);if(e.Da(n)){for(var f=e.Q(n),c=i.fe(t.g,c,t.Ib);null!=c&&(c.name==n||e.Da(c.name));)c=i.fe(t.g,c,t.Ib);return i=null==c?1:a(c,u),h&&!r.e()&&0<=i?(null!=o&&df(o,new S(Ie,r,n,f)),e.T(n,r)):(null!=o&&df(o,new S(Le,f,n)),e=e.T(n,L),null!=c&&t.sa.matches(c)?(null!=o&&df(o,new S(Me,c.R,c.name)),e.T(c.name,c.R)):e)}return r.e()?e:h&&0<=a(c,u)?(null!=o&&(df(o,new S(Le,c.R,c.name)),df(o,new S(Me,r,n))),e.T(n,r).T(c.name,L)):e}function S(t,e,n,r){this.type=t,this.Ja=e,this.Xa=n,this.qe=r,this.Dd=void 0}function Ee(t){return new S(Ne,t)}function xe(){this.fb={}}function df(t,e){var n=e.type,r=e.Xa;D(n==Me||n==Ie||n==Le,"Only child changes supported for tracking"),D(".priority"!==r,"Only non-priority child changes can be tracked.");var i=w(t.fb,r);if(i){var o=i.type;if(n==Me&&o==Le)t.fb[r]=new S(Ie,e.Ja,r,i.Ja);else if(n==Le&&o==Me)delete t.fb[r];else if(n==Le&&o==Ie)t.fb[r]=new S(Le,i.qe,r);else if(n==Ie&&o==Me)t.fb[r]=new S(Me,e.Ja,r);else{if(n!=Ie||o!=Ie)throw Mb("Illegal combination of changes: "+e+" occurred after "+i);t.fb[r]=new S(Ie,e.Ja,r,i.qe)}}else t.fb[r]=e}function lf(){this.Rb=this.na=this.Kb=this.ka=this.xa=!1,this.oa=0,this.mb="",this.dc=null,this.zb="",this.ac=null,this.xb="",this.g=H}function jf(t){return""===t.mb?t.ka:"l"===t.mb}function ff(t){return D(t.ka,"Only valid if start has been set"),t.dc}function ef(t){return D(t.ka,"Only valid if start has been set"),t.Kb?t.zb:"[MIN_NAME]"}function hf(t){return D(t.na,"Only valid if end has been set"),t.ac}function gf(t){return D(t.na,"Only valid if end has been set"),t.Rb?t.xb:"[MAX_NAME]"}function nf(t){var e=new lf;return e.xa=t.xa,e.oa=t.oa,e.ka=t.ka,e.dc=t.dc,e.Kb=t.Kb,e.zb=t.zb,e.na=t.na,e.ac=t.ac,e.Rb=t.Rb,e.xb=t.xb,e.g=t.g,e.mb=t.mb,e}function of(t,e){var n=nf(t);return n.g=e,n}function pf(t){var e={};if(t.ka&&(e.sp=t.dc,t.Kb&&(e.sn=t.zb)),t.na&&(e.ep=t.ac,t.Rb&&(e.en=t.xb)),t.xa){e.l=t.oa;var n=t.mb;""===n&&(n=jf(t)?"l":"r"),e.vf=n}return t.g!==H&&(e.i=t.g.toString()),e}function T(t){return!(t.ka||t.na||t.xa)}function qf(t){return T(t)&&t.g==H}function rf(t){var e={};if(qf(t))return e;var n;return t.g===H?n="$priority":t.g===wc?n="$value":t.g===tc?n="$key":(D(t.g instanceof pc,"Unrecognized index type!"),n=t.g.toString()),e.orderBy=x(n),t.ka&&(e.startAt=x(t.dc),t.Kb&&(e.startAt+=","+x(t.zb))),t.na&&(e.endAt=x(t.ac),t.Rb&&(e.endAt+=","+x(t.xb))),t.xa&&(jf(t)?e.limitToFirst=t.oa:e.limitToLast=t.oa),e}function sf(t){this.W=t}function uf(t,e,n){if(e.e())return new sf(new vd(n));var r=zd(t.W,e);if(null!=r){var i=r.path,r=r.value;return e=P(i,e),r=r.F(e,n),new sf(t.W.set(i,r))}return t=Ad(t.W,e,new vd(n)),new sf(t)}function vf(t,e,n){var r=t;return fb(n,function(t,n){r=uf(r,e.n(t),n)}),r}function wf(t,e){var n=zd(t.W,e);return null!=n?t.W.get(n.path).P(P(n.path,e)):null}function xf(t){var e=[],n=t.W.value;return null!=n?n.J()||n.O(H,function(t,n){e.push(new C(t,n))}):t.W.children.ha(function(t,n){null!=n.value&&e.push(new C(t,n.value))}),e}function yf(t,e){if(e.e())return t;var n=wf(t,e);return new sf(null!=n?new vd(n):t.W.subtree(e))}function zf(t,e,n){if(null!=e.value)return n.F(t,e.value);var r=null;return e.children.ha(function(e,i){".priority"===e?(D(null!==i.value,"Priority writes must always be leaf nodes"),r=i.value):n=zf(t.n(e),i,n)}),n.P(t).e()||null===r||(n=n.F(t.n(".priority"),r)),n}function Af(){this.Jd=L}function Bf(t){this.oc=t}function Cf(t,e){t.oc.INTERNAL.addAuthTokenListener(e)}function Df(){this.S=tf,this.la=[],this.Bc=-1}function Ef(t,e){for(var n=0;n<t.la.length;n++){var r=t.la[n];if(r.Zc===e)return r}return null}function Ff(t,e){return t.Ga?t.path.contains(e):!!Qa(t.children,function(n,r){return t.path.n(r).contains(e)})}function Hf(t){return t.visible}function Gf(t,e,n){for(var r=tf,i=0;i<t.length;++i){var o=t[i];if(e(o)){var a=o.path;if(o.Ga)n.contains(a)?(a=P(n,a),r=uf(r,a,o.Ga)):a.contains(n)&&(a=P(a,n),r=uf(r,Q,o.Ga.P(a)));else{if(!o.children)throw Mb("WriteRecord should have .snap or .children");n.contains(a)?(a=P(n,a),r=vf(r,a,o.children)):a.contains(n)&&(a=P(a,n),a.e()?r=vf(r,Q,o.children):(o=w(o.children,K(a)))&&(o=o.P(N(a)),r=uf(r,Q,o)))}}}return r}function If(t,e){this.Lb=t,this.W=e}function Jf(t,e){this.rf={},this.Vc=new Kf(t),this.va=e;var n=1e4+2e4*Math.random();hc(q(this.lf,this),Math.floor(n))}function Lf(){this.tc={}}function Mf(t,e,r){n(r)||(r=1),eb(t.tc,e)||(t.tc[e]=0),t.tc[e]+=r}function Kf(t){this.Ef=t,this.rd=null}function Pf(t){return t=t.toString(),Nf[t]||(Nf[t]=new Lf),Nf[t]}function Qf(t,e){var n=t.toString();return Of[n]||(Of[n]=e()),Of[n]}function Rf(t,e,n){this.f=Tb("p:rest:"),this.L=t,this.Gb=e,this.$c=n,this.$={}}function Sf(t,e){return n(e)?"tag$"+e:(D(qf(t.m),"should have a tag if it's not a default query."),t.path.toString())}function Tf(t,e,n,r){n=n||{},n.format="export",t.$c.getToken(!1).then(function(i){(i=i&&i.accessToken)&&(n.auth=i);var o=(t.L.Sc?"https://":"http://")+t.L.host+e+"?"+gb(n);t.f("Sending REST request for "+o);var a=new XMLHttpRequest;a.onreadystatechange=function(){if(r&&4===a.readyState){t.f("REST Response for "+o+" received. status:",a.status,"response:",a.responseText);var e=null;if(200<=a.status&&300>a.status){try{e=lb(a.responseText)}catch(t){J("Failed to parse JSON response for "+o+": "+a.responseText)}r(null,e)}else 401!==a.status&&404!==a.status&&J("Got unsuccessful REST response for "+o+" Status: "+a.status),r(a.status);r=null}},a.open("GET",o,!0),a.send()})}function Uf(t){this.te=t,this.Bd=[],this.Qb=0,this.Yd=-1,this.Fb=null}function Vf(t,e,n){t.Yd=e,t.Fb=n,t.Yd<t.Qb&&(t.Fb(),t.Fb=null)}function Wf(t,e,n){for(t.Bd[e]=n;t.Bd[t.Qb];){var r=t.Bd[t.Qb];delete t.Bd[t.Qb];for(var i=0;i<r.length;++i)if(r[i]){var o=t;fc(function(){o.te(r[i])})}if(t.Qb===t.Yd){t.Fb&&(clearTimeout(t.Fb),t.Fb(),t.Fb=null);break}t.Qb++}}function Yf(t,e,n,r){this.Zd=t,this.f=Tb(this.Zd),this.frames=this.zc=null,this.pb=this.qb=this.Fe=0,this.Va=Pf(e),t={v:"5"},"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(t.r="f"),n&&(t.s=n),r&&(t.ls=r),this.Ke=Bb(e,Cb,t)}function ag(t,e){if(t.frames.push(e),t.frames.length==t.Fe){var n=t.frames.join("");t.frames=null,n=lb(n),t.Xf(n)}}function $f(t){clearInterval(t.zc),t.zc=setInterval(function(){t.Ia&&bg(t,"0"),$f(t)},Math.floor(45e3))}function bg(t,e){try{t.Ia.send(e)}catch(e){t.f("Exception thrown from WebSocket.send():",e.message||e.data,"Closing connection."),setTimeout(q(t.bb,t),0)}}function cg(t,e,n,r){this.Zd=t,this.f=Tb(t),this.jc=e,this.pb=this.qb=0,this.Va=Pf(e),this.tf=n,this.wc=!1,this.Cb=r,this.Yc=function(t){return Bb(e,Db,t)}}function gg(t,e){var n=x(e).length;t.pb+=n,Mf(t.Va,"bytes_received",n)}function fg(t,e,n,r){if(this.Yc=r,this.ib=n,this.ve=new Gc,this.Qc=[],this.$d=Math.floor(1e8*Math.random()),this.Kd=!0,this.Qd=Lb(),window["pLPCommand"+this.Qd]=t,window["pRTLPCB"+this.Qd]=e,t=document.createElement("iframe"),t.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(t);try{t.contentWindow.document||I("No IE domain setting required")}catch(e){t.src="javascript:void((function(){document.open();document.domain='"+document.domain+"';document.close();})())"}t.contentDocument?t.gb=t.contentDocument:t.contentWindow?t.gb=t.contentWindow.document:t.document&&(t.gb=t.document),this.Ea=t,t="",this.Ea.src&&"javascript:"===this.Ea.src.substr(0,11)&&(t='<script>document.domain="'+document.domain+'";<\/script>'),t="<html><body>"+t+"</body></html>";try{this.Ea.gb.open(),this.Ea.gb.write(t),this.Ea.gb.close()}catch(t){I("frame writing exception"),t.stack&&I(t.stack),I(t)}}function ig(t){if(t.Ud&&t.Kd&&t.ve.count()<(0<t.Qc.length?2:1)){t.$d++;var e={};e.id=t.Vf,e.pw=t.Wf,e.ser=t.$d;for(var e=t.Yc(e),n="",r=0;0<t.Qc.length&&1870>=t.Qc[0].Pe.length+30+n.length;){var i=t.Qc.shift(),n=n+"&seg"+r+"="+i.jg+"&ts"+r+"="+i.pg+"&d"+r+"="+i.Pe;r++}return jg(t,e+n,t.$d),!0}return!1}function jg(t,e,n){function r(){t.ve.remove(n),ig(t)}t.ve.add(n,1);var i=setTimeout(r,Math.floor(25e3));hg(t,e,function(){clearTimeout(i),r()})}function hg(t,e,n){setTimeout(function(){try{if(t.Kd){var r=t.Ea.gb.createElement("script");r.type="text/javascript",r.async=!0,r.src=e,r.onload=r.onreadystatechange=function(){var t=r.readyState;t&&"loaded"!==t&&"complete"!==t||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),n())},r.onerror=function(){I("Long-poll script failed to load: "+e),t.Kd=!1,t.close()},t.Ea.gb.body.appendChild(r)}}catch(t){}},Math.floor(1))}function kg(t){lg(this,t)}function lg(t,e){var n=Yf&&Yf.isAvailable(),r=n&&!(xb.Ze||!0===xb.get("previous_websocket_failure"));if(e.qg&&(n||J("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),r=!0),r)t.Wc=[Yf];else{var i=t.Wc=[];cc(mg,function(t,e){e&&e.isAvailable()&&i.push(e)})}}function ng(t){if(0<t.Wc.length)return t.Wc[0];throw Error("No transports available")}function og(t,e,n,r,i,o,a){this.id=t,this.f=Tb("c:"+this.id+":"),this.te=n,this.Lc=r,this.ia=i,this.se=o,this.L=e,this.Ad=[],this.Le=0,this.sf=new kg(e),this.Ua=0,this.Cb=a,this.f("Connection created"),pg(this)}function pg(t){var e=ng(t.sf);t.I=new e("c:"+t.id+":"+t.Le++,t.L,void 0,t.Cb),t.xe=e.responsesRequiredToBeHealthy||0;var n=qg(t,t.I),r=rg(t,t.I);t.Xc=t.I,t.Rc=t.I,t.D=null,t.Bb=!1,setTimeout(function(){t.I&&t.I.open(n,r)},Math.floor(0)),0<(e=e.healthyTimeout||0)&&(t.md=hc(function(){t.md=null,t.Bb||(t.I&&102400<t.I.pb?(t.f("Connection exceeded healthy timeout but has received "+t.I.pb+" bytes.  Marking connection healthy."),t.Bb=!0,t.I.sd()):t.I&&10240<t.I.qb?t.f("Connection exceeded healthy timeout but has sent "+t.I.qb+" bytes.  Leaving connection alive."):(t.f("Closing unhealthy connection after timeout."),t.close()))},Math.floor(e)))}function rg(t,e){return function(n){e===t.I?(t.I=null,n||0!==t.Ua?1===t.Ua&&t.f("Realtime connection lost."):(t.f("Realtime connection failed."),"s-"===t.L.$a.substr(0,2)&&(xb.remove("host:"+t.L.host),t.L.$a=t.L.host)),t.close()):e===t.D?(t.f("Secondary connection lost."),n=t.D,t.D=null,t.Xc!==n&&t.Rc!==n||t.close()):t.f("closing an old connection")}}function qg(t,e){return function(n){if(2!=t.Ua)if(e===t.Rc){var r=$b("t",n);if(n=$b("d",n),"c"==r){if(r=$b("t",n),"d"in n)if(n=n.d,"h"===r){var r=n.ts,i=n.v,o=n.h;t.qf=n.s,Ab(t.L,o),0==t.Ua&&(t.I.start(),sg(t,t.I,r),"5"!==i&&J("Protocol version mismatch detected"),n=t.sf,(n=1<n.Wc.length?n.Wc[1]:null)&&tg(t,n))}else if("n"===r){for(t.f("recvd end transmission on primary"),t.Rc=t.D,n=0;n<t.Ad.length;++n)t.wd(t.Ad[n]);t.Ad=[],ug(t)}else"s"===r?(t.f("Connection shutdown command received. Shutting down..."),t.se&&(t.se(n),t.se=null),t.ia=null,t.close()):"r"===r?(t.f("Reset packet received.  New host: "+n),Ab(t.L,n),1===t.Ua?t.close():(vg(t),pg(t))):"e"===r?Ub("Server Error: "+n):"o"===r?(t.f("got pong on primary."),wg(t),xg(t)):Ub("Unknown control packet command: "+r)}else"d"==r&&t.wd(n)}else if(e===t.D)if(r=$b("t",n),n=$b("d",n),"c"==r)"t"in n&&(n=n.t,"a"===n?yg(t):"r"===n?(t.f("Got a reset on secondary, closing it"),t.D.close(),t.Xc!==t.D&&t.Rc!==t.D||t.close()):"o"===n&&(t.f("got pong on secondary."),t.pf--,yg(t)));else{if("d"!=r)throw Error("Unknown protocol layer: "+r);t.Ad.push(n)}else t.f("message on old connection")}}function ug(t){t.Xc===t.D&&t.Rc===t.D&&(t.f("cleaning up and promoting a connection: "+t.D.Zd),t.I=t.D,t.D=null)}function yg(t){0>=t.pf?(t.f("Secondary connection is healthy."),t.Bb=!0,t.D.sd(),t.D.start(),t.f("sending client ack on secondary"),t.D.send({t:"c",d:{t:"a",d:{}}}),t.f("Ending transmission on primary"),t.I.send({t:"c",d:{t:"n",d:{}}}),t.Xc=t.D,ug(t)):(t.f("sending ping on secondary."),t.D.send({t:"c",d:{t:"p",d:{}}}))}function wg(t){t.Bb||0>=--t.xe&&(t.f("Primary connection is healthy."),t.Bb=!0,t.I.sd())}function tg(t,e){t.D=new e("c:"+t.id+":"+t.Le++,t.L,t.qf),t.pf=e.responsesRequiredToBeHealthy||0,t.D.open(qg(t,t.D),rg(t,t.D)),hc(function(){t.D&&(t.f("Timed out trying to upgrade."),t.D.close())},Math.floor(6e4))}function sg(t,e,n){t.f("Realtime connection established."),t.I=e,t.Ua=1,t.Lc&&(t.Lc(n,t.qf),t.Lc=null),0===t.xe?(t.f("Primary connection is healthy."),t.Bb=!0):hc(function(){xg(t)},Math.floor(5e3))}function xg(t){t.Bb||1!==t.Ua||(t.f("sending ping on primary."),zg(t,{t:"c",d:{t:"p",d:{}}}))}function zg(t,e){if(1!==t.Ua)throw"Connection is not connected";t.Xc.send(e)}function vg(t){t.f("Shutting down all connections"),t.I&&(t.I.close(),t.I=null),t.D&&(t.D.close(),t.D=null),t.md&&(clearTimeout(t.md),t.md=null)}function Ag(t,e,n,r,i,o){if(this.id=Bg++,this.f=Tb("p:"+this.id+":"),this.qd={},this.$={},this.pa=[],this.Oc=0,this.Kc=[],this.ma=!1,this.Sa=1e3,this.td=3e5,this.Gb=e,this.Jc=n,this.ue=r,this.L=t,this.ob=this.Fa=this.Cb=this.ze=null,this.$c=i,this.de=!1,this.ke=0,o)throw Error("Auth override specified in options, but not supported on non Node.js platforms");this.Vd=o,this.ub=null,this.Mb=!1,this.Gd={},this.ig=0,this.Re=!0,this.Ac=this.me=null,Cg(this,0),Mc.Vb().gc("visible",this.Zf,this),-1===t.host.indexOf("fblocal")&&Lc.Vb().gc("online",this.Yf,this)}function Eg(t,e){var n=e.eg,r=n.path.toString(),i=n.ja();t.f("Listen on "+r+" for "+i);var o={p:r};e.tag&&(o.q=pf(n.m),o.t=e.tag),o.h=e.ld(),t.ua("q",o,function(o){var a=o.d,s=o.s;if(a&&"object"==typeof a&&eb(a,"w")){var u=w(a,"w");ea(u)&&0<=xa(u,"no_index")&&J('Using an unspecified index. Consider adding ".indexOn": "'+n.m.g.toString()+'" at '+n.path.toString()+" to your security rules for better performance")}(t.$[r]&&t.$[r][i])===e&&(t.f("listen response",o),"ok"!==s&&Fg(t,r,i),e.G&&e.G(s,a))})}function Gg(t){if(t.ma&&t.ob){var e=t.ob,n=jc(e)?"auth":"gauth",r={cred:e};null===t.Vd?r.noauth=!0:"object"==typeof t.Vd&&(r.authvar=t.Vd),t.ua(n,r,function(n){var r=n.s;n=n.d||"error",t.ob===e&&("ok"===r?t.ke=0:Hg(t,r,n))})}}function Ig(t,e,n,r,i){n={p:n,d:r},t.f("onDisconnect "+e,n),t.ua(e,n,function(t){i&&setTimeout(function(){i(t.s,t.d)},Math.floor(0))})}function Jg(t,e,r,i,o,a){i={p:r,d:i},n(a)&&(i.h=a),t.pa.push({action:e,mf:i,G:o}),t.Oc++,e=t.pa.length-1,t.ma?Kg(t,e):t.f("Buffering put: "+r)}function Kg(t,e){var n=t.pa[e].action,r=t.pa[e].mf,i=t.pa[e].G;t.pa[e].fg=t.ma,t.ua(n,r,function(r){t.f(n+" response",r),delete t.pa[e],t.Oc--,0===t.Oc&&(t.pa=[]),i&&i(r.s,r.d)})}function Cg(t,e){D(!t.Fa,"Scheduling a connect when we're already connected/ing?"),t.ub&&clearTimeout(t.ub),t.ub=setTimeout(function(){t.ub=null,Ng(t)},Math.floor(e))}function Ng(t){if(Og(t)){t.f("Making a connection attempt"),t.me=(new Date).getTime(),t.Ac=null;var e=q(t.wd,t),n=q(t.Lc,t),r=q(t.df,t),i=t.id+":"+Dg++,o=t.Cb,a=!1,s=null,u=function(){s?s.close():(a=!0,r())};t.Fa={close:u,ua:function(t){D(s,"sendRequest call when we're not connected not allowed."),s.ua(t)}};var c=t.de;t.de=!1,t.$c.getToken(c).then(function(u){a?I("getToken() completed but was canceled"):(I("getToken() completed. Creating connection."),t.ob=u&&u.accessToken,s=new og(i,t.L,e,n,r,function(e){J(e+" ("+t.L.toString()+")"),t.ab("server_kill")},o))}).then(null,function(e){t.f("Failed to get token: "+e),a||u()})}}function Lg(t,e,n){n=n?Aa(n,function(t){return ac(t)}).join("$"):"default",(t=Fg(t,e,n))&&t.G&&t.G("permission_denied")}function Fg(t,e,r){e=new E(e).toString();var i;return n(t.$[e])?(i=t.$[e][r],delete t.$[e][r],0===La(t.$[e])&&delete t.$[e]):i=void 0,i}function Hg(t,e,n){I("Auth token revoked: "+e+"/"+n),t.ob=null,t.de=!0,t.Fa.close(),"invalid_token"!==e&&"permission_denied"!==e||3<=++t.ke&&(t.Sa=3e4,t=t.$c,e='Provided authentication credentials for the app named "'+t.oc.name+'" are invalid. This usually indicates your app was not initialized correctly. ',e="credential"in t.oc.options?e+'Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in t.oc.options?e+'Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':e+'Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',J(e))}function Mg(t){Gg(t),v(t.$,function(e){v(e,function(e){Eg(t,e)})});for(var e=0;e<t.pa.length;e++)t.pa[e]&&Kg(t,e);for(;t.Kc.length;)e=t.Kc.shift(),Ig(t,e.action,e.we,e.data,e.G)}function Og(t){var e;return e=Lc.Vb().hc,Sa(t.qd)&&e}function Pg(t){t instanceof Qg||Vb("Don't call new Database() directly - please use firebase.database()."),this.ta=t,this.ba=new U(t,Q),this.INTERNAL=new Rg(this)}function Tg(t,e){null===t.ta&&Vb("Cannot call "+e+" on a deleted database.")}function Rg(t){this.Ya=t}function V(t,e,n){this.A=t,this.V=e,this.g=n}function Vg(t,e,n){this.Pb=t,this.rb=e,this.tb=n||null}function Wg(t,e,n){this.ga=t,this.rb=e,this.tb=n}function Xg(){this.za={}}function Zg(t){return za(Na(t.za),function(t){return!T(t.V.m)})}function $g(t,e){if(T(e.m))return Yg(t);var n=e.ja();return w(t.za,n)}function Yg(t){return Ra(t.za,function(t){return T(t.V.m)})||null}function ah(t){this.wa=R,this.jb=new Df,this.De={},this.ic={},this.Cc=t}function bh(t,e,r,i,o){var a=t.jb,s=o;return D(i>a.Bc,"Stacking an older write on top of newer ones"),n(s)||(s=!0),a.la.push({path:e,Ga:r,Zc:i,visible:s}),s&&(a.S=uf(a.S,e,r)),a.Bc=i,o?ch(t,new ce(fe,e,r)):[]}function dh(t,e,n,r){var i=t.jb;return D(r>i.Bc,"Stacking an older merge on top of newer ones"),i.la.push({path:e,children:n,Zc:r,visible:!0}),i.S=vf(i.S,e,n),i.Bc=r,n=xd(n),ch(t,new ae(fe,e,n))}function eh(t,e,n){n=n||!1;var r=Ef(t.jb,e);if(t.jb.Ed(e)){var i=R;return null!=r.Ga?i=i.set(Q,!0):fb(r.children,function(t,e){i=i.set(new E(t),e)}),ch(t,new de(r.path,i,n))}return[]}function fh(t,e,n){return n=xd(n),ch(t,new ae(ie,e,n))}function gh(t,e,n,r){if(null!=(r=hh(t,r))){var i=ih(r);return r=i.path,i=i.Hb,e=P(r,e),n=new ce(new he(!1,!0,i,!0),e,n),jh(t,r,n)}return[]}function kh(t,e,n,r){if(r=hh(t,r)){var i=ih(r);return r=i.path,i=i.Hb,e=P(r,e),n=xd(n),n=new ae(new he(!1,!0,i,!0),e,n),jh(t,r,n)}return[]}function oh(t){return Bd(t,function(t,e,n){if(e&&null!=Yg(e))return[Yg(e)];var r=[];return e&&(r=Zg(e)),v(n,function(t){r=r.concat(t)}),r})}function sh(t,e){for(var n=0;n<e.length;++n){var r=e[n];if(!T(r.m)){var r=lh(r),i=t.ic[r];delete t.ic[r],delete t.De["_"+i]}}}function qh(t){return T(t.m)&&!qf(t.m)?t.wb():t}function nh(t,e,n){var r=e.path,i=rh(t,e);if(n=ph(t,n),e=t.Cc.Ae(qh(e),i,n.ld,n.G),r=t.wa.subtree(r),i)D(null==Yg(r.value),"If we're adding a query, it shouldn't be shadowed");else for(i=Bd(r,function(t,e,n){if(!t.e()&&e&&null!=Yg(e))return[Te(Yg(e))];var r=[];return e&&(r=r.concat(Aa(Zg(e),function(t){return t.V}))),v(n,function(t){r=r.concat(t)}),r}),r=0;r<i.length;++r)n=i[r],t.Cc.Od(qh(n),rh(t,n));return e}function ph(t,e){var n=e.V,r=rh(t,n);return{ld:function(){return(e.w()||L).hash()},G:function(e){if("ok"===e){if(r){var i=n.path;if(e=hh(t,r)){var o=ih(e);e=o.path,o=o.Hb,i=P(e,i),i=new Zd(new he(!1,!0,o,!0),i),e=jh(t,e,i)}else e=[]}else e=ch(t,new Zd(ie,n.path));return e}return i="Unknown Error","too_big"===e?i="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==e?i="Client doesn't have permission to access the desired data.":"unavailable"==e&&(i="The service is unavailable"),i=Error(e+" at "+n.path.toString()+": "+i),i.code=e.toUpperCase(),t.kb(n,null,i)}}}function lh(t){return t.path.toString()+"$"+t.ja()}function ih(t){var e=t.indexOf("$");return D(-1!==e&&e<t.length-1,"Bad queryKey."),{Hb:t.substr(e+1),path:new E(t.substr(0,e))}}function hh(t,e){var n=t.De,r="_"+e;return r in n?n[r]:void 0}function rh(t,e){var n=lh(e);return w(t.ic,n)}function jh(t,e,n){var r=t.wa.get(e);return D(r,"Missing sync point for query tag that we're tracking"),r.eb(n,new If(e,t.jb),null)}function ch(t,e){return th(t,e,t.wa,null,new If(Q,t.jb))}function th(t,e,n,r,i){if(e.path.e())return uh(t,e,n,r,i);var o=n.get(Q);null==r&&null!=o&&(r=o.hb(Q));var a=[],s=K(e.path),u=e.Mc(s);if((n=n.children.get(s))&&u)var c=r?r.Q(s):null,s=i.n(s),a=a.concat(th(t,u,n,c,s));return o&&(a=a.concat(o.eb(e,i,r))),a}function uh(t,e,n,r,i){var o=n.get(Q);null==r&&null!=o&&(r=o.hb(Q));var a=[];return n.children.ha(function(n,o){var s=r?r.Q(n):null,u=i.n(n),c=e.Mc(n);c&&(a=a.concat(uh(t,c,o,s,u)))}),o&&(a=a.concat(o.eb(e,i,r))),a}function Qg(t,e,n){this.app=n;var r=new Bf(n);if(this.L=t,this.Va=Pf(t),this.Vc=null,this.ca=new Ye,this.vd=1,this.Ra=null,e||0<=("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i))this.va=new Rf(this.L,q(this.Gb,this),r),setTimeout(q(this.Jc,this,!0),0);else{if(e=n.options.databaseAuthVariableOverride,"undefined"!==da(e)&&null!==e){if("object"!==da(e))throw Error("Only objects are supported for option databaseAuthVariableOverride");try{x(e)}catch(t){throw Error("Invalid authOverride provided: "+t)}}this.va=this.Ra=new Ag(this.L,q(this.Gb,this),q(this.Jc,this),q(this.ue,this),r,e)}var i=this;Cf(r,function(t){i.va.kf(t)}),this.og=Qf(t,q(function(){return new Jf(this.Va,this.va)},this)),this.mc=new Tc,this.ie=new Af,this.pd=new ah({Ae:function(t,e,n,r){return e=[],n=i.ie.j(t.path),n.e()||(e=ch(i.pd,new ce(ie,t.path,n)),setTimeout(function(){r("ok")},0)),e},Od:ba}),vh(this,"connected",!1),this.ia=new Gb,this.Ya=new Pg(this),this.fd=0,this.je=null,this.K=new ah({Ae:function(t,e,n,r){return i.va.$e(t,n,e,function(e,n){var o=r(e,n);cf(i.ca,t.path,o)}),[]},Od:function(t,e){i.va.uf(t,e)}})}function wh(t){return t=t.ie.j(new E(".info/serverTimeOffset")).H()||0,(new Date).getTime()+t}function xh(t){return t=t={timestamp:wh(t)},t.timestamp=t.timestamp||(new Date).getTime(),t}function vh(t,e,n){e=new E("/.info/"+e),n=G(n);var r=t.ie;r.Jd=r.Jd.F(e,n),n=ch(t.pd,new ce(ie,e,n)),cf(t.ca,e,n)}function zh(t){t.f("onDisconnectEvents");var e=xh(t),n=[];Hb(Fb(t.ia,e),Q,function(e,r){n=n.concat(ch(t.K,new ce(ie,e,r)));var i=Bh(t,e);yh(t,i)}),t.ia=new Gb,cf(t.ca,Q,n)}function Ch(t,e,n,r){var i=G(n);t.va.re(e.toString(),i.H(!0),function(n,o){"ok"===n&&Ib(t.ia,e,i),Ah(r,n,o)})}function Dh(t,e,n,r,i){var o=G(n,r);t.va.re(e.toString(),o.H(!0),function(n,r){"ok"===n&&Ib(t.ia,e,o),Ah(i,n,r)})}function Eh(t,e,n,r){var i,o=!0;for(i in n)o=!1;o?(I("onDisconnect().update() called with empty data.  Don't do anything."),Ah(r,"ok")):t.va.cf(e.toString(),n,function(i,o){if("ok"===i)for(var a in n){var s=G(n[a]);Ib(t.ia,e.n(a),s)}Ah(r,i,o)})}function Fh(t,e,n){n=".info"===K(e.path)?t.pd.Nb(e,n):t.K.Nb(e,n),af(t.ca,e.path,n)}function Ah(t,e,n){t&&fc(function(){if("ok"==e)t(null);else{var r=(e||"error").toUpperCase(),i=r;n&&(i+=": "+n),i=Error(i),i.code=r,t(i)}})}function Gh(t,e,r,i,o){function a(){}t.f("transaction on "+e);var s=new U(t,e);if(s.gc("value",a),r={path:e,update:r,G:i,status:null,ef:Lb(),He:o,of:0,Rd:function(){s.Ic("value",a)},Td:null,Ba:null,cd:null,dd:null,ed:null},i=t.K.Aa(e,void 0)||L,r.cd=i,i=r.update(i.H()),n(i)){Pd("transaction failed: Data returned ",i,r.path),r.status=1,o=Uc(t.mc,e);var u=o.Ca()||[];u.push(r),Vc(o,u),"object"==typeof i&&null!==i&&eb(i,".priority")?(u=w(i,".priority"),D(Nd(u),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):u=(t.K.Aa(e)||L).C().H(),o=xh(t),i=G(i,u),o=Jb(i,o),r.dd=i,r.ed=o,r.Ba=t.vd++,r=bh(t.K,e,o,r.Ba,r.He),cf(t.ca,e,r),Hh(t)}else r.Rd(),r.dd=null,r.ed=null,r.G&&(t=new V(r.cd,new U(t,r.path),H),r.G(null,!1,t))}function Hh(t,e){var n=e||t.mc;if(e||Ih(t,n),null!==n.Ca()){var r=Jh(t,n);D(0<r.length,"Sending zero length transaction queue"),Ca(r,function(t){return 1===t.status})&&Kh(t,n.path(),r)}else n.kd()&&n.O(function(e){Hh(t,e)})}function Kh(t,e,n){for(var r=Aa(n,function(t){return t.Ba}),i=t.K.Aa(e,r)||L,r=i,i=i.hash(),o=0;o<n.length;o++){var a=n[o];D(1===a.status,"tryToSendTransactionQueue_: items in queue should all be run."),a.status=2,a.of++;var s=P(e,a.path),r=r.F(s,a.dd)}r=r.H(!0),t.va.put(e.toString(),r,function(r){t.f("transaction put response",{path:e.toString(),status:r});var i=[];if("ok"===r){for(r=[],o=0;o<n.length;o++){if(n[o].status=3,i=i.concat(eh(t.K,n[o].Ba)),n[o].G){var a=n[o].ed,s=new U(t,n[o].path);r.push(q(n[o].G,null,null,!0,new V(a,s,H)))}n[o].Rd()}for(Ih(t,Uc(t.mc,e)),Hh(t),cf(t.ca,e,i),o=0;o<r.length;o++)fc(r[o])}else{if("datastale"===r)for(o=0;o<n.length;o++)n[o].status=4===n[o].status?5:1;else for(J("transaction at "+e.toString()+" failed: "+r),o=0;o<n.length;o++)n[o].status=5,n[o].Td=r;yh(t,e)}},i)}function yh(t,e){var n=Lh(t,e),r=n.path(),n=Jh(t,n);return Mh(t,n,r),r}function Mh(t,e,r){if(0!==e.length){for(var i=[],o=[],a=za(e,function(t){return 1===t.status}),a=Aa(a,function(t){return t.Ba}),s=0;s<e.length;s++){var u,c=e[s],h=P(r,c.path),f=!1;if(D(null!==h,"rerunTransactionsUnderNode_: relativePath should not be null."),5===c.status)f=!0,u=c.Td,o=o.concat(eh(t.K,c.Ba,!0));else if(1===c.status)if(25<=c.of)f=!0,u="maxretry",o=o.concat(eh(t.K,c.Ba,!0));else{var l=t.K.Aa(c.path,a)||L;c.cd=l;var p=e[s].update(l.H());n(p)?(Pd("transaction failed: Data returned ",p,c.path),h=G(p),"object"==typeof p&&null!=p&&eb(p,".priority")||(h=h.fa(l.C())),l=c.Ba,p=xh(t),p=Jb(h,p),c.dd=h,c.ed=p,c.Ba=t.vd++,Fa(a,l),o=o.concat(bh(t.K,c.path,p,c.Ba,c.He)),o=o.concat(eh(t.K,l,!0))):(f=!0,u="nodata",o=o.concat(eh(t.K,c.Ba,!0)))}cf(t.ca,r,o),o=[],f&&(e[s].status=3,setTimeout(e[s].Rd,Math.floor(0)),e[s].G&&("nodata"===u?(c=new U(t,e[s].path),i.push(q(e[s].G,null,null,!1,new V(e[s].cd,c,H)))):i.push(q(e[s].G,null,Error(u),!1,null))))}for(Ih(t,t.mc),s=0;s<i.length;s++)fc(i[s]);Hh(t)}}function Lh(t,e){for(var n,r=t.mc;null!==(n=K(e))&&null===r.Ca();)r=Uc(r,n),e=N(e);return r}function Jh(t,e){var n=[];return Nh(t,e,n),n.sort(function(t,e){return t.ef-e.ef}),n}function Nh(t,e,n){var r=e.Ca();if(null!==r)for(var i=0;i<r.length;i++)n.push(r[i]);e.O(function(e){Nh(t,e,n)})}function Ih(t,e){var n=e.Ca();if(n){for(var r=0,i=0;i<n.length;i++)3!==n[i].status&&(n[r]=n[i],r++);n.length=r,Vc(e,0<n.length?n:null)}e.O(function(e){Ih(t,e)})}function Bh(t,e){var n=Lh(t,e).path(),r=Uc(t.mc,e);return Yc(r,function(e){Oh(t,e)}),Oh(t,r),Xc(r,function(e){Oh(t,e)}),n}function Oh(t,e){var n=e.Ca();if(null!==n){for(var r=[],i=[],o=-1,a=0;a<n.length;a++)4!==n[a].status&&(2===n[a].status?(D(o===a-1,"All SENT items should be at beginning of queue."),o=a,n[a].status=4,n[a].Td="set"):(D(1===n[a].status,"Unexpected transaction status in abort"),n[a].Rd(),i=i.concat(eh(t.K,n[a].Ba,!0)),n[a].G&&r.push(q(n[a].G,null,Error("set"),!1,null))));for(-1===o?Vc(e,null):n.length=o+1,cf(t.ca,e.path(),i),a=0;a<r.length;a++)fc(r[a])}}function Ug(){this.lb={},this.wf=!1}function Ph(t,e){this.committed=t,this.snapshot=e}function X(t,e,n,r){this.u=t,this.path=e,this.m=n,this.Nc=r}function Qh(t){var e=null,n=null;if(t.ka&&(e=ff(t)),t.na&&(n=hf(t)),t.g===tc){if(t.ka){if("[MIN_NAME]"!=ef(t))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!=typeof e)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.")}if(t.na){if("[MAX_NAME]"!=gf(t))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!=typeof n)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.")}}else if(t.g===H){if(null!=e&&!Nd(e)||null!=n&&!Nd(n))throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(D(t.g instanceof pc||t.g===wc,"unknown index type."),null!=e&&"object"==typeof e||null!=n&&"object"==typeof n)throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")}function Rh(t){if(t.ka&&t.na&&t.xa&&(!t.xa||""===t.mb))throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")}function Sh(t,e){if(!0===t.Nc)throw Error(e+": You can't combine multiple orderBy calls.")}function Th(t,e,n){var r={cancel:null,Ma:null};if(e&&n)r.cancel=e,B(t,3,r.cancel,!0),r.Ma=n,ob(t,4,r.Ma);else if(e)if("object"==typeof e&&null!==e)r.Ma=e;else{if("function"!=typeof e)throw Error(A(t,3,!0)+" must either be a cancel callback or a context object.");r.cancel=e}return r}function Y(t,e){this.ta=t,this.qa=e}function U(t,e){if(!(t instanceof Qg))throw Error("new Firebase() no longer supported - use app.database().");X.call(this,t,e,mf,!1),this.then=void 0,this.catch=void 0}var g,aa=this,qa={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},ra=/\uffff/.test("￿")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g;la(ta,sa),ta.prototype.reset=function(){this.M[0]=1732584193,this.M[1]=4023233417,this.M[2]=2562383102,this.M[3]=271733878,this.M[4]=3285377520,this.Pd=this.$b=0},ta.prototype.update=function(t,e){if(null!=t){n(e)||(e=t.length);for(var r=e-this.Wa,i=0,o=this.Wd,a=this.$b;i<e;){if(0==a)for(;i<=r;)ua(this,t,i),i+=this.Wa;if(p(t)){for(;i<e;)if(o[a]=t.charCodeAt(i),++a,++i,a==this.Wa){ua(this,o),a=0;break}}else for(;i<e;)if(o[a]=t[i],++a,++i,a==this.Wa){ua(this,o),a=0;break}}this.$b=a,this.Pd+=e}};var r;t:{var va=aa.navigator;if(va){var wa=va.userAgent;if(wa){r=wa;break t}}r=""}var t=Array.prototype,xa=t.indexOf?function(e,n,r){return t.indexOf.call(e,n,r)}:function(t,e,n){if(n=null==n?0:0>n?Math.max(0,t.length+n):n,p(t))return p(e)&&1==e.length?t.indexOf(e,n):-1;for(;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},ya=t.forEach?function(e,n,r){t.forEach.call(e,n,r)}:function(t,e,n){for(var r=t.length,i=p(t)?t.split(""):t,o=0;o<r;o++)o in i&&e.call(n,i[o],o,t)},za=t.filter?function(e,n,r){return t.filter.call(e,n,r)}:function(t,e,n){for(var r=t.length,i=[],o=0,a=p(t)?t.split(""):t,s=0;s<r;s++)if(s in a){var u=a[s];e.call(n,u,s,t)&&(i[o++]=u)}return i},Aa=t.map?function(e,n,r){return t.map.call(e,n,r)}:function(t,e,n){for(var r=t.length,i=Array(r),o=p(t)?t.split(""):t,a=0;a<r;a++)a in o&&(i[a]=e.call(n,o[a],a,t));return i},Ba=t.reduce?function(e,n,r,i){for(var o=[],a=1,s=arguments.length;a<s;a++)o.push(arguments[a]);return i&&(o[0]=q(n,i)),t.reduce.apply(e,o)}:function(t,e,n,r){var i=n;return ya(t,function(n,o){i=e.call(r,i,n,o,t)}),i},Ca=t.every?function(e,n,r){return t.every.call(e,n,r)}:function(t,e,n){for(var r=t.length,i=p(t)?t.split(""):t,o=0;o<r;o++)if(o in i&&!e.call(n,i[o],o,t))return!1;return!0},Ua=-1!=r.indexOf("Opera")||-1!=r.indexOf("OPR"),Va=-1!=r.indexOf("Trident")||-1!=r.indexOf("MSIE"),Wa=-1!=r.indexOf("Gecko")&&-1==r.toLowerCase().indexOf("webkit")&&!(-1!=r.indexOf("Trident")||-1!=r.indexOf("MSIE")),Xa=-1!=r.toLowerCase().indexOf("webkit");!function(){var t,e="";Ua&&aa.opera?(e=aa.opera.version,ha(e)&&e()):(Wa?t=/rv\:([^\);]+)(\)|;)/:Va?t=/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/:Xa&&(t=/WebKit\/(\S+)/),t&&(e=(e=t.exec(r))?e[1]:""),Va&&(t=(t=aa.document)?t.documentMode:void 0)>parseFloat(e)&&String(t))}();var Ya=null,Za=null,$a=null,hb=firebase.Promise;g=ub.prototype,g.set=function(t,e){null==e?this.uc.removeItem(this.Cd+t):this.uc.setItem(this.Cd+t,x(e))},g.get=function(t){return t=this.uc.getItem(this.Cd+t),null==t?null:lb(t)},g.remove=function(t){this.uc.removeItem(this.Cd+t)},g.Ze=!1,g.toString=function(){return this.uc.toString()},vb.prototype.set=function(t,e){null==e?delete this.pc[t]:this.pc[t]=e},vb.prototype.get=function(t){return eb(this.pc,t)?this.pc[t]:null},vb.prototype.remove=function(t){delete this.pc[t]},vb.prototype.Ze=!0;var xb=wb("localStorage"),yb=wb("sessionStorage");zb.prototype.toString=function(){var t=(this.Sc?"https://":"http://")+this.host;return this.gf&&(t+="<"+this.gf+">"),t};var Lb=function(){var t=1;return function(){return t++}}(),D=cb,Mb=db,Qb=null,Rb=!0,ec=/^-?\d{1,10}$/,mc={};lc.prototype.nd=function(t,e){return 0!==this.compare(new C("[MIN_NAME]",t),new C("[MIN_NAME]",e))},lc.prototype.Hc=function(){return oc},la(pc,lc),g=pc.prototype,g.xc=function(t){return!t.P(this.bc).e()},g.compare=function(t,e){var n=t.R.P(this.bc),r=e.R.P(this.bc),n=n.sc(r);return 0===n?sb(t.name,e.name):n},g.Ec=function(t,e){var n=G(t),n=L.F(this.bc,n);return new C(e,n)},g.Fc=function(){return new C("[MAX_NAME]",L.F(this.bc,qc))},g.toString=function(){return this.bc.slice().join("/")},la(rc,lc),g=rc.prototype,g.compare=function(t,e){var n=t.R.C(),r=e.R.C(),n=n.sc(r);return 0===n?sb(t.name,e.name):n},g.xc=function(t){return!t.C().e()},g.nd=function(t,e){return!t.C().Z(e.C())},g.Hc=function(){return oc},g.Fc=function(){return new C("[MAX_NAME]",new Kb("[PRIORITY-POST]",qc))},g.Ec=function(t,e){return new C(e,new Kb("[PRIORITY-POST]",G(t)))},g.toString=function(){return".priority"};var H=new rc;la(sc,lc),g=sc.prototype,g.compare=function(t,e){return sb(t.name,e.name)},g.xc=function(){throw Mb("KeyIndex.isDefinedOn not expected to be called.")},g.nd=function(){return!1},g.Hc=function(){return oc},g.Fc=function(){return new C("[MAX_NAME]",L)},g.Ec=function(t){return D(p(t),"KeyIndex indexValue must always be a string."),new C(t,L)},g.toString=function(){return".key"};var tc=new sc;la(uc,lc),g=uc.prototype,g.compare=function(t,e){var n=t.R.sc(e.R);return 0===n?sb(t.name,e.name):n},g.xc=function(){return!0},g.nd=function(t,e){return!t.Z(e)},g.Hc=function(){return oc},g.Fc=function(){return vc},g.Ec=function(t,e){return new C(e,G(t))},g.toString=function(){return".value"};var wc=new uc;xc.prototype.get=function(t){var e=w(this.od,t);if(!e)throw Error("No index defined for "+t);return e===mc?null:e};var Bc=new xc({".priority":mc},{".priority":H}),Dc=["object","boolean","number","string"];g=Kb.prototype,g.J=function(){return!0},g.C=function(){return this.aa},g.fa=function(t){return new Kb(this.B,t)},g.Q=function(t){return".priority"===t?this.aa:L},g.P=function(t){return t.e()?this:".priority"===K(t)?this.aa:L},g.Da=function(){return!1},g.Ve=function(){return null},g.T=function(t,e){return".priority"===t?this.fa(e):e.e()&&".priority"!==t?this:L.T(t,e).fa(this.aa)},g.F=function(t,e){var n=K(t);return null===n?e:e.e()&&".priority"!==n?this:(D(".priority"!==n||1===Ec(t),".priority must be the last token in a path"),this.T(n,L.F(N(t),e)))},g.e=function(){return!1},g.Eb=function(){return 0},g.O=function(){return!1},g.H=function(t){return t&&!this.C().e()?{".value":this.Ca(),".priority":this.C().H()}:this.Ca()},g.hash=function(){if(null===this.Db){var t="";this.aa.e()||(t+="priority:"+Fc(this.aa.H())+":");var e=typeof this.B,t=t+(e+":"),t="number"===e?t+dc(this.B):t+this.B;this.Db=Ob(t)}return this.Db},g.Ca=function(){return this.B},g.sc=function(t){if(t===L)return 1;if(t instanceof O)return-1;D(t.J(),"Unknown node type");var e=typeof t.B,n=typeof this.B,r=xa(Dc,e),i=xa(Dc,n);return D(0<=r,"Unknown leaf type: "+e),D(0<=i,"Unknown leaf type: "+n),r===i?"object"===n?0:this.B<t.B?-1:this.B===t.B?0:1:i-r},g.nb=function(){return this},g.yc=function(){return!0},g.Z=function(t){return t===this||!!t.J()&&(this.B===t.B&&this.aa.Z(t.aa))},g.toString=function(){return x(this.H(!0))},g=Gc.prototype,g.add=function(t,e){this.set[t]=null===e||e},g.contains=function(t){return eb(this.set,t)},g.get=function(t){return this.contains(t)?this.set[t]:void 0},g.remove=function(t){delete this.set[t]},g.clear=function(){this.set={}},g.e=function(){return Sa(this.set)},g.count=function(){return La(this.set)},g.keys=function(){var t=[];return v(this.set,function(e,n){t.push(n)}),t},Ic.prototype.Ge=function(t,e){var n;n=this.Dc[t]||[];var r=n.length;if(0<r){for(var i=Array(r),o=0;o<r;o++)i[o]=n[o];n=i}else n=[];for(r=0;r<n.length;r++)n[r].Ie.apply(n[r].Ma,Array.prototype.slice.call(arguments,1))},Ic.prototype.gc=function(t,e,n){Jc(this,t),this.Dc[t]=this.Dc[t]||[],this.Dc[t].push({Ie:e,Ma:n}),(t=this.Ue(t))&&e.apply(n,t)},Ic.prototype.Ic=function(t,e,n){Jc(this,t),t=this.Dc[t]||[];for(var r=0;r<t.length;r++)if(t[r].Ie===e&&(!n||n===t[r].Ma)){t.splice(r,1);break}};var Kc=function(){var t=0,e=[];return function(n){var r=n===t;t=n;for(var i=Array(8),o=7;0<=o;o--)i[o]="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(n%64),n=Math.floor(n/64);if(D(0===n,"Cannot push at time == 0"),n=i.join(""),r){for(o=11;0<=o&&63===e[o];o--)e[o]=0;e[o]++}else for(o=0;12>o;o++)e[o]=Math.floor(64*Math.random());for(o=0;12>o;o++)n+="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(e[o]);return D(20===n.length,"nextPushId: Length should be 20."),n}}();la(Lc,Ic),Lc.prototype.Ue=function(t){return D("online"===t,"Unknown event type: "+t),[this.hc]},ca(Lc),la(Mc,Ic),Mc.prototype.Ue=function(t){return D("visible"===t,"Unknown event type: "+t),[this.Mb]},ca(Mc),g=E.prototype,g.toString=function(){for(var t="",e=this.Y;e<this.o.length;e++)""!==this.o[e]&&(t+="/"+this.o[e]);return t||"/"},g.slice=function(t){return this.o.slice(this.Y+(t||0))},g.parent=function(){if(this.Y>=this.o.length)return null;for(var t=[],e=this.Y;e<this.o.length-1;e++)t.push(this.o[e]);return new E(t,0)},g.n=function(t){for(var e=[],n=this.Y;n<this.o.length;n++)e.push(this.o[n]);if(t instanceof E)for(n=t.Y;n<t.o.length;n++)e.push(t.o[n]);else for(t=t.split("/"),n=0;n<t.length;n++)0<t[n].length&&e.push(t[n]);return new E(e,0)},g.e=function(){return this.Y>=this.o.length},g.Z=function(t){if(Ec(this)!==Ec(t))return!1;for(var e=this.Y,n=t.Y;e<=this.o.length;e++,n++)if(this.o[e]!==t.o[n])return!1;return!0},g.contains=function(t){var e=this.Y,n=t.Y;if(Ec(this)>Ec(t))return!1;for(;e<this.o.length;){if(this.o[e]!==t.o[n])return!1;++e,++n}return!0};var Q=new E("");Pc.prototype.push=function(t){0<this.Qa.length&&(this.Ha+=1),this.Qa.push(t),this.Ha+=nb(t),Qc(this)},Pc.prototype.pop=function(){var t=this.Qa.pop();this.Ha-=nb(t),0<this.Qa.length&&--this.Ha},g=Tc.prototype,g.Ca=function(){return this.A.value},g.clear=function(){this.A.value=null,this.A.children={},this.A.bd=0,Wc(this)},g.kd=function(){return 0<this.A.bd},g.e=function(){return null===this.Ca()&&!this.kd()},g.O=function(t){var e=this;v(this.A.children,function(n,r){t(new Tc(r,e,n))})},g.path=function(){return new E(null===this.Pc?this.ud:this.Pc.path()+"/"+this.ud)},g.name=function(){return this.ud},g.parent=function(){return this.Pc},g=Zc.prototype,g.Oa=function(t,e){return new Zc(this.La,this.ba.Oa(t,e,this.La).X(null,null,!1,null,null))},g.remove=function(t){return new Zc(this.La,this.ba.remove(t,this.La).X(null,null,!1,null,null))},g.get=function(t){for(var e,n=this.ba;!n.e();){if(0===(e=this.La(t,n.key)))return n.value;0>e?n=n.left:0<e&&(n=n.right)}return null},g.e=function(){return this.ba.e()},g.count=function(){return this.ba.count()},g.Gc=function(){return this.ba.Gc()},g.ec=function(){return this.ba.ec()},g.ha=function(t){return this.ba.ha(t)},g.Wb=function(t){return new bd(this.ba,null,this.La,!1,t)},g.Xb=function(t,e){return new bd(this.ba,t,this.La,!1,e)},g.Zb=function(t,e){return new bd(this.ba,t,this.La,!0,e)},g.We=function(t){return new bd(this.ba,null,this.La,!0,t)},g=dd.prototype,g.X=function(t,e,n,r,i){return new dd(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=r?r:this.left,null!=i?i:this.right)},g.count=function(){return this.left.count()+1+this.right.count()},g.e=function(){return!1},g.ha=function(t){return this.left.ha(t)||t(this.key,this.value)||this.right.ha(t)},g.Gc=function(){return ed(this).key},g.ec=function(){return this.right.e()?this.key:this.right.ec()},g.Oa=function(t,e,n){var r,i;return i=this,r=n(t,i.key),i=0>r?i.X(null,null,null,i.left.Oa(t,e,n),null):0===r?i.X(null,e,null,null,null):i.X(null,null,null,null,i.right.Oa(t,e,n)),gd(i)},g.remove=function(t,e){var n,r;if(n=this,0>e(t,n.key))n.left.e()||n.left.ea()||n.left.left.ea()||(n=id(n)),n=n.X(null,null,null,n.left.remove(t,e),null);else{if(n.left.ea()&&(n=jd(n)),n.right.e()||n.right.ea()||n.right.left.ea()||(n=kd(n),n.left.left.ea()&&(n=jd(n),n=kd(n))),0===e(t,n.key)){if(n.right.e())return $c;r=ed(n.right),n=n.X(r.key,r.value,null,null,hd(n.right))}n=n.X(null,null,null,null,n.right.remove(t,e))}return gd(n)},g.ea=function(){return this.color},g=md.prototype,g.X=function(){return this},g.Oa=function(t,e){return new dd(t,e,null)},g.remove=function(){return this},g.count=function(){return 0},g.e=function(){return!0},g.ha=function(){return!1},g.Gc=function(){return null},g.ec=function(){return null},g.ea=function(){return!1};var $c=new md;g=O.prototype,g.J=function(){return!1},g.C=function(){return this.aa||L},g.fa=function(t){return this.k.e()?this:new O(this.k,t,this.yb)},g.Q=function(t){return".priority"===t?this.C():(t=this.k.get(t),null===t?L:t)},g.P=function(t){var e=K(t);return null===e?this:this.Q(e).P(N(t))},g.Da=function(t){return null!==this.k.get(t)},g.T=function(t,e){if(D(e,"We should always be passing snapshot nodes"),".priority"===t)return this.fa(e);var n,r,i=new C(t,e);return e.e()?(n=this.k.remove(t),i=Ac(this.yb,i,this.k)):(n=this.k.Oa(t,e),i=yc(this.yb,i,this.k)),r=n.e()?L:this.aa,new O(n,r,i)},g.F=function(t,e){var n=K(t);if(null===n)return e;D(".priority"!==K(t)||1===Ec(t),".priority must be the last token in a path");var r=this.Q(n).F(N(t),e);return this.T(n,r)},g.e=function(){return this.k.e()},g.Eb=function(){return this.k.count()};var nd=/^(0|[1-9]\d*)$/;g=O.prototype,g.H=function(t){if(this.e())return null;var e={},n=0,r=0,i=!0;if(this.O(H,function(o,a){e[o]=a.H(t),n++,i&&nd.test(o)?r=Math.max(r,Number(o)):i=!1}),!t&&i&&r<2*n){var o,a=[];for(o in e)a[o]=e[o];return a}return t&&!this.C().e()&&(e[".priority"]=this.C().H()),e},g.hash=function(){if(null===this.Db){var t="";this.C().e()||(t+="priority:"+Fc(this.C().H())+":"),this.O(H,function(e,n){var r=n.hash();""!==r&&(t+=":"+e+":"+r)}),this.Db=""===t?"":Ob(t)}return this.Db},g.Ve=function(t,e,n){return(n=od(this,n))?(t=ad(n,new C(t,e)))?t.name:null:ad(this.k,t)},g.O=function(t,e){var n=od(this,t);return n?n.ha(function(t){return e(t.name,t.R)}):this.k.ha(e)},g.Wb=function(t){return this.Xb(t.Hc(),t)},g.Xb=function(t,e){var n=od(this,e);if(n)return n.Xb(t,function(t){return t});for(var n=this.k.Xb(t.name,qb),r=cd(n);null!=r&&0>e.compare(r,t);)M(n),r=cd(n);return n},g.We=function(t){return this.Zb(t.Fc(),t)},g.Zb=function(t,e){var n=od(this,e);if(n)return n.Zb(t,function(t){return t});for(var n=this.k.Zb(t.name,qb),r=cd(n);null!=r&&0<e.compare(r,t);)M(n),r=cd(n);return n},g.sc=function(t){return this.e()?t.e()?0:-1:t.J()||t.e()?1:t===qc?-1:0},g.nb=function(t){if(t===tc||Pa(this.yb.cc,t.toString()))return this;var e=this.yb,n=this.k;D(t!==tc,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r=[],i=!1,n=n.Wb(qb),o=M(n);o;)i=i||t.xc(o.R),r.push(o),o=M(n);return r=i?zc(r,nc(t)):mc,i=t.toString(),n=Ta(e.cc),n[i]=t,t=Ta(e.od),t[i]=r,new O(this.k,this.aa,new xc(t,n))},g.yc=function(t){return t===tc||Pa(this.yb.cc,t.toString())},g.Z=function(t){if(t===this)return!0;if(t.J())return!1;if(this.C().Z(t.C())&&this.k.count()===t.k.count()){var e=this.Wb(H);t=t.Wb(H);for(var n=M(e),r=M(t);n&&r;){if(n.name!==r.name||!n.R.Z(r.R))return!1;n=M(e),r=M(t)}return null===n&&null===r}return!1},g.toString=function(){return x(this.H(!0))};var rd=Math.log(2),L=new O(new Zc(tb),null,Bc);la(ud,O),g=ud.prototype,g.sc=function(t){return t===this?0:1},g.Z=function(t){return t===this},g.C=function(){return this},g.Q=function(){return L},g.e=function(){return!1};var qc=new ud,oc=new C("[MIN_NAME]",L),vc=new C("[MAX_NAME]",qc),wd=new Zc(function(t,e){return t===e?0:t<e?-1:1});g=vd.prototype,g.e=function(){return null===this.value&&this.children.e()},g.subtree=function(t){if(t.e())return this;var e=this.children.get(K(t));return null!==e?e.subtree(N(t)):R},g.set=function(t,e){if(t.e())return new vd(e,this.children);var n=K(t),r=(this.children.get(n)||R).set(N(t),e),n=this.children.Oa(n,r);return new vd(this.value,n)},g.remove=function(t){if(t.e())return this.children.e()?R:new vd(null,this.children);var e=K(t),n=this.children.get(e);return n?(t=n.remove(N(t)),e=t.e()?this.children.remove(e):this.children.Oa(e,t),null===this.value&&e.e()?R:new vd(this.value,e)):this},g.get=function(t){if(t.e())return this.value;var e=this.children.get(K(t));return e?e.get(N(t)):null};var R=new vd(null);vd.prototype.toString=function(){var t={};return Hd(this,function(e,n){t[e.toString()]=n.toString()}),x(t)};var Kd=/[\[\].#$\/\u0000-\u001F\u007F]/,Ld=/[\[\].#$\u0000-\u001F\u007F]/;Gb.prototype.find=function(t){if(null!=this.B)return this.B.P(t);if(t.e()||null==this.k)return null;var e=K(t);return t=N(t),this.k.contains(e)?this.k.get(e).find(t):null},Gb.prototype.O=function(t){null!==this.k&&Hc(this.k,function(e,n){t(e,n)})},Zd.prototype.Mc=function(){return this.path.e()?new Zd(this.source,Q):new Zd(this.source,N(this.path))},Zd.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" listen_complete)"},ae.prototype.Mc=function(t){return this.path.e()?(t=this.children.subtree(new E(t)),t.e()?null:t.value?new ce(this.source,Q,t.value):new ae(this.source,Q,t)):(D(K(this.path)===t,"Can't get a merge for a child not on the path of the operation"),new ae(this.source,N(this.path),this.children))},ae.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},de.prototype.Mc=function(t){return this.path.e()?null!=this.Ob.value?(D(this.Ob.children.e(),"affectedTree should not have overlapping affected paths."),this):(t=this.Ob.subtree(new E(t)),new de(Q,t,this.Id)):(D(K(this.path)===t,"operationForChild called for unrelated child."),new de(N(this.path),this.Ob,this.Id))},de.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" ack write revert="+this.Id+" affectedTree="+this.Ob+")"},ce.prototype.Mc=function(t){return this.path.e()?new ce(this.source,Q,this.Ga.Q(t)):new ce(this.source,N(this.path),this.Ga)},ce.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" overwrite: "+this.Ga.toString()+")"};var ge=0,be=1,ee=2,$d=3,fe=new he(!0,!1,null,!1),ie=new he(!1,!0,null,!1);he.prototype.toString=function(){return this.ee?"user":this.Ee?"server(queryID="+this.Hb+")":"server"},je.prototype.j=function(){return this.A},oe.prototype.w=function(){return this.Ld},se.prototype.Te=function(){return null},se.prototype.fe=function(){return null};var te=new se;ue.prototype.Te=function(t){var e=this.Ka.N;return ne(e,t)?e.j().Q(t):(e=null!=this.yd?new je(this.yd,!0,!1):this.Ka.w(),this.xf.qc(t,e))},ue.prototype.fe=function(t,e,n){var r=null!=this.yd?this.yd:re(this.Ka);return t=this.xf.Xd(r,e,1,n,t),0===t.length?null:t[0]},we.prototype.eb=function(t,e,n,r){var i,o=new xe;if(e.type===ge)e.source.ee?n=ye(this,t,e.path,e.Ga,n,r,o):(D(e.source.Se,"Unknown source."),i=e.source.Ee||le(t.w())&&!e.path.e(),n=ze(this,t,e.path,e.Ga,n,r,i,o));else if(e.type===be)e.source.ee?n=Ae(this,t,e.path,e.children,n,r,o):(D(e.source.Se,"Unknown source."),i=e.source.Ee||le(t.w()),n=Be(this,t,e.path,e.children,n,r,i,o));else if(e.type===ee)if(e.Id)if(e=e.path,null!=n.lc(e))n=t;else{if(i=new ue(n,t,r),r=t.N.j(),e.e()||".priority"===K(e))ke(t.w())?e=n.Aa(re(t)):(e=t.w().j(),D(e instanceof O,"serverChildren would be complete if leaf node"),e=n.rc(e)),e=this.U.ya(r,e,o);else{var a=K(e),s=n.qc(a,t.w());null==s&&ne(t.w(),a)&&(s=r.Q(a)),e=null!=s?this.U.F(r,a,s,N(e),i,o):t.N.j().Da(a)?this.U.F(r,a,L,N(e),i,o):r,e.e()&&ke(t.w())&&(r=n.Aa(re(t)),r.J()&&(e=this.U.ya(e,r,o)))}r=ke(t.w())||null!=n.lc(Q),n=pe(t,e,r,this.U.Na())}else n=Ce(this,t,e.path,e.Ob,n,r,o);else{if(e.type!==$d)throw Mb("Unknown operation type: "+e.type);r=e.path,e=t.w(),i=e.j(),a=e.da||r.e(),n=De(this,new oe(t.N,new je(i,a,e.Sb)),r,n,te,o)}return o=Na(o.fb),r=n,e=r.N,e.da&&(i=e.j().J()||e.j().e(),a=qe(t),(0<o.length||!t.N.da||i&&!e.j().Z(a)||!e.j().C().Z(a.C()))&&o.push(Ee(qe(r)))),new ve(n,o)},Ge.prototype.Ff=function(t,e){if(null==t.Xa||null==e.Xa)throw Mb("Should only compare child_ events.");return this.g.compare(new C(t.Xa,t.Ja),new C(e.Xa,e.Ja))},g=Pe.prototype,g.w=function(){return this.Ka.w().j()},g.hb=function(t){var e=re(this.Ka);return e&&(T(this.V.m)||!t.e()&&!e.Q(K(t)).e())?e.P(t):null},g.e=function(){return 0===this.Za.length},g.Nb=function(t){this.Za.push(t)},g.kb=function(t,e){var n=[];if(e){D(null==t,"A cancel should cancel all event registrations.");var r=this.V.path;ya(this.Za,function(t){(t=t.Me(e,r))&&n.push(t)})}if(t){for(var i=[],o=0;o<this.Za.length;++o){var a=this.Za[o];if(a.matches(t)){if(t.Xe()){i=i.concat(this.Za.slice(o+1));break}}else i.push(a)}this.Za=i}else this.Za=[];return n},g.eb=function(t,e,n){t.type===be&&null!==t.source.Hb&&(D(re(this.Ka),"We should always have a full cache before handling merges"),D(qe(this.Ka),"Missing event cache, even though we have a server cache"));var r=this.Ka;return t=this.hf.eb(r,t,e,n),e=this.hf,n=t.Sd,D(n.N.j().yc(e.U.g),"Event snap not indexed"),D(n.w().j().yc(e.U.g),"Server snap not indexed"),D(ke(t.Sd.w())||!ke(r.w()),"Once a server snap is complete, it should never go back"),this.Ka=t.Sd,Ue(this,t.Df,t.Sd.N.j(),null)},We.prototype.Yb=function(){var t=this.Md.wb();return"value"===this.hd?t.path:t.getParent().path},We.prototype.ge=function(){return this.hd},We.prototype.Tb=function(){return this.ae.Tb(this)},We.prototype.toString=function(){return this.Yb().toString()+":"+this.hd+":"+x(this.Md.be())},Xe.prototype.Yb=function(){return this.path},Xe.prototype.ge=function(){return"cancel"},Xe.prototype.Tb=function(){return this.ae.Tb(this)},Xe.prototype.toString=function(){return this.path.toString()+":cancel"},$e.prototype.add=function(t){this.jd.push(t)},$e.prototype.Yb=function(){return this.qa},g=Qe.prototype,g.F=function(t,e,n,r,i,o){return D(t.yc(this.g),"A node must be indexed if only a child is updated"),i=t.Q(e),i.P(r).Z(n.P(r))&&i.e()==n.e()?t:(null!=o&&(n.e()?t.Da(e)?df(o,new S(Le,i,e)):D(t.J(),"A child remove without an old child only makes sense on a leaf node"):i.e()?df(o,new S(Me,n,e)):df(o,new S(Ie,n,e,i))),t.J()&&n.e()?t:t.T(e,n).nb(this.g))},g.ya=function(t,e,n){return null!=n&&(t.J()||t.O(H,function(t,r){e.Da(t)||df(n,new S(Le,r,t))}),e.J()||e.O(H,function(e,r){if(t.Da(e)){var i=t.Q(e);i.Z(r)||df(n,new S(Ie,r,e,i))}else df(n,new S(Me,r,e))})),e.nb(this.g)},g.fa=function(t,e){return t.e()?L:t.fa(e)},g.Na=function(){return!1},g.Ub=function(){return this},g=Se.prototype,g.matches=function(t){return 0>=this.g.compare(this.Uc,t)&&0>=this.g.compare(t,this.vc)},g.F=function(t,e,n,r,i,o){return this.matches(new C(e,n))||(n=L),this.he.F(t,e,n,r,i,o)},g.ya=function(t,e,n){e.J()&&(e=L);var r=e.nb(this.g),r=r.fa(L),i=this;return e.O(H,function(t,e){i.matches(new C(t,e))||(r=r.T(t,L))}),this.he.ya(t,r,n)},g.fa=function(t){return t},g.Na=function(){return!0},g.Ub=function(){return this.he},g=Re.prototype,g.F=function(t,e,n,r,i,o){return this.sa.matches(new C(e,n))||(n=L),t.Q(e).Z(n)?t:t.Eb()<this.oa?this.sa.Ub().F(t,e,n,r,i,o):kf(this,t,e,n,i,o)},g.ya=function(t,e,n){var r;if(e.J()||e.e())r=L.nb(this.g);else if(2*this.oa<e.Eb()&&e.yc(this.g)){r=L.nb(this.g),e=this.Ib?e.Zb(this.sa.vc,this.g):e.Xb(this.sa.Uc,this.g);for(var i=0;0<e.Pa.length&&i<this.oa;){var o=M(e);if(!(this.Ib?0>=this.g.compare(this.sa.Uc,o):0>=this.g.compare(o,this.sa.vc)))break;r=r.T(o.name,o.R),i++}}else{r=e.nb(this.g),r=r.fa(L);var a,s,u;if(this.Ib){e=r.We(this.g),a=this.sa.vc,s=this.sa.Uc;var c=nc(this.g);u=function(t,e){return c(e,t)}}else e=r.Wb(this.g),a=this.sa.Uc,s=this.sa.vc,u=nc(this.g);for(var i=0,h=!1;0<e.Pa.length;)o=M(e),!h&&0>=u(a,o)&&(h=!0),h&&i<this.oa&&0>=u(o,s)?i++:r=r.T(o.name,L)}return this.sa.Ub().ya(t,r,n)},g.fa=function(t){return t},g.Na=function(){return!0},g.Ub=function(){return this.sa.Ub()};var Me="child_added",Le="child_removed",Ie="child_changed",Je="child_moved",Ne="value",mf=new lf;g=lf.prototype,g.ne=function(t){var e=nf(this);return e.xa=!0,e.oa=t,e.mb="l",e},g.oe=function(t){var e=nf(this);return e.xa=!0,e.oa=t,e.mb="r",e},g.Nd=function(t,e){var r=nf(this);return r.ka=!0,n(t)||(t=null),r.dc=t,null!=e?(r.Kb=!0,r.zb=e):(r.Kb=!1,r.zb=""),r},g.gd=function(t,e){var r=nf(this);return r.na=!0,n(t)||(t=null),r.ac=t,n(e)?(r.Rb=!0,r.xb=e):(r.vg=!1,r.xb=""),r},g.toString=function(){return x(pf(this))};var tf=new sf(new vd(null));sf.prototype.Ed=function(t){return t.e()?tf:(t=Ad(this.W,t,R),new sf(t))},sf.prototype.e=function(){return this.W.e()},sf.prototype.apply=function(t){return zf(Q,this.W,t)},Af.prototype.j=function(t){return this.Jd.P(t)},Af.prototype.toString=function(){return this.Jd.toString()},Bf.prototype.getToken=function(t){return this.oc.INTERNAL.getToken(t).then(null,function(t){return t&&"auth/token-not-initialized"===t.code?(I("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(t)})},g=Df.prototype,g.Ed=function(t){var e=Ea(this.la,function(e){return e.Zc===t});D(0<=e,"removeWrite called with nonexistent writeId.");var n=this.la[e];this.la.splice(e,1);for(var r=n.visible,i=!1,o=this.la.length-1;r&&0<=o;){var a=this.la[o];a.visible&&(o>=e&&Ff(a,n.path)?r=!1:n.path.contains(a.path)&&(i=!0)),o--}if(r){if(i)this.S=Gf(this.la,Hf,Q),this.Bc=0<this.la.length?this.la[this.la.length-1].Zc:-1;else if(n.Ga)this.S=this.S.Ed(n.path);else{var s=this;v(n.children,function(t,e){s.S=s.S.Ed(n.path.n(e))})}return!0}return!1},g.Aa=function(t,e,n,r){if(n||r){var i=yf(this.S,t);return!r&&i.e()?e:r||null!=e||null!=wf(i,Q)?(i=Gf(this.la,function(e){return(e.visible||r)&&(!n||!(0<=xa(n,e.Zc)))&&(e.path.contains(t)||t.contains(e.path))},t),e=e||L,i.apply(e)):null}return null!=(i=wf(this.S,t))?i:(i=yf(this.S,t),i.e()?e:null!=e||null!=wf(i,Q)?(e=e||L,i.apply(e)):null)},g.rc=function(t,e){var n=L,r=wf(this.S,t);if(r)r.J()||r.O(H,function(t,e){n=n.T(t,e)});else if(e){var i=yf(this.S,t);e.O(H,function(t,e){var r=yf(i,new E(t)).apply(e);n=n.T(t,r)}),ya(xf(i),function(t){n=n.T(t.name,t.R)})}else i=yf(this.S,t),ya(xf(i),function(t){n=n.T(t.name,t.R)});return n},g.ad=function(t,e,n,r){return D(n||r,"Either existingEventSnap or existingServerSnap must exist"),t=t.n(e),null!=wf(this.S,t)?null:(t=yf(this.S,t),t.e()?r.P(e):t.apply(r.P(e)))},g.qc=function(t,e,n){t=t.n(e);var r=wf(this.S,t);return null!=r?r:ne(n,e)?yf(this.S,t).apply(n.j().Q(e)):null},g.lc=function(t){return wf(this.S,t)},g.Xd=function(t,e,n,r,i,o){var a;if(t=yf(this.S,t),null==(a=wf(t,Q))){if(null==e)return[];a=t.apply(e)}if(a=a.nb(o),a.e()||a.J())return[];for(e=[],t=nc(o),i=i?a.Zb(n,o):a.Xb(n,o),o=M(i);o&&e.length<r;)0!==t(o,n)&&e.push(o),o=M(i);return e},g=If.prototype,g.Aa=function(t,e,n){return this.W.Aa(this.Lb,t,e,n)},g.rc=function(t){return this.W.rc(this.Lb,t)},g.ad=function(t,e,n){return this.W.ad(this.Lb,t,e,n)},g.lc=function(t){return this.W.lc(this.Lb.n(t))},g.Xd=function(t,e,n,r,i){return this.W.Xd(this.Lb,t,e,n,r,i)},g.qc=function(t,e){return this.W.qc(this.Lb,t,e)},g.n=function(t){return new If(this.Lb.n(t),this.W)},Jf.prototype.lf=function(){var t,e=this.Vc.get(),n={},r=!1;for(t in e)0<e[t]&&eb(this.rf,t)&&(n[t]=e[t],r=!0);r&&this.va.ye(n),hc(q(this.lf,this),Math.floor(6e5*Math.random()))},Lf.prototype.get=function(){return Ta(this.tc)},Kf.prototype.get=function(){var t=this.Ef.get(),e=Ta(t);if(this.rd)for(var n in this.rd)e[n]-=this.rd[n];return this.rd=t,e};var Nf={},Of={};g=Rf.prototype,g.$e=function(t,e,n,r){var i=t.path.toString();this.f("Listen called for "+i+" "+t.ja());var o=Sf(t,n),a={};this.$[o]=a,t=rf(t.m);var s=this;Tf(this,i+".json",t,function(t,e){var u=e;404===t&&(t=u=null),null===t&&s.Gb(i,u,!1,n),w(s.$,o)===a&&r(t?401==t?"permission_denied":"rest_error:"+t:"ok",null)})},g.uf=function(t,e){var n=Sf(t,e);delete this.$[n]},g.kf=function(){},g.re=function(){},g.cf=function(){},g.xd=function(){},g.put=function(){},g.af=function(){},g.ye=function(){};var Cb="websocket",Db="long_polling",Xf=null;"undefined"!=typeof MozWebSocket?Xf=MozWebSocket:"undefined"!=typeof WebSocket&&(Xf=WebSocket);var Zf;Yf.prototype.open=function(t,e){this.ib=e,this.Xf=t,this.f("Websocket connecting to "+this.Ke),this.wc=!1,xb.set("previous_websocket_failure",!0);try{this.Ia=new Xf(this.Ke)}catch(t){this.f("Error instantiating WebSocket.");var n=t.message||t.data;return n&&this.f(n),void this.bb()}var r=this;this.Ia.onopen=function(){r.f("Websocket connected."),r.wc=!0},this.Ia.onclose=function(){r.f("Websocket connection was disconnected."),r.Ia=null,r.bb()},this.Ia.onmessage=function(t){if(null!==r.Ia)if(t=t.data,r.pb+=t.length,Mf(r.Va,"bytes_received",t.length),$f(r),null!==r.frames)ag(r,t);else{t:{if(D(null===r.frames,"We already have a frame buffer"),6>=t.length){var e=Number(t);if(!isNaN(e)){r.Fe=e,r.frames=[],t=null;break t}}r.Fe=1,r.frames=[]}null!==t&&ag(r,t)}},this.Ia.onerror=function(t){r.f("WebSocket error.  Closing connection."),(t=t.message||t.data)&&r.f(t),r.bb()}},Yf.prototype.start=function(){},Yf.isAvailable=function(){var t=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var e=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);e&&1<e.length&&4.4>parseFloat(e[1])&&(t=!0)}return!t&&null!==Xf&&!Zf},Yf.responsesRequiredToBeHealthy=2,Yf.healthyTimeout=3e4,g=Yf.prototype,g.sd=function(){xb.remove("previous_websocket_failure")},g.send=function(t){$f(this),t=x(t),this.qb+=t.length,Mf(this.Va,"bytes_sent",t.length),t=bc(t,16384),1<t.length&&bg(this,String(t.length));for(var e=0;e<t.length;e++)bg(this,t[e])},g.Tc=function(){this.Ab=!0,this.zc&&(clearInterval(this.zc),this.zc=null),this.Ia&&(this.Ia.close(),this.Ia=null)},g.bb=function(){this.Ab||(this.f("WebSocket is closing itself"),this.Tc(),this.ib&&(this.ib(this.wc),this.ib=null))},g.close=function(){this.Ab||(this.f("WebSocket is being closed"),this.Tc())};var dg,eg;cg.prototype.open=function(t,e){this.Ne=0,this.ia=e,this.bf=new Uf(t),this.Ab=!1;var n=this;this.sb=setTimeout(function(){n.f("Timed out trying to connect."),n.bb(),n.sb=null},Math.floor(3e4)),Yb(function(){if(!n.Ab){n.Ta=new fg(function(t,e,r,i,o){if(gg(n,arguments),n.Ta)if(n.sb&&(clearTimeout(n.sb),n.sb=null),n.wc=!0,"start"==t)n.id=e,n.ff=r;else{if("close"!==t)throw Error("Unrecognized command received: "+t);e?(n.Ta.Kd=!1,Vf(n.bf,e,function(){n.bb()})):n.bb()}},function(t,e){gg(n,arguments),Wf(n.bf,t,e)},function(){n.bb()},n.Yc);var t={start:"t"};t.ser=Math.floor(1e8*Math.random()),n.Ta.Qd&&(t.cb=n.Ta.Qd),t.v="5",n.tf&&(t.s=n.tf),n.Cb&&(t.ls=n.Cb),"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(t.r="f"),t=n.Yc(t),n.f("Connecting via long-poll to "+t),hg(n.Ta,t,function(){})}})},cg.prototype.start=function(){var t=this.Ta,e=this.ff;for(t.Vf=this.id,t.Wf=e,t.Ud=!0;ig(t););t=this.id,e=this.ff,this.fc=document.createElement("iframe");var n={dframe:"t"};n.id=t,n.pw=e,this.fc.src=this.Yc(n),this.fc.style.display="none",document.body.appendChild(this.fc)},cg.isAvailable=function(){return dg||!eg&&"undefined"!=typeof document&&null!=document.createElement&&!("object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"==typeof Windows&&"object"==typeof Windows.rg)&&!0},g=cg.prototype,g.sd=function(){},g.Tc=function(){this.Ab=!0,this.Ta&&(this.Ta.close(),this.Ta=null),this.fc&&(document.body.removeChild(this.fc),this.fc=null),this.sb&&(clearTimeout(this.sb),this.sb=null)},g.bb=function(){this.Ab||(this.f("Longpoll is closing itself"),this.Tc(),this.ia&&(this.ia(this.wc),this.ia=null))},g.close=function(){this.Ab||(this.f("Longpoll is being closed."),this.Tc())},g.send=function(t){t=x(t),this.qb+=t.length,Mf(this.Va,"bytes_sent",t.length),t=mb(t),t=ab(t,!0),t=bc(t,1840);for(var e=0;e<t.length;e++){var n=this.Ta;n.Qc.push({jg:this.Ne,pg:t.length,Pe:t[e]}),n.Ud&&ig(n),this.Ne++}},fg.prototype.close=function(){if(this.Ud=!1,this.Ea){this.Ea.gb.body.innerHTML="";var t=this;setTimeout(function(){null!==t.Ea&&(document.body.removeChild(t.Ea),t.Ea=null)},Math.floor(0))}var e=this.ib;e&&(this.ib=null,e())};var mg=[cg,Yf];og.prototype.ua=function(t){zg(this,{t:"d",d:t})},og.prototype.wd=function(t){wg(this),this.te(t)},og.prototype.close=function(){2!==this.Ua&&(this.f("Closing realtime connection."),this.Ua=2,vg(this),this.ia&&(this.ia(),this.ia=null))};var Bg=0,Dg=0;g=Ag.prototype,g.ua=function(t,e,n){var r=++this.ig;t={r:r,a:t,b:e},this.f(x(t)),D(this.ma,"sendRequest call when we're not connected not allowed."),this.Fa.ua(t),n&&(this.Gd[r]=n)},g.$e=function(t,e,n,r){var i=t.ja(),o=t.path.toString();this.f("Listen called for "+o+" "+i),this.$[o]=this.$[o]||{},D(qf(t.m)||!T(t.m),"listen() called for non-default but complete query"),D(!this.$[o][i],"listen() called twice for same path/queryId."),t={G:r,ld:e,eg:t,tag:n},this.$[o][i]=t,this.ma&&Eg(this,t)},g.kf=function(t){this.ob=t,this.f("Auth token refreshed"),this.ob?Gg(this):this.ma&&this.ua("unauth",{},function(){}),(t&&40===t.length||kc(t))&&(this.f("Admin auth credential detected.  Reducing max reconnect time."),this.td=3e4)},g.uf=function(t,e){var n=t.path.toString(),r=t.ja();if(this.f("Unlisten called for "+n+" "+r),D(qf(t.m)||!T(t.m),"unlisten() called for non-default but complete query"),Fg(this,n,r)&&this.ma){var i=pf(t.m);this.f("Unlisten on "+n+" for "+r),n={p:n},e&&(n.q=i,n.t=e),this.ua("n",n)}},g.re=function(t,e,n){this.ma?Ig(this,"o",t,e,n):this.Kc.push({we:t,action:"o",data:e,G:n})},g.cf=function(t,e,n){this.ma?Ig(this,"om",t,e,n):this.Kc.push({we:t,action:"om",data:e,G:n})},g.xd=function(t,e){this.ma?Ig(this,"oc",t,null,e):this.Kc.push({we:t,action:"oc",data:null,G:e})},g.put=function(t,e,n,r){Jg(this,"p",t,e,n,r)},g.af=function(t,e,n,r){Jg(this,"m",t,e,n,r)},g.ye=function(t){this.ma&&(t={c:t},this.f("reportStats",t),this.ua("s",t,function(t){"ok"!==t.s&&this.f("reportStats","Error sending stats: "+t.d)}))},g.wd=function(t){if("r"in t){this.f("from server: "+x(t));var e=t.r,n=this.Gd[e];n&&(delete this.Gd[e],n(t.b))}else{if("error"in t)throw"A server-side error has occurred: "+t.error;"a"in t&&(e=t.a,t=t.b,this.f("handleServerMessage",e,t),"d"===e?this.Gb(t.p,t.d,!1,t.t):"m"===e?this.Gb(t.p,t.d,!0,t.t):"c"===e?Lg(this,t.p,t.q):"ac"===e?Hg(this,t.s,t.d):"sd"===e?this.ze?this.ze(t):"msg"in t&&"undefined"!=typeof console&&console.log("FIREBASE: "+t.msg.replace("\n","\nFIREBASE: ")):Ub("Unrecognized action received from server: "+x(e)+"\nAre you using the latest client?"))}},g.Lc=function(t,e){if(this.f("connection ready"),this.ma=!0,this.Ac=(new Date).getTime(),this.ue({serverTimeOffset:t-(new Date).getTime()}),this.Cb=e,this.Re){var n={};n["sdk.js."+firebase.SDK_VERSION.replace(/\./g,"-")]=1,pb()?n["framework.cordova"]=1:"object"==typeof navigator&&"ReactNative"===navigator.product&&(n["framework.reactnative"]=1),this.ye(n)}Mg(this),this.Re=!1,this.Jc(!0)},g.Zf=function(t){t&&!this.Mb&&this.Sa===this.td&&(this.f("Window became visible.  Reducing delay."),this.Sa=1e3,this.Fa||Cg(this,0)),this.Mb=t},g.Yf=function(t){t?(this.f("Browser went online."),this.Sa=1e3,this.Fa||Cg(this,0)):(this.f("Browser went offline.  Killing connection."),this.Fa&&this.Fa.close())},g.df=function(){this.f("data client disconnected"),this.ma=!1,this.Fa=null;for(var t=0;t<this.pa.length;t++){var e=this.pa[t];e&&"h"in e.mf&&e.fg&&(e.G&&e.G("disconnect"),delete this.pa[t],this.Oc--)}0===this.Oc&&(this.pa=[]),this.Gd={},Og(this)&&(this.Mb?this.Ac&&(3e4<(new Date).getTime()-this.Ac&&(this.Sa=1e3),this.Ac=null):(this.f("Window isn't visible.  Delaying reconnect."),this.Sa=this.td,this.me=(new Date).getTime()),t=Math.max(0,this.Sa-((new Date).getTime()-this.me)),t*=Math.random(),this.f("Trying to reconnect in "+t+"ms"),Cg(this,t),this.Sa=Math.min(this.td,1.3*this.Sa)),this.Jc(!1)},g.ab=function(t){I("Interrupting connection for reason: "+t),this.qd[t]=!0,this.Fa?this.Fa.close():(this.ub&&(clearTimeout(this.ub),this.ub=null),this.ma&&this.df())},g.kc=function(t){I("Resuming connection for reason: "+t),delete this.qd[t],Sa(this.qd)&&(this.Sa=1e3,this.Fa||Cg(this,0))};var Sg={TIMESTAMP:{".sv":"timestamp"}};g=Pg.prototype,g.app=null,g.jf=function(t){return Tg(this,"ref"),y("database.ref",0,1,arguments.length),n(t)?this.ba.n(t):this.ba},g.gg=function(t){Tg(this,"database.refFromURL"),y("database.refFromURL",1,1,arguments.length);var e=Wb(t);Xd("database.refFromURL",e);var n=e.jc;return n.host!==this.ta.L.host&&Vb("database.refFromURL: Host name does not match the current database: (found "+n.host+" but expected "+this.ta.L.host+")"),this.jf(e.path.toString())},g.Pf=function(){y("database.goOffline",0,0,arguments.length),Tg(this,"goOffline"),this.ta.ab()},g.Qf=function(){y("database.goOnline",0,0,arguments.length),Tg(this,"goOnline"),this.ta.kc()},Object.defineProperty(Pg.prototype,"app",{get:function(){return this.ta.app}}),Rg.prototype.delete=function(){Tg(this.Ya,"delete");var t=Ug.Vb(),e=this.Ya.ta;return w(t.lb,e.app.name)!==e&&Vb("Database "+e.app.name+" has already been deleted."),e.ab(),delete t.lb[e.app.name],this.Ya.ta=null,this.Ya.ba=null,this.Ya=this.Ya.INTERNAL=null,firebase.Promise.resolve()},Pg.prototype.ref=Pg.prototype.jf,Pg.prototype.refFromURL=Pg.prototype.gg,Pg.prototype.goOnline=Pg.prototype.Qf,Pg.prototype.goOffline=Pg.prototype.Pf,Rg.prototype.delete=Rg.prototype.delete,V.prototype.H=function(){return y("Firebase.DataSnapshot.val",0,0,arguments.length),this.A.H()},V.prototype.val=V.prototype.H,V.prototype.be=function(){return y("Firebase.DataSnapshot.exportVal",0,0,arguments.length),this.A.H(!0)},V.prototype.exportVal=V.prototype.be,V.prototype.toJSON=function(){return y("Firebase.DataSnapshot.toJSON",0,1,arguments.length),this.be()},V.prototype.toJSON=V.prototype.toJSON,V.prototype.Lf=function(){return y("Firebase.DataSnapshot.exists",0,0,arguments.length),!this.A.e()},V.prototype.exists=V.prototype.Lf,V.prototype.n=function(t){y("Firebase.DataSnapshot.child",0,1,arguments.length),ga(t)&&(t=String(t)),Vd("Firebase.DataSnapshot.child",t);var e=new E(t),n=this.V.n(e);return new V(this.A.P(e),n,H)},V.prototype.child=V.prototype.n,V.prototype.Da=function(t){y("Firebase.DataSnapshot.hasChild",1,1,arguments.length),Vd("Firebase.DataSnapshot.hasChild",t);var e=new E(t);return!this.A.P(e).e()},V.prototype.hasChild=V.prototype.Da,V.prototype.C=function(){return y("Firebase.DataSnapshot.getPriority",0,0,arguments.length),this.A.C().H()},V.prototype.getPriority=V.prototype.C,V.prototype.forEach=function(t){if(y("Firebase.DataSnapshot.forEach",1,1,arguments.length),B("Firebase.DataSnapshot.forEach",1,t,!1),this.A.J())return!1;var e=this;return!!this.A.O(this.g,function(n,r){return t(new V(r,e.V.n(n),H))})},V.prototype.forEach=V.prototype.forEach,V.prototype.kd=function(){return y("Firebase.DataSnapshot.hasChildren",0,0,arguments.length),!this.A.J()&&!this.A.e()},V.prototype.hasChildren=V.prototype.kd,V.prototype.getKey=function(){return y("Firebase.DataSnapshot.key",0,0,arguments.length),this.V.getKey()},gc(V.prototype,"key",V.prototype.getKey),V.prototype.Eb=function(){return y("Firebase.DataSnapshot.numChildren",0,0,arguments.length),this.A.Eb()},V.prototype.numChildren=V.prototype.Eb,V.prototype.wb=function(){return y("Firebase.DataSnapshot.ref",0,0,arguments.length),this.V},gc(V.prototype,"ref",V.prototype.wb),g=Vg.prototype,g.nf=function(t){return"value"===t},g.createEvent=function(t,e){var n=e.m.g;return new We("value",this,new V(t.Ja,e.wb(),n))},g.Tb=function(t){var e=this.tb;if("cancel"===t.ge()){D(this.rb,"Raising a cancel event on a listener with no cancel callback");var n=this.rb;return function(){n.call(e,t.error)}}var r=this.Pb;return function(){r.call(e,t.Md)}},g.Me=function(t,e){return this.rb?new Xe(this,t,e):null},g.matches=function(t){return t instanceof Vg&&(!t.Pb||!this.Pb||t.Pb===this.Pb&&t.tb===this.tb)},g.Xe=function(){return null!==this.Pb},g=Wg.prototype,g.nf=function(t){return t="children_added"===t?"child_added":t,("children_removed"===t?"child_removed":t)in this.ga},g.Me=function(t,e){return this.rb?new Xe(this,t,e):null},g.createEvent=function(t,e){D(null!=t.Xa,"Child events should have a childName.");var n=e.wb().n(t.Xa);return new We(t.type,this,new V(t.Ja,n,e.m.g),t.Dd)},g.Tb=function(t){var e=this.tb;if("cancel"===t.ge()){D(this.rb,"Raising a cancel event on a listener with no cancel callback");var n=this.rb;return function(){n.call(e,t.error)}}var r=this.ga[t.hd];return function(){r.call(e,t.Md,t.Dd)}},g.matches=function(t){if(t instanceof Wg){if(!this.ga||!t.ga)return!0;if(this.tb===t.tb){var e=La(t.ga);if(e===La(this.ga)){if(1===e){var e=Ma(t.ga),n=Ma(this.ga);return!(n!==e||t.ga[e]&&this.ga[n]&&t.ga[e]!==this.ga[n])}return Ka(this.ga,function(e,n){return t.ga[n]===e})}}}return!1},g.Xe=function(){return null!==this.ga},g=Xg.prototype,g.e=function(){return Sa(this.za)},g.eb=function(t,e,n){var r=t.source.Hb;if(null!==r)return r=w(this.za,r),D(null!=r,"SyncTree gave us an op for an invalid query."),r.eb(t,e,n);var i=[];return v(this.za,function(r){i=i.concat(r.eb(t,e,n))}),i},g.Nb=function(t,e,n,r,i){var o=t.ja(),a=w(this.za,o);if(!a){var a=n.Aa(i?r:null),s=!1;a?s=!0:(a=r instanceof O?n.rc(r):L,s=!1),a=new Pe(t,new oe(new je(a,s,!1),new je(r,i,!1))),this.za[o]=a}return a.Nb(e),Ve(a,e)},g.kb=function(t,e,n){var r=t.ja(),i=[],o=[],a=null!=Yg(this);if("default"===r){var s=this;v(this.za,function(t,r){o=o.concat(t.kb(e,n)),t.e()&&(delete s.za[r],T(t.V.m)||i.push(t.V))})}else{var u=w(this.za,r);u&&(o=o.concat(u.kb(e,n)),u.e()&&(delete this.za[r],T(u.V.m)||i.push(u.V)))}return a&&null==Yg(this)&&i.push(new U(t.u,t.path)),{hg:i,Kf:o}},g.hb=function(t){var e=null;return v(this.za,function(n){e=e||n.hb(t)}),e},ah.prototype.Nb=function(t,e){var n=t.path,r=null,i=!1;Fd(this.wa,n,function(t,e){var o=P(t,n);r=r||e.hb(o),i=i||null!=Yg(e)});var o=this.wa.get(n);o?(i=i||null!=Yg(o),r=r||o.hb(Q)):(o=new Xg,this.wa=this.wa.set(n,o));var a;null!=r?a=!0:(a=!1,r=L,Jd(this.wa.subtree(n),function(t,e){var n=e.hb(Q);n&&(r=r.T(t,n))}));var s=null!=$g(o,t);if(!s&&!T(t.m)){var u=lh(t);D(!(u in this.ic),"View does not exist, but we have a tag");var c=mh++;this.ic[u]=c,this.De["_"+c]=u}return a=o.Nb(t,e,new If(n,this.jb),r,a),s||i||(o=$g(o,t),a=a.concat(nh(this,t,o))),a},ah.prototype.kb=function(t,e,n){var r=t.path,i=this.wa.get(r),o=[];if(i&&("default"===t.ja()||null!=$g(i,t))){o=i.kb(t,e,n),i.e()&&(this.wa=this.wa.remove(r)),i=o.hg,o=o.Kf,e=-1!==Ea(i,function(t){return T(t.m)});var a=Dd(this.wa,r,function(t,e){return null!=Yg(e)});if(e&&!a&&(r=this.wa.subtree(r),!r.e()))for(var r=oh(r),s=0;s<r.length;++s){var u=r[s],c=u.V,u=ph(this,u);this.Cc.Ae(qh(c),rh(this,c),u.ld,u.G)}if(!a&&0<i.length&&!n)if(e)this.Cc.Od(qh(t),null);else{var h=this;ya(i,function(t){t.ja();var e=h.ic[lh(t)];h.Cc.Od(qh(t),e)})}sh(this,i)}return o},ah.prototype.Aa=function(t,e){var n=this.jb,r=Dd(this.wa,t,function(e,n){var r=P(e,t);if(r=n.hb(r))return r});return n.Aa(t,r,e,!0)};var mh=1;g=Qg.prototype,g.toString=function(){return(this.L.Sc?"https://":"http://")+this.L.host},g.name=function(){return this.L.pe},g.Gb=function(t,e,n,r){this.fd++;var i=new E(t);e=this.je?this.je(t,e):e,t=[],r?n?(e=Ja(e,function(t){return G(t)}),t=kh(this.K,i,e,r)):(e=G(e),t=gh(this.K,i,e,r)):n?(r=Ja(e,function(t){return G(t)}),t=fh(this.K,i,r)):(r=G(e),t=ch(this.K,new ce(ie,i,r))),r=i,0<t.length&&(r=yh(this,i)),cf(this.ca,r,t)},g.Jc=function(t){vh(this,"connected",t),!1===t&&zh(this)},g.ue=function(t){var e=this;cc(t,function(t,n){vh(e,n,t)})},g.Jb=function(t,e,n,r){this.f("set",{path:t.toString(),value:e,ug:n});var i=xh(this);e=G(e,n);var i=Jb(e,i),o=this.vd++,i=bh(this.K,t,i,o,!0);Ze(this.ca,i);var a=this;this.va.put(t.toString(),e.H(!0),function(e,n){var i="ok"===e;i||J("set at "+t+" failed: "+e),i=eh(a.K,o,!i),cf(a.ca,t,i),Ah(r,e,n)}),i=Bh(this,t),yh(this,i),cf(this.ca,i,[])},g.update=function(t,e,n){this.f("update",{path:t.toString(),value:e});var r=!0,i=xh(this),o={};if(v(e,function(t,e){r=!1;var n=G(t);o[e]=Jb(n,i)}),r)I("update() called with empty data.  Don't do anything."),Ah(n,"ok");else{var a=this.vd++,s=dh(this.K,t,o,a);Ze(this.ca,s);var u=this;this.va.af(t.toString(),e,function(e,r){var i="ok"===e;i||J("update at "+t+" failed: "+e);var i=eh(u.K,a,!i),o=t;0<i.length&&(o=yh(u,t)),cf(u.ca,o,i),Ah(n,e,r)}),v(e,function(e,n){var r=Bh(u,t.n(n));yh(u,r)}),cf(this.ca,t,[])}},g.xd=function(t,e){var n=this;this.va.xd(t.toString(),function(r,i){"ok"===r&&Yd(n.ia,t),Ah(e,r,i)})},g.ab=function(){this.Ra&&this.Ra.ab("repo_interrupt")},g.kc=function(){this.Ra&&this.Ra.kc("repo_interrupt")},g.Be=function(t){if("undefined"!=typeof console){t?(this.Vc||(this.Vc=new Kf(this.Va)),t=this.Vc.get()):t=this.Va.get();var e,n=Ba(Oa(t),function(t,e){return Math.max(e.length,t)},0);for(e in t){for(var r=t[e],i=e.length;i<n+2;i++)e+=" ";console.log(e+r)}}},g.Ce=function(t){Mf(this.Va,t),this.og.rf[t]=!0},g.f=function(t){var e="";this.Ra&&(e=this.Ra.id+":"),I(e,arguments)},Ug.prototype.ab=function(){for(var t in this.lb)this.lb[t].ab()},Ug.prototype.kc=function(){for(var t in this.lb)this.lb[t].kc()},Ug.prototype.ce=function(t){this.wf=t},ca(Ug),Ug.prototype.interrupt=Ug.prototype.ab,Ug.prototype.resume=Ug.prototype.kc;var W={};W.nc=Ag,W.DataConnection=W.nc,Ag.prototype.ng=function(t,e){this.ua("q",{p:t},e)},W.nc.prototype.simpleListen=W.nc.prototype.ng,Ag.prototype.Hf=function(t,e){this.ua("echo",{d:t},e)},W.nc.prototype.echo=W.nc.prototype.Hf,Ag.prototype.interrupt=Ag.prototype.ab,W.zf=og,W.RealTimeConnection=W.zf,og.prototype.sendRequest=og.prototype.ua,og.prototype.close=og.prototype.close,W.Rf=function(t){var e=Ag.prototype.put;return Ag.prototype.put=function(r,i,o,a){n(a)&&(a=t()),e.call(this,r,i,o,a)},function(){Ag.prototype.put=e}},W.hijackHash=W.Rf,W.yf=zb,W.ConnectionTarget=W.yf,W.ja=function(t){return t.ja()},W.queryIdentifier=W.ja,W.Uf=function(t){return t.u.Ra.$},W.listens=W.Uf,W.ce=function(t){Ug.Vb().ce(t)},W.forceRestClient=W.ce,W.Context=Ug,g=X.prototype,g.wb=function(){return y("Query.ref",0,0,arguments.length),new U(this.u,this.path)},g.gc=function(t,e,n,r){y("Query.on",2,4,arguments.length),Td("Query.on",t,!1),B("Query.on",2,e,!1);var i=Th("Query.on",n,r);if("value"===t)Fh(this.u,this,new Vg(e,i.cancel||null,i.Ma||null));else{var o={};o[t]=e,Fh(this.u,this,new Wg(o,i.cancel,i.Ma))}return e},g.Ic=function(t,e,n){y("Query.off",0,3,arguments.length),Td("Query.off",t,!0),B("Query.off",2,e,!0),ob("Query.off",3,n);var r=null,i=null;"value"===t?r=new Vg(e||null,null,n||null):t&&(e&&(i={},i[t]=e),r=new Wg(i,null,n||null)),i=this.u,r=".info"===K(this.path)?i.pd.kb(this,r):i.K.kb(this,r),af(i.ca,this.path,r)},g.$f=function(t,e){function n(s){o&&(o=!1,i.Ic(t,n),e&&e.call(r.Ma,s),a.resolve(s))}y("Query.once",1,4,arguments.length),Td("Query.once",t,!1),B("Query.once",2,e,!0);var r=Th("Query.once",arguments[2],arguments[3]),i=this,o=!0,a=new ib;return kb(a.ra),this.gc(t,n,function(e){i.Ic(t,n),r.cancel&&r.cancel.call(r.Ma,e),a.reject(e)}),a.ra},g.ne=function(t){if(y("Query.limitToFirst",1,1,arguments.length),!ga(t)||Math.floor(t)!==t||0>=t)throw Error("Query.limitToFirst: First argument must be a positive integer.");if(this.m.xa)throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u,this.path,this.m.ne(t),this.Nc)},g.oe=function(t){if(y("Query.limitToLast",1,1,arguments.length),!ga(t)||Math.floor(t)!==t||0>=t)throw Error("Query.limitToLast: First argument must be a positive integer.");if(this.m.xa)throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u,this.path,this.m.oe(t),this.Nc)},g.ag=function(t){if(y("Query.orderByChild",1,1,arguments.length),"$key"===t)throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===t)throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===t)throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');Vd("Query.orderByChild",t),Sh(this,"Query.orderByChild");var e=new E(t);if(e.e())throw Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");return e=new pc(e),e=of(this.m,e),Qh(e),new X(this.u,this.path,e,!0)},g.bg=function(){y("Query.orderByKey",0,0,arguments.length),Sh(this,"Query.orderByKey");var t=of(this.m,tc);return Qh(t),new X(this.u,this.path,t,!0)},g.cg=function(){y("Query.orderByPriority",0,0,arguments.length),Sh(this,"Query.orderByPriority");var t=of(this.m,H);return Qh(t),new X(this.u,this.path,t,!0)},g.dg=function(){y("Query.orderByValue",0,0,arguments.length),Sh(this,"Query.orderByValue");var t=of(this.m,wc);return Qh(t),new X(this.u,this.path,t,!0)},g.Nd=function(t,e){y("Query.startAt",0,2,arguments.length),Od("Query.startAt",t,this.path,!0),Ud("Query.startAt",e);var r=this.m.Nd(t,e);if(Rh(r),Qh(r),this.m.ka)throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return n(t)||(e=t=null),new X(this.u,this.path,r,this.Nc)},g.gd=function(t,e){y("Query.endAt",0,2,arguments.length),Od("Query.endAt",t,this.path,!0),Ud("Query.endAt",e);var n=this.m.gd(t,e);if(Rh(n),Qh(n),this.m.na)throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new X(this.u,this.path,n,this.Nc)},g.If=function(t,e){if(y("Query.equalTo",1,2,arguments.length),Od("Query.equalTo",t,this.path,!1),Ud("Query.equalTo",e),this.m.ka)throw Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.m.na)throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.Nd(t,e).gd(t,e)},g.toString=function(){y("Query.toString",0,0,arguments.length);for(var t=this.path,e="",n=t.Y;n<t.o.length;n++)""!==t.o[n]&&(e+="/"+encodeURIComponent(String(t.o[n])));return this.u.toString()+(e||"/")},g.toJSON=function(){return y("Query.toJSON",0,1,arguments.length),this.toString()},g.ja=function(){var t=ac(pf(this.m));return"{}"===t?"default":t},g.isEqual=function(t){if(y("Query.isEqual",1,1,arguments.length),!(t instanceof X))throw Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.");var e=this.u===t.u,n=this.path.Z(t.path),r=this.ja()===t.ja();return e&&n&&r},X.prototype.on=X.prototype.gc,X.prototype.off=X.prototype.Ic,X.prototype.once=X.prototype.$f,X.prototype.limitToFirst=X.prototype.ne,X.prototype.limitToLast=X.prototype.oe,X.prototype.orderByChild=X.prototype.ag,X.prototype.orderByKey=X.prototype.bg,X.prototype.orderByPriority=X.prototype.cg,X.prototype.orderByValue=X.prototype.dg,X.prototype.startAt=X.prototype.Nd,X.prototype.endAt=X.prototype.gd,X.prototype.equalTo=X.prototype.If,X.prototype.toString=X.prototype.toString,X.prototype.isEqual=X.prototype.isEqual,gc(X.prototype,"ref",X.prototype.wb),Y.prototype.cancel=function(t){y("Firebase.onDisconnect().cancel",0,1,arguments.length),B("Firebase.onDisconnect().cancel",1,t,!0);var e=new ib;return this.ta.xd(this.qa,jb(e,t)),e.ra},Y.prototype.cancel=Y.prototype.cancel,Y.prototype.remove=function(t){y("Firebase.onDisconnect().remove",0,1,arguments.length),Wd("Firebase.onDisconnect().remove",this.qa),B("Firebase.onDisconnect().remove",1,t,!0);var e=new ib;return Ch(this.ta,this.qa,null,jb(e,t)),e.ra},Y.prototype.remove=Y.prototype.remove,Y.prototype.set=function(t,e){y("Firebase.onDisconnect().set",1,2,arguments.length),Wd("Firebase.onDisconnect().set",this.qa),Od("Firebase.onDisconnect().set",t,this.qa,!1),B("Firebase.onDisconnect().set",2,e,!0);var n=new ib;return Ch(this.ta,this.qa,t,jb(n,e)),n.ra},Y.prototype.set=Y.prototype.set,Y.prototype.Jb=function(t,e,n){y("Firebase.onDisconnect().setWithPriority",2,3,arguments.length),Wd("Firebase.onDisconnect().setWithPriority",this.qa),Od("Firebase.onDisconnect().setWithPriority",t,this.qa,!1),Sd("Firebase.onDisconnect().setWithPriority",2,e),B("Firebase.onDisconnect().setWithPriority",3,n,!0);var r=new ib;return Dh(this.ta,this.qa,t,e,jb(r,n)),r.ra},Y.prototype.setWithPriority=Y.prototype.Jb,Y.prototype.update=function(t,e){if(y("Firebase.onDisconnect().update",1,2,arguments.length),Wd("Firebase.onDisconnect().update",this.qa),ea(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,J("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}return Rd("Firebase.onDisconnect().update",t,this.qa),B("Firebase.onDisconnect().update",2,e,!0),n=new ib,Eh(this.ta,this.qa,t,jb(n,e)),n.ra},Y.prototype.update=Y.prototype.update;var Z={Mf:function(){dg=Zf=!0}};if(Z.forceLongPolling=Z.Mf,Z.Nf=function(){eg=!0},Z.forceWebSockets=Z.Nf,Z.Tf=function(){return Yf.isAvailable()},Z.isWebSocketsAvailable=Z.Tf,Z.lg=function(t,e){t.u.Ra.ze=e},Z.setSecurityDebugCallback=Z.lg,Z.Be=function(t,e){t.u.Be(e)},Z.stats=Z.Be,Z.Ce=function(t,e){t.u.Ce(e)},Z.statsIncrementCounter=Z.Ce,Z.fd=function(t){return t.u.fd},Z.dataUpdateCount=Z.fd,Z.Sf=function(t,e){t.u.je=e},Z.interceptServerData=Z.Sf,la(U,X),g=U.prototype,g.getKey=function(){return y("Firebase.key",0,0,arguments.length),this.path.e()?null:Oc(this.path)},g.n=function(t){if(y("Firebase.child",1,1,arguments.length),ga(t))t=String(t);else if(!(t instanceof E))if(null===K(this.path)){var e=t;e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),Vd("Firebase.child",e)}else Vd("Firebase.child",t);return new U(this.u,this.path.n(t))},g.getParent=function(){y("Firebase.parent",0,0,arguments.length);var t=this.path.parent();return null===t?null:new U(this.u,t)},g.Of=function(){y("Firebase.ref",0,0,arguments.length);for(var t=this;null!==t.getParent();)t=t.getParent();return t},g.Gf=function(){return this.u.Ya},g.set=function(t,e){y("Firebase.set",1,2,arguments.length),Wd("Firebase.set",this.path),Od("Firebase.set",t,this.path,!1),B("Firebase.set",2,e,!0);var n=new ib;return this.u.Jb(this.path,t,null,jb(n,e)),n.ra},g.update=function(t,e){if(y("Firebase.update",1,2,arguments.length),Wd("Firebase.update",this.path),ea(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,J("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}return Rd("Firebase.update",t,this.path),B("Firebase.update",2,e,!0),n=new ib,this.u.update(this.path,t,jb(n,e)),n.ra},g.Jb=function(t,e,n){if(y("Firebase.setWithPriority",2,3,arguments.length),Wd("Firebase.setWithPriority",this.path),Od("Firebase.setWithPriority",t,this.path,!1),Sd("Firebase.setWithPriority",2,e),B("Firebase.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Firebase.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new ib;return this.u.Jb(this.path,t,e,jb(r,n)),r.ra},g.remove=function(t){return y("Firebase.remove",0,1,arguments.length),Wd("Firebase.remove",this.path),B("Firebase.remove",1,t,!0),this.set(null,t)},g.transaction=function(t,e,r){if(y("Firebase.transaction",1,3,arguments.length),Wd("Firebase.transaction",this.path),B("Firebase.transaction",1,t,!1),B("Firebase.transaction",2,e,!0),n(r)&&"boolean"!=typeof r)throw Error(A("Firebase.transaction",3,!0)+"must be a boolean.");if(".length"===this.getKey()||".keys"===this.getKey())throw"Firebase.transaction failed: "+this.getKey()+" is a read-only object.";void 0===r&&(r=!0);var i=new ib;return ha(e)&&kb(i.ra),Gh(this.u,this.path,t,function(t,n,r){t?i.reject(t):i.resolve(new Ph(n,r)),ha(e)&&e(t,n,r)},r),i.ra},g.kg=function(t,e){y("Firebase.setPriority",1,2,arguments.length),Wd("Firebase.setPriority",this.path),Sd("Firebase.setPriority",1,t),B("Firebase.setPriority",2,e,!0);var n=new ib;return this.u.Jb(this.path.n(".priority"),t,null,jb(n,e)),n.ra},g.push=function(t,e){y("Firebase.push",0,2,arguments.length),Wd("Firebase.push",this.path),Od("Firebase.push",t,this.path,!0),B("Firebase.push",2,e,!0);var n=wh(this.u),r=Kc(n),n=this.n(r),i=this.n(r),r=null!=t?n.set(t,e).then(function(){return i}):hb.resolve(i);return n.then=q(r.then,r),n.catch=q(r.then,r,void 0),ha(e)&&kb(r),n},g.ib=function(){return Wd("Firebase.onDisconnect",this.path),new Y(this.u,this.path)},U.prototype.child=U.prototype.n,U.prototype.set=U.prototype.set,U.prototype.update=U.prototype.update,U.prototype.setWithPriority=U.prototype.Jb,U.prototype.remove=U.prototype.remove,U.prototype.transaction=U.prototype.transaction,U.prototype.setPriority=U.prototype.kg,U.prototype.push=U.prototype.push,U.prototype.onDisconnect=U.prototype.ib,gc(U.prototype,"database",U.prototype.Gf),gc(U.prototype,"key",U.prototype.getKey),gc(U.prototype,"parent",U.prototype.getParent),gc(U.prototype,"root",U.prototype.Of),void 0===firebase)throw Error("Cannot install Firebase Database - be sure to load firebase-app.js first.");try{firebase.INTERNAL.registerService("database",function(t){var e=Ug.Vb(),r=t.options.databaseURL;n(r)||Vb("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.intializeApp().");var i=Wb(r),r=i.jc;return Xd("Invalid Firebase Database URL",i),i.path.e()||Vb("Database URL must point to the root of a Firebase Database (not including a child path)."),(i=w(e.lb,t.name))&&Vb("FIREBASE INTERNAL ERROR: Database initialized multiple times."),i=new Qg(r,e.wf,t),e.lb[t.name]=i,i.Ya},{Reference:U,Query:X,Database:Pg,enableLogging:Sb,INTERNAL:Z,TEST_ACCESS:W,ServerValue:Sg})}catch(t){Vb("Failed to register the Firebase Database Service ("+t+")")}}()}).call(void 0!==typeof global?global:void 0!==typeof self?self:void 0!==typeof window?window:{}),module.exports=firebase.database}).call(exports,__webpack_require__(9))},144:function(t,e,n){"use strict";/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/ */
Object.defineProperty(e,"__esModule",{value:!0});var r=n(25);n(142);n(143),n(146);n(145),e.default=r,t.exports=e.default},145:function(t,e,n){(function(e){/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/ */
var r=n(25);(function(){(function(){var t=function(t,e){function n(){}n.prototype=e.prototype,t.u=e.prototype,t.prototype=new n;for(var r in e)if(Object.defineProperties){var i=Object.getOwnPropertyDescriptor(e,r);i&&Object.defineProperty(t,r,i)}else t[r]=e[r]},e=this,n=function(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e},i=function(t,e){function n(){}n.prototype=e.prototype,t.u=e.prototype,t.prototype=new n,t.v=function(t,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return e.prototype[n].apply(t,i)}},o=function(t){if(Error.captureStackTrace)Error.captureStackTrace(this,o);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))};i(o,Error);var a=function(t,e){for(var n=t.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")},s=function(t,e){e.unshift(t),o.call(this,a.apply(null,e)),e.shift()};i(s,o);var u=function(t,e,n){if(!t){var r="Assertion failed";if(e)var r=r+": "+e,i=Array.prototype.slice.call(arguments,2);throw new s(""+r,i||[])}},c=null,h=function(t){t=new Uint8Array(t);var e=n(t);if(u("array"==e||"object"==e&&"number"==typeof t.length,"encodeByteArray takes an array as a parameter"),!c)for(c={},e=0;65>e;e++)c[e]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e);for(var e=c,r=[],i=0;i<t.length;i+=3){var o=t[i],a=i+1<t.length,s=a?t[i+1]:0,h=i+2<t.length,f=h?t[i+2]:0,l=o>>2,o=(3&o)<<4|s>>4,s=(15&s)<<2|f>>6,f=63&f;h||(f=64,a||(s=64)),r.push(e[l],e[o],e[s],e[f])}return r.join("").replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")},f={},l=(f["only-available-in-window"]="This method is available in a Window context.",f["only-available-in-sw"]="This method is available in a service worker context.",f["should-be-overriden"]="This method should be overriden by extended classes.",f["bad-sender-id"]="Please ensure that 'messagingSenderId' is set correctly in the options passed into firebase.initializeApp().",f["permission-default"]="The required permissions were not granted and dismissed instead.",f["permission-blocked"]="The required permissions were not granted and blocked instead.",f["unsupported-browser"]="This browser doesn't support the API's required to use the firebase SDK.",f["notifications-blocked"]="Notifications have been blocked.",f["failed-serviceworker-registration"]="We are unable to register the default service worker. {$browserErrorMessage}",f["sw-registration-expected"]="A service worker registration was the expected input.",f["get-subscription-failed"]="There was an error when trying to get any existing Push Subscriptions.",f["invalid-saved-token"]="Unable to access details of the saved token.",f["sw-reg-redundant"]="The service worker being used for push was made redundant.",f["token-subscribe-failed"]="A problem occured while subscribing the user to FCM: {$message}",f["token-subscribe-no-token"]="FCM returned no token when subscribing the user to push.",f["token-subscribe-no-push-set"]="FCM returned an invalid response when getting an FCM token.",f["use-sw-before-get-token"]="You must call useServiceWorker() before calling getToken() to ensure your service worker is used.",f["invalid-delete-token"]="You must pass a valid token into deleteToken(), i.e. the token from getToken().",f["delete-token-not-found"]="The deletion attempt for token could not be performed as the token was not found.",f["delete-scope-not-found"]="The deletion attempt for service worker scope could not be performed as the scope was not found.",f["bg-handler-function-expected"]="The input to setBackgroundMessageHandler() must be a function.",f["no-window-client-to-msg"]="An attempt was made to message a non-existant window client.",f["unable-to-resubscribe"]="There was an error while re-subscribing the FCM token for push messaging. Will have to resubscribe the user on next visit. {$message}",f["no-fcm-token-for-resubscribe"]="Could not find an FCM token and as a result, unable to resubscribe. Will have to resubscribe the user on next visit.",f["failed-to-delete-token"]="Unable to delete the currently saved token.",f["no-sw-in-reg"]="Even though the service worker registration was successful, there was a problem accessing the service worker itself.",f["incorrect-gcm-sender-id"]="Please change your web app manifest's 'gcm_sender_id' value to '103953800507' to use Firebase messaging.",f["bad-scope"]="The service worker scope must be a string with at least one character.",f["bad-vapid-key"]="The public VAPID key must be a string with at least one character.",f["bad-subscription"]="The subscription must be a valid PushSubscription.",f["bad-token"]="The FCM Token used for storage / lookup was not a valid token string.",f["bad-push-set"]="The FCM push set used for storage / lookup was not not a valid push set string.",f["failed-delete-vapid-key"]="The VAPID key could not be deleted.",f),p={userVisibleOnly:!0,applicationServerKey:new Uint8Array([4,51,148,247,223,161,235,177,220,3,162,94,21,113,219,72,211,46,237,237,178,52,219,183,71,58,12,143,196,204,225,111,60,140,132,223,171,182,102,62,242,12,212,139,254,227,249,118,47,20,28,99,8,106,111,45,177,26,149,176,206,55,192,156,110])},d=new r.INTERNAL.ErrorFactory("messaging","Messaging",l),v=function(){this.a=null},g=function(t){return t.a?t.a:(t.a=new Promise(function(t,n){var r=e.indexedDB.open("fcm_token_details_db",1);r.onerror=function(t){n(t.target.error)},r.onsuccess=function(e){t(e.target.result)},r.onupgradeneeded=function(t){t=t.target.result.createObjectStore("fcm_token_object_Store",{keyPath:"swScope"}),t.createIndex("fcmSenderId","fcmSenderId",{unique:!1}),t.createIndex("fcmToken","fcmToken",{unique:!0})}}),t.a)},b=function(t){t.a?t.a.then(function(e){e.close(),t.a=null}):Promise.resolve()},y=function(t,e){return g(t).then(function(t){return new Promise(function(n,r){var i=t.transaction(["fcm_token_object_Store"]).objectStore("fcm_token_object_Store").index("fcmToken").get(e);i.onerror=function(t){r(t.target.error)},i.onsuccess=function(t){n(t.target.result)}})})},m=function(t,e){return g(t).then(function(t){return new Promise(function(n,r){var i=[],o=t.transaction(["fcm_token_object_Store"]).objectStore("fcm_token_object_Store").openCursor();o.onerror=function(t){r(t.target.error)},o.onsuccess=function(t){(t=t.target.result)?(t.value.fcmSenderId===e&&i.push(t.value),t.continue()):n(i)}})})},w=function(t,e,n){var r=h(e.getKey("p256dh")),i=h(e.getKey("auth"));return t="authorized_entity="+t+"&endpoint="+e.endpoint+"&encryption_key="+r+"&encryption_auth="+i,n&&(t+="&pushSet="+n),n=new Headers,n.append("Content-Type","application/x-www-form-urlencoded"),fetch("https://fcm.googleapis.com/fcm/connect/subscribe",{method:"POST",headers:n,body:t}).then(function(t){return t.json()}).then(function(t){if(t.error)throw d.create("token-subscribe-failed",{message:t.error.message});if(!t.token)throw d.create("token-subscribe-no-token");if(!t.pushSet)throw d.create("token-subscribe-no-push-set");return{token:t.token,pushSet:t.pushSet}})},k=function(t,e,n,r,i,o){var a={swScope:n.scope,endpoint:r.endpoint,auth:h(r.getKey("auth")),p256dh:h(r.getKey("p256dh")),fcmToken:i,fcmPushSet:o,fcmSenderId:e};return g(t).then(function(t){return new Promise(function(e,n){var r=t.transaction(["fcm_token_object_Store"],"readwrite").objectStore("fcm_token_object_Store").put(a);r.onerror=function(t){n(t.target.error)},r.onsuccess=function(){e()}})})};v.prototype.i=function(t,e){return e instanceof ServiceWorkerRegistration?"string"!=typeof t||0===t.length?Promise.reject(d.create("bad-sender-id")):m(this,t).then(function(n){if(0!==n.length){var r=n.findIndex(function(n){return e.scope===n.swScope&&t===n.fcmSenderId});if(-1!==r)return n[r]}}).then(function(t){if(t)return e.pushManager.getSubscription().catch(function(){throw d.create("get-subscription-failed")}).then(function(e){var n;if((n=e)&&(n=e.endpoint===t.endpoint&&h(e.getKey("auth"))===t.auth&&h(e.getKey("p256dh"))===t.p256dh),n)return t.fcmToken})}):Promise.reject(d.create("sw-registration-expected"))},v.prototype.getSavedToken=v.prototype.i,v.prototype.h=function(t,e){var n=this;return"string"!=typeof t||0===t.length?Promise.reject(d.create("bad-sender-id")):e instanceof ServiceWorkerRegistration?e.pushManager.getSubscription().then(function(t){return t||e.pushManager.subscribe(p)}).then(function(r){return w(t,r).then(function(i){return k(n,t,e,r,i.token,i.pushSet).then(function(){return i.token})})}):Promise.reject(d.create("sw-registration-expected"))},v.prototype.createToken=v.prototype.h,v.prototype.deleteToken=function(t){var e=this;return"string"!=typeof t||0===t.length?Promise.reject(d.create("invalid-delete-token")):y(this,t).then(function(t){if(!t)throw d.create("delete-token-not-found");return g(e).then(function(e){return new Promise(function(n,r){var i=e.transaction(["fcm_token_object_Store"],"readwrite").objectStore("fcm_token_object_Store").delete(t.swScope);i.onerror=function(t){r(t.target.error)},i.onsuccess=function(e){0===e.target.result?r(d.create("failed-to-delete-token")):n(t)}})})})};var T=function(t){var e=this;if(this.a=new r.INTERNAL.ErrorFactory("messaging","Messaging",l),!t.options.messagingSenderId||"string"!=typeof t.options.messagingSenderId)throw this.a.create("bad-sender-id");this.l=t.options.messagingSenderId,this.c=new v,this.app=t,this.INTERNAL={},this.INTERNAL.delete=function(){return e.delete}};T.prototype.getToken=function(){var t=this,e=Notification.permission;return"granted"!==e?"denied"===e?Promise.reject(this.a.create("notifications-blocked")):Promise.resolve(null):this.f().then(function(e){return t.c.i(t.l,e).then(function(n){return n||t.c.h(t.l,e)})})},T.prototype.getToken=T.prototype.getToken,T.prototype.deleteToken=function(t){var e=this;return this.c.deleteToken(t).then(function(){return e.f()}).then(function(t){return t?t.pushManager.getSubscription():null}).then(function(t){if(t)return t.unsubscribe()})},T.prototype.deleteToken=T.prototype.deleteToken,T.prototype.f=function(){throw this.a.create("should-be-overriden")},T.prototype.requestPermission=function(){throw this.a.create("only-available-in-window")},T.prototype.useServiceWorker=function(){throw this.a.create("only-available-in-window")},T.prototype.useServiceWorker=T.prototype.useServiceWorker,T.prototype.onMessage=function(){throw this.a.create("only-available-in-window")},T.prototype.onMessage=T.prototype.onMessage,T.prototype.onTokenRefresh=function(){throw this.a.create("only-available-in-window")},T.prototype.onTokenRefresh=T.prototype.onTokenRefresh,T.prototype.setBackgroundMessageHandler=function(){throw this.a.create("only-available-in-sw")},T.prototype.setBackgroundMessageHandler=T.prototype.setBackgroundMessageHandler,T.prototype.delete=function(){b(this.c)};var E=function(t,e){var n={};return n["firebase-messaging-msg-type"]=t,n["firebase-messaging-msg-data"]=e,n},_=self,A=function(t){T.call(this,t);var e=this;this.a=new r.INTERNAL.ErrorFactory("messaging","Messaging",l),_.addEventListener("push",function(t){return S(e,t)},!1),_.addEventListener("pushsubscriptionchange",function(t){return I(e,t)},!1),_.addEventListener("notificationclick",function(t){return O(e,t)},!1),this.b=null};t(A,T);var S=function(t,e){var n;try{n=e.data.json()}catch(t){return}var r=R().then(function(e){if(e){if(n.notification||t.b)return x(t,n)}else{if((e=n)&&"object"==typeof e.notification){var r=Object.assign({},e.notification),i={};r.data=(i.FCM_MSG=e,i),e=r}else e=void 0;if(e)return _.registration.showNotification(e.title||"",e);if(t.b)return t.b(n)}});e.waitUntil(r)},I=function(t,e){var n=t.getToken().then(function(e){if(!e)throw t.a.create("no-fcm-token-for-resubscribe");var n=t.c;return y(n,e).then(function(e){if(!e)throw t.a.create("invalid-saved-token");return _.registration.pushManager.subscribe(p).then(function(t){return w(e.A,t,e.w)}).catch(function(r){return n.deleteToken(e.B).then(function(){throw t.a.create("unable-to-resubscribe",{message:r})})})})});e.waitUntil(n)},O=function(t,e){if(e.notification&&e.notification.data&&e.notification.data.FCM_MSG){e.stopImmediatePropagation(),e.notification.close();var n=e.notification.data.FCM_MSG,r=n.notification.click_action;if(r){var i=N(r).then(function(t){return t||_.clients.openWindow(r)}).then(function(e){if(e)return delete n.notification,P(t,e,E("notification-clicked",n))});e.waitUntil(i)}}};A.prototype.setBackgroundMessageHandler=function(t){if(t&&"function"!=typeof t)throw this.a.create("bg-handler-function-expected");this.b=t},A.prototype.setBackgroundMessageHandler=A.prototype.setBackgroundMessageHandler;var N=function(t){var e=new URL(t).href;return _.clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(t){for(var n=null,r=0;r<t.length;r++)if(new URL(t[r].url).href===e){n=t[r];break}if(n)return n.focus(),n})},P=function(t,e,n){return new Promise(function(r,i){if(!e)return i(t.a.create("no-window-client-to-msg"));e.postMessage(n),r()})},R=function(){return _.clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(t){return t.some(function(t){return"visible"===t.visibilityState})})},x=function(t,e){return _.clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(n){var r=E("push-msg-received",e);return Promise.all(n.map(function(e){return P(t,e,r)}))})};A.prototype.f=function(){return Promise.resolve(_.registration)};var C=function(t){T.call(this,t);var e=this;this.j=null,this.m=r.INTERNAL.createSubscribe(function(t){e.j=t}),this.s=null,this.o=r.INTERNAL.createSubscribe(function(t){e.s=t}),D(this)};t(C,T),C.prototype.getToken=function(){var t=this;return"serviceWorker"in navigator&&"PushManager"in window&&"Notification"in window&&ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification")&&PushSubscription.prototype.hasOwnProperty("getKey")?j(this).then(function(){return T.prototype.getToken.call(t)}):Promise.reject(this.a.create("unsupported-browser"))},C.prototype.getToken=C.prototype.getToken;var j=function(t){if(t.g)return t.g;var e=document.querySelector('link[rel="manifest"]');return t.g=e?fetch(e.href).then(function(t){return t.json()}).catch(function(){return Promise.resolve()}).then(function(e){if(e&&e.gcm_sender_id&&"103953800507"!==e.gcm_sender_id)throw t.a.create("incorrect-gcm-sender-id")}):Promise.resolve(),t.g};C.prototype.requestPermission=function(){var t=this;return"granted"===Notification.permission?Promise.resolve():new Promise(function(e,n){var r=function(r){return"granted"===r?e():n("denied"===r?t.a.create("permission-blocked"):t.a.create("permission-default"))},i=Notification.requestPermission(function(t){i||r(t)});i&&i.then(r)})},C.prototype.requestPermission=C.prototype.requestPermission,C.prototype.useServiceWorker=function(t){if(!(t instanceof ServiceWorkerRegistration))throw this.a.create("sw-registration-expected");if(void 0!==this.b)throw this.a.create("use-sw-before-get-token");this.b=t},C.prototype.useServiceWorker=C.prototype.useServiceWorker,C.prototype.onMessage=function(t,e,n){return this.m(t,e,n)},C.prototype.onMessage=C.prototype.onMessage,C.prototype.onTokenRefresh=function(t,e,n){return this.o(t,e,n)},C.prototype.onTokenRefresh=C.prototype.onTokenRefresh;var M=function(t,e){var n=e.installing||e.waiting||e.active;return new Promise(function(r,i){if(n)if("activated"===n.state)r(e);else if("redundant"===n.state)i(t.a.create("sw-reg-redundant"));else{var o=function(){if("activated"===n.state)r(e);else{if("redundant"!==n.state)return;i(t.a.create("sw-reg-redundant"))}n.removeEventListener("statechange",o)};n.addEventListener("statechange",o)}else i(t.a.create("no-sw-in-reg"))})};C.prototype.f=function(){var t=this;return this.b?M(this,this.b):(this.b=null,navigator.serviceWorker.register("/firebase-messaging-sw.js",{scope:"/firebase-cloud-messaging-push-scope"}).catch(function(e){throw t.a.create("failed-serviceworker-registration",{browserErrorMessage:e.message})}).then(function(e){return M(t,e).then(function(){return t.b=e,e.update(),e})}))};var D=function(t){"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",function(e){if(e.data&&e.data["firebase-messaging-msg-type"])switch(e=e.data,e["firebase-messaging-msg-type"]){case"push-msg-received":case"notification-clicked":t.j.next(e["firebase-messaging-msg-data"])}},!1)};if(!(r&&r.INTERNAL&&r.INTERNAL.registerService))throw Error("Cannot install Firebase Messaging - be sure to load firebase-app.js first.");r.INTERNAL.registerService("messaging",function(t){return self&&"ServiceWorkerGlobalScope"in self?new A(t):new C(t)},{Messaging:C}),new r.INTERNAL.ErrorFactory("messaging","Messaging",l),new r.INTERNAL.ErrorFactory("messaging","Messaging",l),new r.INTERNAL.ErrorFactory("messaging","Messaging",l)}).call(this)}).call(void 0!==typeof e?e:void 0!==typeof self?self:void 0!==typeof window?window:{}),t.exports=r.messaging}).call(e,n(9))},146:function(t,e,n){(function(e){/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/ */
var r=n(25);(function(){(function(){for(var t,n="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)},i="undefined"!=typeof window&&window===this?this:void 0!==e&&null!=e?e:this,o=["Number","MIN_SAFE_INTEGER"],a=0;a<o.length-1;a++){var s=o[a];s in i||(i[s]={}),i=i[s]}var u=o[o.length-1];-9007199254740991!=i[u]&&n(i,u,{configurable:!0,writable:!0,value:-9007199254740991});var c=this,h=function(t){return void 0!==t},f=function(t){var e=typeof t;if("object"==e){if(!t)return"null";if(t instanceof Array)return"array";if(t instanceof Object)return e;var n=Object.prototype.toString.call(t);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof t.length&&void 0!==t.splice&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==t.call&&void 0!==t.propertyIsEnumerable&&!t.propertyIsEnumerable("call"))return"function"}else if("function"==e&&void 0===t.call)return"object";return e},l=function(t,e){this.code="storage/"+t,this.message="Firebase Storage: "+e,this.serverResponse=null,this.name="FirebaseError"};!function(){function t(){}var e=Error;t.prototype=e.prototype,l.b=e.prototype,l.prototype=new t,l.a=function(t,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return e.prototype[n].apply(t,i)}}();var p=function(){return new l("unknown","An unknown error occurred, please check the error payload for server response.")},d=function(){return new l("canceled","User canceled the upload/download.")},v=function(){return new l("cannot-slice-blob","Cannot slice blob for upload. Please retry the upload.")},g=function(t,e,n){return new l("invalid-argument","Invalid argument in `"+e+"` at index "+t+": "+n)},b=function(){return new l("app-deleted","The Firebase app was deleted.")},y=function(t,e){return new l("invalid-format","String does not match format '"+t+"': "+e)},m=function(t){throw new l("internal-error","Internal error: "+t)},w="https://firebasestorage.googleapis.com",k=function(t){if(void 0!==r)return new r.Promise(t);throw Error("Error in Firebase Storage - be sure to load firebase-app.js first.")},T=function(t,e){return-1!==t.indexOf(e)},E=function(t,e,n){function r(){f||(f=!0,e.apply(null,arguments))}function i(e){u=setTimeout(function(){u=null,t(o,2===h)},e)}function o(t,e){if(!f)if(t)r.apply(null,arguments);else if(2===h||c)r.apply(null,arguments);else{64>s&&(s*=2);var n;1===h?(h=2,n=0):n=1e3*(s+Math.random()),i(n)}}function a(t){l||(l=!0,f||(null!==u?(t||(h=2),clearTimeout(u),i(0)):t||(h=1)))}var s=1,u=null,c=!1,h=0,f=!1,l=!1;return i(0),setTimeout(function(){c=!0,a(!0)},n),a},_=function(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])},A=function(t){var e={};return _(t,function(t,n){e[t]=n}),e},S=function(t,e,n,r){this.l=t,this.b={},this.method=e,this.headers={},this.body=null,this.m=n,this.c=this.a=null,this.f=[200],this.i=[],this.timeout=r,this.g=!0},I=function(t){var e=encodeURIComponent,n="?";return _(t,function(t,r){t=e(t)+"="+e(r),n=n+t+"&"}),n=n.slice(0,-1)},O=function(t,e,n,r,i,o,a,s,u,c,h){this.F=t,this.D=e,this.A=n,this.u=r,this.B=i.slice(),this.s=o.slice(),this.m=this.o=this.c=this.b=null,this.g=this.i=!1,this.v=a,this.l=s,this.f=c,this.G=h,this.C=u;var f=this;this.w=k(function(t,e){f.o=t,f.m=e,P(f)})},N=function(t,e,n){this.b=t,this.c=e,this.a=!!n},P=function(t){function e(t,e){function n(t){r.f(t.loaded,t.lengthComputable?t.total:-1)}e?t(!1,new N(!1,null,!0)):(e=new re,e.h.withCredentials=r.G,r.b=e,null!==r.f&&h(e.h.upload)&&e.h.upload.addEventListener("progress",n),ie(e,r.F,r.D,r.u,r.A).then(function(e){null!==r.f&&h(e.h.upload)&&e.h.upload.removeEventListener("progress",n),r.b=null;var i=0===oe(e),o=ae(e);if(!(i=!i))var i=T([408,429],o),a=T(r.s,o),i=500<=o&&600>o||i||a;i?(e=2===oe(e),t(!1,new N(!1,null,e))):t(!0,new N(T(r.B,o),e))}))}function n(t,e){var n=r.o;t=r.m;var i=e.c;if(e.b)try{var o=r.v(i,se(i));h(o)?n(o):n()}catch(e){t(e)}else null!==i?(e=p(),o=se(i),e.serverResponse=o,t(r.l?r.l(i,e):e)):(e=e.a?r.g?b():d():new l("retry-limit-exceeded","Max retry time for operation exceeded, please try again."),t(e))}var r=t;t.i?n(0,new N(!1,null,!0)):t.c=E(e,n,t.C)};O.prototype.a=function(){return this.w},O.prototype.cancel=function(t){this.i=!0,this.g=t||!1,null!==this.c&&(0,this.c)(!1),null!==this.b&&this.b.abort()};var R=function(t,e,n){var i=I(t.b),i=t.l+i,o=t.headers?A(t.headers):{};return null!==e&&0<e.length&&(o.Authorization="Firebase "+e),o["X-Firebase-Storage-Version"]="webjs/"+(void 0!==r?r.SDK_VERSION:"AppManager"),new O(i,t.method,o,t.body,t.f,t.i,t.m,t.a,t.timeout,t.c,n)},x=function(t){this.b=r.Promise.reject(t)};x.prototype.a=function(){return this.b},x.prototype.cancel=function(){};var C=function(t,e){this.bucket=t,this.path=e},j=function(t){var e=encodeURIComponent;return"/b/"+e(t.bucket)+"/o/"+e(t.path)},M=function(t){var e;try{e=D(t)}catch(e){return new C(t,"")}if(""===e.path)return e;throw new l("invalid-default-bucket","Invalid default bucket '"+t+"'.")},D=function(t){for(var e=null,n=[{M:/^gs:\/\/([A-Za-z0-9.\-]+)(\/(.*))?$/i,H:{bucket:1,path:3},L:function(t){"/"===t.path.charAt(t.path.length-1)&&(t.path=t.path.slice(0,-1))}},{M:/^https?:\/\/firebasestorage\.googleapis\.com\/v[A-Za-z0-9_]+\/b\/([A-Za-z0-9.\-]+)\/o(\/([^?#]*).*)?$/i,H:{bucket:1,path:3},L:function(t){t.path=decodeURIComponent(t.path)}}],r=0;r<n.length;r++){var i=n[r],o=i.M.exec(t);if(o){e=o[i.H.bucket],(o=o[i.H.path])||(o=""),e=new C(e,o),i.L(e);break}}if(null==e)throw new l("invalid-url","Invalid URL '"+t+"'.");return e},L=function(){this.a={},this.b=Number.MIN_SAFE_INTEGER},U=function(t,e){function n(){delete i.a[r]}var r=t.b;t.b++,t.a[r]=e;var i=t;e.a().then(n,n)},F=function(t){_(t.a,function(t,e){e&&e.cancel(!0)}),t.a={}},W=function(t){return h(t)&&null!==t},V=function(t){return"string"==typeof t||t instanceof String},K=function(){return"undefined"!=typeof Blob},B=function(t,e,n,r,i){this.a=t,this.g=null,null!==this.a&&(t=this.a.options,W(t)&&(t=t.storageBucket||null,this.g=null==t?null:M(t).bucket)),this.s=e,this.o=n,this.l=i,this.m=r,this.c=12e4,this.b=6e4,this.i=new L,this.f=!1},q=function(t){return null!==t.a&&W(t.a.INTERNAL)&&W(t.a.INTERNAL.getToken)?t.a.INTERNAL.getToken().then(function(t){return W(t)?t.accessToken:null},function(){return null}):r.Promise.resolve(null)};B.prototype.bucket=function(){if(this.f)throw b();return this.g};var X,G=function(t,e,n){return t.f?new x(b()):(e=t.o(e,n,null===t.a,t.l),U(t.i,e),e)},H=function(t,e){return e=e.split("/").filter(function(t){return 0<t.length}).join("/"),0===t.length?e:t+"/"+e},Q=function(t){var e=t.lastIndexOf("/",t.length-2);return-1===e?t:t.slice(e+1)},J=function(t,e){return e},Y=function(t,e,n,r){this.c=t,this.b=e||t,this.writable=!!n,this.a=r||J},z=null,$=function(){if(z)return z;var t=[];t.push(new Y("bucket")),t.push(new Y("generation")),t.push(new Y("metageneration")),t.push(new Y("name","fullPath",!0));var e=new Y("name");return e.a=function(t,e){return!V(e)||2>e.length?e:Q(e)},t.push(e),e=new Y("size"),e.a=function(t,e){return W(e)?+e:e},t.push(e),t.push(new Y("timeCreated")),t.push(new Y("updated")),t.push(new Y("md5Hash",null,!0)),t.push(new Y("cacheControl",null,!0)),t.push(new Y("contentDisposition",null,!0)),t.push(new Y("contentEncoding",null,!0)),t.push(new Y("contentLanguage",null,!0)),t.push(new Y("contentType",null,!0)),t.push(new Y("metadata","customMetadata",!0)),t.push(new Y("downloadTokens","downloadURLs",!1,function(t,e){if(!(V(e)&&0<e.length))return[];var n=encodeURIComponent;return e.split(",").map(function(e){var r=t.fullPath,r="https://firebasestorage.googleapis.com/v0/b/"+n(t.bucket)+"/o/"+n(r);return e=I({alt:"media",token:e}),r+e})})),z=t},Z=function(t,e){Object.defineProperty(t,"ref",{get:function(){return e.s(e,new C(t.bucket,t.fullPath))}})},tt=function(t,e){for(var n={},r=e.length,i=0;i<r;i++){var o=e[i];o.writable&&(n[o.c]=t[o.b])}return JSON.stringify(n)},et=function(t){if(!t||"object"!=typeof t)throw"Expected Metadata object.";for(var e in t){var n=t[e];if("customMetadata"===e){if("object"!=typeof n)throw"Expected object for 'customMetadata' mapping."}else if(null!=n&&"object"==typeof n)throw"Mapping for '"+e+"' cannot be an object."}},nt=function(t,e,n){for(var r=e.length,i=e.length,o=0;o<e.length;o++)if(e[o].b){r=o;break}if(!(r<=n.length&&n.length<=i))throw r===i?(e=r,r=1===r?"argument":"arguments"):(e="between "+r+" and "+i,r="arguments"),new l("invalid-argument-count","Invalid argument count in `"+t+"`: Expected "+e+" "+r+", received "+n.length+".");for(o=0;o<n.length;o++)try{e[o].a(n[o])}catch(e){if(e instanceof Error)throw g(o,t,e.message);throw g(o,t,e)}},rt=function(t,e){var n=this;this.a=function(e){n.b&&!h(e)||t(e)},this.b=!!e},it=function(t,e){return function(n){t(n),e(n)}},ot=function(t,e){function n(t){if(!("string"==typeof t||t instanceof String))throw"Expected string."}var r;return r=t?it(n,t):n,new rt(r,e)},at=function(){return new rt(function(t){if(!(t instanceof Uint8Array||t instanceof ArrayBuffer||K()&&t instanceof Blob))throw"Expected Blob or File."})},st=function(){return new rt(function(t){if(!(("number"==typeof t||t instanceof Number)&&0<=t))throw"Expected a number 0 or greater."})},ut=function(t,e){return new rt(function(e){if(!(null===e||W(e)&&e instanceof Object))throw"Expected an Object.";W(t)&&t(e)},e)},ct=function(){return new rt(function(t){if(null!==t&&"function"!=f(t))throw"Expected a Function."},!0)},ht=function(t){return function(){var e=[];Array.prototype.push.apply(e,arguments),r.Promise.resolve(!0).then(function(){t.apply(null,e)})}},ft=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},lt=function(t,e){return t<e?-1:t>e?1:0};t:{var pt=c.navigator;if(pt){var dt=pt.userAgent;if(dt){X=dt;break t}}X=""}var vt,gt=function(t,e){var n=It;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e(t)},bt=-1!=X.indexOf("Opera"),yt=-1!=X.indexOf("Trident")||-1!=X.indexOf("MSIE"),mt=-1!=X.indexOf("Edge"),wt=!(-1==X.indexOf("Gecko")||-1!=X.toLowerCase().indexOf("webkit")&&-1==X.indexOf("Edge")||-1!=X.indexOf("Trident")||-1!=X.indexOf("MSIE")||-1!=X.indexOf("Edge")),kt=-1!=X.toLowerCase().indexOf("webkit")&&-1==X.indexOf("Edge");t:{var Tt="",Et=function(){var t=X;return wt?/rv\:([^\);]+)(\)|;)/.exec(t):mt?/Edge\/([\d\.]+)/.exec(t):yt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(t):kt?/WebKit\/(\S+)/.exec(t):bt?/(?:Version)[ \/]?(\S+)/.exec(t):void 0}();if(Et&&(Tt=Et?Et[1]:""),yt){var _t,At=c.document;if(null!=(_t=At?At.documentMode:void 0)&&_t>parseFloat(Tt)){vt=String(_t);break t}}vt=Tt}var St=vt,It={},Ot=function(t){return gt(t,function(){for(var e=0,n=ft(String(St)).split("."),r=ft(String(t)).split("."),i=Math.max(n.length,r.length),o=0;0==e&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=lt(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||lt(0==a[2].length,0==s[2].length)||lt(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e})},Nt=function(t){var e=c.BlobBuilder||c.WebKitBlobBuilder;if(h(e)){for(var e=new e,n=0;n<arguments.length;n++)e.append(arguments[n]);return e.getBlob()}if(e=Array.prototype.slice.call(arguments),n=c.BlobBuilder||c.WebKitBlobBuilder,h(n)){for(var n=new n,r=0;r<e.length;r++)n.append(e[r],void 0);e=n.getBlob(void 0)}else{if(!h(c.Blob))throw Error("This browser doesn't seem to support creating Blobs");e=new Blob(e,{})}return e},Pt=function(t,e,n){return h(n)||(n=t.size),t.webkitSlice?t.webkitSlice(e,n):t.mozSlice?t.mozSlice(e,n):t.slice?wt&&!Ot("13.0")||kt&&!Ot("537.1")?(0>e&&(e+=t.size),0>e&&(e=0),0>n&&(n+=t.size),n<e&&(n=e),t.slice(e,n-e)):t.slice(e,n):null},Rt={RAW:"raw",BASE64:"base64",BASE64URL:"base64url",DATA_URL:"data_url"},xt=function(t){switch(t){case"raw":case"base64":case"base64url":case"data_url":break;default:throw"Expected one of the event types: [raw, base64, base64url, data_url]."}},Ct=function(t,e){this.data=t,this.a=e||null},jt=function(t,e){switch(t){case"raw":return new Ct(Mt(e));case"base64":case"base64url":return new Ct(Dt(t,e));case"data_url":t=new Lt(e);var n;if(t.a)n=Dt("base64",t.c);else{try{n=decodeURIComponent(t.c)}catch(t){throw y("data_url","Malformed data URL.")}n=Mt(n)}return new Ct(n,new Lt(e).b)}throw p()},Mt=function(t){for(var e=[],n=0;n<t.length;n++){var r=t.charCodeAt(n);if(127>=r)e.push(r);else if(2047>=r)e.push(192|r>>6,128|63&r);else if(55296==(64512&r))if(n<t.length-1&&56320==(64512&t.charCodeAt(n+1))){var i=t.charCodeAt(++n),r=65536|(1023&r)<<10|1023&i;e.push(240|r>>18,128|r>>12&63,128|r>>6&63,128|63&r)}else e.push(239,191,189);else 56320==(64512&r)?e.push(239,191,189):e.push(224|r>>12,128|r>>6&63,128|63&r)}return new Uint8Array(e)},Dt=function(t,e){switch(t){case"base64":var n=-1!==e.indexOf("-"),r=-1!==e.indexOf("_");if(n||r)throw y(t,"Invalid character '"+(n?"-":"_")+"' found: is it base64url encoded?");break;case"base64url":if(n=-1!==e.indexOf("+"),r=-1!==e.indexOf("/"),n||r)throw y(t,"Invalid character '"+(n?"+":"/")+"' found: is it base64 encoded?");e=e.replace(/-/g,"+").replace(/_/g,"/")}var i;try{i=atob(e)}catch(e){throw y(t,"Invalid character found")}for(t=new Uint8Array(i.length),e=0;e<i.length;e++)t[e]=i.charCodeAt(e);return t},Lt=function(t){var e=t.match(/^data:([^,]+)?,/);if(null===e)throw y("data_url","Must be formatted 'data:[<mediatype>][;base64],<data>");if(e=e[1]||null,this.a=!1,this.b=null,null!=e){var n=e.length-7;this.b=(this.a=0<=n&&e.indexOf(";base64",n)==n)?e.substring(0,e.length-7):e}this.c=t.substring(t.indexOf(",")+1)},Ut=function(t,e){K()&&t instanceof Blob?(this.j=t,e=t.size,t=t.type):(t instanceof ArrayBuffer?(e?this.j=new Uint8Array(t):(this.j=new Uint8Array(t.byteLength),this.j.set(new Uint8Array(t))),e=this.j.length):(e?this.j=t:(this.j=new Uint8Array(t.length),this.j.set(t)),e=t.length),t=""),this.a=e,this.b=t};Ut.prototype.type=function(){return this.b},Ut.prototype.slice=function(t,e){return K()&&this.j instanceof Blob?(t=Pt(this.j,t,e),null===t?null:new Ut(t)):(t=new Uint8Array(this.j.buffer,t,e-t),new Ut(t,!0))};var Ft=function(t){var e=[];if(Array.prototype.push.apply(e,arguments),K())return e=e.map(function(t){return t instanceof Ut?t.j:t}),new Ut(Nt.apply(null,e));var e=e.map(function(t){return V(t)?jt("raw",t).data:t.j}),n=0;e.forEach(function(t){n+=t.byteLength});var r=new Uint8Array(n),i=0;return e.forEach(function(t){for(var e=0;e<t.length;e++)r[i++]=t[e]}),new Ut(r,!0)},Wt=function(t,e,n){"function"==f(t)||W(e)||W(n)?(this.b=t,this.error=e||null,this.a=n||null):(this.b=t.next||null,this.error=t.error||null,this.a=t.complete||null)},Vt=function(t){if(!t)throw p()},Kt=function(t,e){return function(n,r){var i;t:{try{i=JSON.parse(r)}catch(t){i=null;break t}n=typeof i,i="object"==n&&null!=i||"function"==n?i:null}if(null===i)i=null;else{n={type:"file"},r=e.length;for(var o=0;o<r;o++){var a=e[o];n[a.b]=a.a(n,i[a.c])}Z(n,t),i=n}return Vt(null!==i),i}},Bt=function(t){return function(e,n){return e=401===ae(e)?new l("unauthenticated","User is not authenticated, please authenticate using Firebase Authentication and try again."):402===ae(e)?new l("quota-exceeded","Quota for bucket '"+t.bucket+"' exceeded, please view quota on https://firebase.google.com/pricing/."):403===ae(e)?new l("unauthorized","User does not have permission to access '"+t.path+"'."):n,e.serverResponse=n.serverResponse,e}},qt=function(t){var e=Bt(t);return function(n,r){var i=e(n,r);return 404===ae(n)&&(i=new l("object-not-found","Object '"+t.path+"' does not exist.")),i.serverResponse=r.serverResponse,i}},Xt=function(t,e,n){var r=j(e);return t=new S(w+"/v0"+r,"GET",Kt(t,n),t.c),t.a=qt(e),t},Gt=function(t,e){var n=j(e);return t=new S(w+"/v0"+n,"DELETE",function(){},t.c),t.f=[200,204],t.a=qt(e),t},Ht=function(t,e,n){return n=n?A(n):{},n.fullPath=t.path,n.size=e.a,n.contentType||(t=e&&e.type()||"application/octet-stream",n.contentType=t),n},Qt=function(t,e,n,r,i){var o,a="/b/"+encodeURIComponent(e.bucket)+"/o",s={"X-Goog-Upload-Protocol":"multipart"};o="";for(var u=0;2>u;u++)o+=Math.random().toString().slice(2);if(s["Content-Type"]="multipart/related; boundary="+o,i=Ht(e,r,i),u=tt(i,n),null===(r=Ft("--"+o+"\r\nContent-Type: application/json; charset=utf-8\r\n\r\n"+u+"\r\n--"+o+"\r\nContent-Type: "+i.contentType+"\r\n\r\n",r,"\r\n--"+o+"--")))throw v();return t=new S(w+"/v0"+a,"POST",Kt(t,n),t.b),t.b={name:i.fullPath},t.headers=s,t.body=r.j,t.a=Bt(e),t},Jt=function(t,e,n,r){this.current=t,this.total=e,this.I=!!n,this.metadata=r||null},Yt=function(t,e){var n;try{n=t.h.getResponseHeader("X-Goog-Upload-Status")}catch(t){Vt(!1)}return Vt(T(e||["active"],n)),n},zt=function(t,e,n,r,i){var o="/b/"+encodeURIComponent(e.bucket)+"/o",a=Ht(e,r,i);return i={name:a.fullPath},o=w+"/v0"+o,r={"X-Goog-Upload-Protocol":"resumable","X-Goog-Upload-Command":"start","X-Goog-Upload-Header-Content-Length":r.a,"X-Goog-Upload-Header-Content-Type":a.contentType,"Content-Type":"application/json; charset=utf-8"},n=tt(a,n),t=new S(o,"POST",function(t){Yt(t);var e;try{e=t.h.getResponseHeader("X-Goog-Upload-URL")}catch(t){Vt(!1)}return Vt(V(e)),e},t.b),t.b=i,t.headers=r,t.body=n,t.a=Bt(e),t},$t=function(t,e,n,r){return t=new S(n,"POST",function(t){var e,n=Yt(t,["active","final"]);try{e=t.h.getResponseHeader("X-Goog-Upload-Size-Received")}catch(t){Vt(!1)}return t=e,isFinite(t)&&(t=String(t)),t="string"==typeof t?/^\s*-?0x/i.test(t)?parseInt(t,16):parseInt(t,10):NaN,Vt(!isNaN(t)),new Jt(t,r.a,"final"===n)},t.b),t.headers={"X-Goog-Upload-Command":"query"},t.a=Bt(e),t.g=!1,t},Zt=function(t,e,n,r,i,o,a,s){var u=new Jt(0,0);if(a?(u.current=a.current,u.total=a.total):(u.current=0,u.total=r.a),r.a!==u.total)throw new l("server-file-wrong-size","Server recorded incorrect upload file size, please retry the upload.");var c=a=u.total-u.current;0<i&&(c=Math.min(c,i));var h=u.current;if(i={"X-Goog-Upload-Command":c===a?"upload, finalize":"upload","X-Goog-Upload-Offset":u.current},null===(a=r.slice(h,h+c)))throw v();return n=new S(n,"POST",function(t,n){var i,a=Yt(t,["active","final"]),s=u.current+c,h=r.a;return i="final"===a?Kt(e,o)(t,n):null,new Jt(s,h,"final"===a,i)},e.b),n.headers=i,n.body=a.j,n.c=s||null,n.a=Bt(t),n.g=!1,n},te={STATE_CHANGED:"state_changed"},ee={RUNNING:"running",PAUSED:"paused",SUCCESS:"success",CANCELED:"canceled",ERROR:"error"},ne=function(t){switch(t){case"running":case"pausing":case"canceling":return"running";case"paused":return"paused";case"success":return"success";case"canceled":return"canceled";case"error":default:return"error"}},re=function(){var t=this;this.h=new XMLHttpRequest,this.b=0,this.c=k(function(e){t.h.addEventListener("abort",function(){t.b=2,e(t)}),t.h.addEventListener("error",function(){t.b=1,e(t)}),t.h.addEventListener("load",function(){e(t)})}),this.a=!1},ie=function(t,e,n,r,i){if(t.a)throw m("cannot .send() more than once");return t.a=!0,t.h.open(n,e,!0),W(i)&&_(i,function(e,n){t.h.setRequestHeader(e,n.toString())}),W(r)?t.h.send(r):t.h.send(),t.c},oe=function(t){if(!t.a)throw m("cannot .getErrorCode() before sending");return t.b},ae=function(t){if(!t.a)throw m("cannot .getStatus() before sending");try{return t.h.status}catch(t){return-1}},se=function(t){if(!t.a)throw m("cannot .getResponseText() before sending");return t.h.responseText};re.prototype.abort=function(){this.h.abort()};var ue=function(){},ce=function(t,e,n,r,i,o){this.b=t,this.i=e,this.f=n,this.a=r,this.g=i,this.c=o};t=ce.prototype,t.X=function(){return this.b},t.sa=function(){return this.i},t.pa=function(){return this.f},t.ka=function(){return this.a},t.Y=function(){if(W(this.a)){var t=this.a.downloadURLs;return W(t)&&W(t[0])?t[0]:null}return null},t.ra=function(){return this.g},t.na=function(){return this.c};var he=function(t,e,n,r,i,o){var a=this;this.O=t,this.c=e,this.o=n,this.f=i,this.i=void 0===o?null:o,this.u=r,this.l=0,this.G=this.w=!1,this.B=[],this.U=262144<this.f.a,this.b="running",this.a=this.A=this.g=null,this.m=1,this.s=function(t){a.a=null,a.m=1,"storage/canceled"===t.code?(a.w=!0,ke(a)):(a.g=t,we(a,"error"))},this.N=function(t){a.a=null,"storage/canceled"===t.code?ke(a):(a.g=t,we(a,"error"))},this.D=this.v=null,this.F=k(function(t,e){a.v=t,a.D=e,le(a)}),this.F.then(null,function(){})},fe=function(t){var e=t.l;return function(n){me(t,e+n)}},le=function(t){"running"===t.b&&null===t.a&&(t.U?null===t.A?de(t):t.w?ve(t):t.G?be(t):ge(t):ye(t))},pe=function(t,e){q(t.c).then(function(n){switch(t.b){case"running":e(n);break;case"canceling":we(t,"canceled");break;case"pausing":we(t,"paused")}})},de=function(t){pe(t,function(e){var n=zt(t.c,t.o,t.u,t.f,t.i);t.a=G(t.c,n,e),t.a.a().then(function(e){t.a=null,t.A=e,t.w=!1,ke(t)},t.s)})},ve=function(t){var e=t.A;pe(t,function(n){var r=$t(t.c,t.o,e,t.f);t.a=G(t.c,r,n),t.a.a().then(function(e){t.a=null,me(t,e.current),t.w=!1,e.I&&(t.G=!0),ke(t)},t.s)})},ge=function(t){var e=262144*t.m,n=new Jt(t.l,t.f.a),r=t.A;pe(t,function(i){var o;try{o=Zt(t.o,t.c,r,t.f,e,t.u,n,fe(t))}catch(e){return t.g=e,void we(t,"error")}t.a=G(t.c,o,i),t.a.a().then(function(e){33554432>262144*t.m&&(t.m*=2),t.a=null,me(t,e.current),e.I?(t.i=e.metadata,we(t,"success")):ke(t)},t.s)})},be=function(t){pe(t,function(e){var n=Xt(t.c,t.o,t.u);t.a=G(t.c,n,e),t.a.a().then(function(e){t.a=null,t.i=e,we(t,"success")},t.N)})},ye=function(t){pe(t,function(e){var n=Qt(t.c,t.o,t.u,t.f,t.i);t.a=G(t.c,n,e),t.a.a().then(function(e){t.a=null,t.i=e,me(t,t.f.a),we(t,"success")},t.s)})},me=function(t,e){var n=t.l;t.l=e,t.l!==n&&Te(t)},we=function(t,e){if(t.b!==e)switch(e){case"canceling":case"pausing":t.b=e,null!==t.a&&t.a.cancel();break;case"running":var n="paused"===t.b;t.b=e,n&&(Te(t),le(t));break;case"paused":t.b=e,Te(t);break;case"canceled":t.g=d(),t.b=e,Te(t);break;case"error":t.b=e,Te(t);break;case"success":t.b=e,Te(t)}},ke=function(t){switch(t.b){case"pausing":we(t,"paused");break;case"canceling":we(t,"canceled");break;case"running":le(t)}};he.prototype.C=function(){return new ce(this.l,this.f.a,ne(this.b),this.i,this,this.O)},he.prototype.P=function(t,e,n,r){function i(t){try{return void a(t)}catch(t){}try{if(s(t),!(h(t.next)||h(t.error)||h(t.complete)))throw""}catch(t){throw"Expected a function or an Object with one of `next`, `error`, `complete` properties."}}function o(t){return function(e,n,r){null!==t&&nt("on",t,arguments);var i=new Wt(e,n,r);return u.B.push(i),_e(u,i),function(){var t=u.B,e=t.indexOf(i);-1!==e&&t.splice(e,1)}}}var a=ct().a,s=ut(null,!0).a;nt("on",[ot(function(){if("state_changed"!==t)throw"Expected one of the event types: [state_changed]."}),ut(i,!0),ct(),ct()],arguments);var u=this,c=[ut(function(t){if(null===t)throw"Expected a function or an Object with one of `next`, `error`, `complete` properties.";i(t)}),ct(),ct()];return h(e)||h(n)||h(r)?o(null)(e,n,r):o(c)},he.prototype.then=function(t,e){return this.F.then(void 0===t?null:t,void 0===e?null:e)},he.prototype.catch=function(t){return this.then(null,t)};var Te=function(t){Ee(t),Array.prototype.slice.call(t.B).forEach(function(e){_e(t,e)})},Ee=function(t){if(null!==t.v){var e=!0;switch(ne(t.b)){case"success":ht(t.v.bind(null,t.C()))();break;case"canceled":case"error":ht(t.D.bind(null,t.g))();break;default:e=!1}e&&(t.v=null,t.D=null)}},_e=function(t,e){switch(ne(t.b)){case"running":case"paused":null!==e.b&&ht(e.b.bind(e,t.C()))();break;case"success":null!==e.a&&ht(e.a.bind(e))();break;case"canceled":case"error":null!==e.error&&ht(e.error.bind(e,t.g))();break;default:null!==e.error&&ht(e.error.bind(e,t.g))()}};he.prototype.T=function(){nt("resume",[],arguments);var t="paused"===this.b||"pausing"===this.b;return t&&we(this,"running"),t},he.prototype.R=function(){nt("pause",[],arguments);var t="running"===this.b;return t&&we(this,"pausing"),t},he.prototype.cancel=function(){nt("cancel",[],arguments);var t="running"===this.b||"pausing"===this.b;return t&&we(this,"canceling"),t};var Ae=function(t,e){this.a=t,this.location=e instanceof C?e:D(e)};Ae.prototype.toString=function(){return nt("toString",[],arguments),"gs://"+this.location.bucket+"/"+this.location.path};var Se=function(t,e){return new Ae(t,e)};t=Ae.prototype,t.J=function(t){nt("child",[ot()],arguments);var e=H(this.location.path,t);return Se(this.a,new C(this.location.bucket,e))},t.ma=function(){var t;if(t=this.location.path,0==t.length)t=null;else{var e=t.lastIndexOf("/");t=-1===e?"":t.slice(0,e)}return null===t?null:Se(this.a,new C(this.location.bucket,t))},t.oa=function(){return Se(this.a,new C(this.location.bucket,""))},t.W=function(){return this.location.bucket},t.ha=function(){return this.location.path},t.la=function(){return Q(this.location.path)},t.qa=function(){return this.a.m},t.aa=function(t,e){return nt("put",[at(),new rt(et,!0)],arguments),Ie(this,"put"),new he(this,this.a,this.location,$(),new Ut(t),e)},t.ba=function(t,e,n){nt("putString",[ot(),ot(xt,!0),new rt(et,!0)],arguments),Ie(this,"putString");var r=jt(W(e)?e:"raw",t),i=n?A(n):{};return!W(i.contentType)&&W(r.a)&&(i.contentType=r.a),new he(this,this.a,this.location,$(),new Ut(r.data,!0),i)},t.Z=function(){nt("delete",[],arguments),Ie(this,"delete");var t=this;return q(this.a).then(function(e){var n=Gt(t.a,t.location);return G(t.a,n,e).a()})},t.K=function(){nt("getMetadata",[],arguments),Ie(this,"getMetadata");var t=this;return q(this.a).then(function(e){var n=Xt(t.a,t.location,$());return G(t.a,n,e).a()})},t.ca=function(t){nt("updateMetadata",[new rt(et,void 0)],arguments),Ie(this,"updateMetadata");var e=this;return q(this.a).then(function(n){var r=e.a,i=e.location,o=t,a=$(),s=j(i),s=w+"/v0"+s,o=tt(o,a),r=new S(s,"PATCH",Kt(r,a),r.c);return r.headers={"Content-Type":"application/json; charset=utf-8"},r.body=o,r.a=qt(i),G(e.a,r,n).a()})},t.$=function(){return nt("getDownloadURL",[],arguments),Ie(this,"getDownloadURL"),this.K().then(function(t){if(t=t.downloadURLs[0],W(t))return t;throw new l("no-download-url","The given file does not have any download URLs.")})};var Ie=function(t,e){if(""===t.location.path)throw new l("invalid-root-operation","The operation '"+e+"' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').")},Oe=function(t,e,n){this.a=new B(t,function(t,e){return new Ae(t,e)},R,this,e),this.c=t,h(n)?this.b=M(n):null!=this.a.bucket()&&(this.b=new C(this.a.bucket(),"")),this.f=new Ne(this)};t=Oe.prototype,t.da=function(t){if(nt("ref",[ot(function(t){if(/^[A-Za-z]+:\/\//.test(t))throw"Expected child path but got a URL, use refFromURL instead."},!0)],arguments),null===this.b)throw Error("No Storage Bucket defined in Firebase Options.");var e=new Ae(this.a,this.b);return h(t)?e.J(t):e},t.ea=function(t){return nt("refFromURL",[ot(function(t){if(!/^[A-Za-z]+:\/\//.test(t))throw"Expected full URL but got a child path, use ref instead.";try{D(t)}catch(t){throw"Expected valid full URL but got an invalid one."}},!1)],arguments),new Ae(this.a,t)},t.ja=function(){return this.a.b},t.ga=function(t){nt("setMaxUploadRetryTime",[st()],arguments),this.a.b=t},t.ia=function(){return this.a.c},t.fa=function(t){nt("setMaxOperationRetryTime",[st()],arguments),this.a.c=t},t.V=function(){return this.c},t.S=function(){return this.f};var Ne=function(t){this.a=t};Ne.prototype.b=function(){var t=this.a.a;t.f=!0,t.a=null,F(t.i)};var Pe=function(t,e,n){Object.defineProperty(t,e,{get:n})};Ae.prototype.toString=Ae.prototype.toString,Ae.prototype.child=Ae.prototype.J,Ae.prototype.put=Ae.prototype.aa,Ae.prototype.putString=Ae.prototype.ba,Ae.prototype.delete=Ae.prototype.Z,Ae.prototype.getMetadata=Ae.prototype.K,Ae.prototype.updateMetadata=Ae.prototype.ca,Ae.prototype.getDownloadURL=Ae.prototype.$,Pe(Ae.prototype,"parent",Ae.prototype.ma),Pe(Ae.prototype,"root",Ae.prototype.oa),Pe(Ae.prototype,"bucket",Ae.prototype.W),Pe(Ae.prototype,"fullPath",Ae.prototype.ha),Pe(Ae.prototype,"name",Ae.prototype.la),Pe(Ae.prototype,"storage",Ae.prototype.qa),Oe.prototype.ref=Oe.prototype.da,Oe.prototype.refFromURL=Oe.prototype.ea,Pe(Oe.prototype,"maxOperationRetryTime",Oe.prototype.ia),Oe.prototype.setMaxOperationRetryTime=Oe.prototype.fa,Pe(Oe.prototype,"maxUploadRetryTime",Oe.prototype.ja),Oe.prototype.setMaxUploadRetryTime=Oe.prototype.ga,Pe(Oe.prototype,"app",Oe.prototype.V),Pe(Oe.prototype,"INTERNAL",Oe.prototype.S),Ne.prototype.delete=Ne.prototype.b,Oe.prototype.capi_=function(t){w=t},he.prototype.on=he.prototype.P,he.prototype.resume=he.prototype.T,he.prototype.pause=he.prototype.R,he.prototype.cancel=he.prototype.cancel,he.prototype.then=he.prototype.then,he.prototype.catch=he.prototype.catch,Pe(he.prototype,"snapshot",he.prototype.C),Pe(ce.prototype,"bytesTransferred",ce.prototype.X),Pe(ce.prototype,"totalBytes",ce.prototype.sa),Pe(ce.prototype,"state",ce.prototype.pa),Pe(ce.prototype,"metadata",ce.prototype.ka),Pe(ce.prototype,"downloadURL",ce.prototype.Y),Pe(ce.prototype,"task",ce.prototype.ra),Pe(ce.prototype,"ref",ce.prototype.na),te.STATE_CHANGED="state_changed",ee.RUNNING="running",ee.PAUSED="paused",ee.SUCCESS="success",ee.CANCELED="canceled",ee.ERROR="error",Rt.RAW="raw",Rt.BASE64="base64",Rt.BASE64URL="base64url",Rt.DATA_URL="data_url",function(){function t(t,e,n){return new Oe(t,new ue,n)}var e={TaskState:ee,TaskEvent:te,StringFormat:Rt,Storage:Oe,Reference:Ae};if(void 0===r)throw Error("Cannot install Firebase Storage - be sure to load firebase-app.js first.");r.INTERNAL.registerService("storage",t,e,void 0,!0)}()}).call(this)}).call(void 0!==typeof e?e:void 0!==typeof self?self:void 0!==typeof window?window:{}),t.exports=r.storage}).call(e,n(9))},16:function(t,e,n){"use strict";function r(t){if(!n.i(a.a)(t)||n.i(i.a)(t)!=s)return!1;var e=n.i(o.a)(t);if(null===e)return!0;var r=f.call(e,"constructor")&&e.constructor;return"function"==typeof r&&r instanceof r&&h.call(r)==l}var i=n(49),o=n(51),a=n(56),s="[object Object]",u=Function.prototype,c=Object.prototype,h=u.toString,f=c.hasOwnProperty,l=h.call(Object);e.a=r},23:function(t,e,n){"use strict";function r(){}function i(t){for(var e=t.length,n=Array(e),r=0;r<e;++r)n[r]=t[r];return n}function o(t,e){return function(n){return t(n)&&e(n)}}function a(t,e,n){try{return t.f(e)}catch(t){return n._e(t),h}}function s(t){t._start=function(t){t.next=t._n,t.error=t._e,t.complete=t._c,this.start(t)},t._stop=t.stop}var u=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},c=n(43),h={};e.NO=h;var f={_n:r,_e:r,_c:r};e.NO_IL=f;var l=function(){function t(t,e){this._stream=t,this._listener=e}return t.prototype.unsubscribe=function(){this._stream.removeListener(this._listener)},t}(),p=function(){function t(t){this._listener=t}return t.prototype.next=function(t){this._listener._n(t)},t.prototype.error=function(t){this._listener._e(t)},t.prototype.complete=function(){this._listener._c()},t}(),d=function(){function t(t){this.type="fromObservable",this.ins=t,this.active=!1}return t.prototype._start=function(t){this.out=t,this.active=!0,this._sub=this.ins.subscribe(new p(t)),this.active||this._sub.unsubscribe()},t.prototype._stop=function(){this._sub&&this._sub.unsubscribe(),this.active=!1},t}(),v=function(){function t(t){this.type="merge",this.insArr=t,this.out=h,this.ac=0}return t.prototype._start=function(t){this.out=t;var e=this.insArr,n=e.length;this.ac=n;for(var r=0;r<n;r++)e[r]._add(this)},t.prototype._stop=function(){for(var t=this.insArr,e=t.length,n=0;n<e;n++)t[n]._remove(this);this.out=h},t.prototype._n=function(t){var e=this.out;e!==h&&e._n(t)},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){if(--this.ac<=0){var t=this.out;if(t===h)return;t._c()}},t}(),g=function(){function t(t,e,n){this.i=t,this.out=e,this.p=n,n.ils.push(this)}return t.prototype._n=function(t){var e=this.p,n=this.out;if(n!==h&&e.up(t,this.i)){for(var r=e.vals,i=r.length,o=Array(i),a=0;a<i;++a)o[a]=r[a];n._n(o)}},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){var t=this.p;t.out!==h&&0==--t.Nc&&t.out._c()},t}(),b=function(){function t(t){this.type="combine",this.insArr=t,this.out=h,this.ils=[],this.Nc=this.Nn=0,this.vals=[]}return t.prototype.up=function(t,e){var n=this.vals[e],r=this.Nn?n===h?--this.Nn:this.Nn:0;return this.vals[e]=t,0===r},t.prototype._start=function(t){this.out=t;var e=this.insArr,n=this.Nc=this.Nn=e.length,r=this.vals=new Array(n);if(0===n)t._n([]),t._c();else for(var i=0;i<n;i++)r[i]=h,e[i]._add(new g(i,t,this))},t.prototype._stop=function(){for(var t=this.insArr,e=t.length,n=this.ils,r=0;r<e;r++)t[r]._remove(n[r]);this.out=h,this.ils=[],this.vals=[]},t}(),y=function(){function t(t){this.type="fromArray",this.a=t}return t.prototype._start=function(t){for(var e=this.a,n=0,r=e.length;n<r;n++)t._n(e[n]);t._c()},t.prototype._stop=function(){},t}(),m=function(){function t(t){this.type="fromPromise",this.on=!1,this.p=t}return t.prototype._start=function(t){var e=this;this.on=!0,this.p.then(function(n){e.on&&(t._n(n),t._c())},function(e){t._e(e)}).then(r,function(t){setTimeout(function(){throw t})})},t.prototype._stop=function(){this.on=!1},t}(),w=function(){function t(t){this.type="periodic",this.period=t,this.intervalID=-1,this.i=0}return t.prototype._start=function(t){function e(){t._n(n.i++)}var n=this;this.intervalID=setInterval(e,this.period)},t.prototype._stop=function(){-1!==this.intervalID&&clearInterval(this.intervalID),this.intervalID=-1,this.i=0},t}(),k=function(){function t(t,e){this.type="debug",this.ins=t,this.out=h,this.s=r,this.l="","string"==typeof e?this.l=e:"function"==typeof e&&(this.s=e)}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=h},t.prototype._n=function(t){var e=this.out;if(e!==h){var n=this.s,i=this.l;if(n!==r)try{n(t)}catch(t){e._e(t)}else i?console.log(i+":",t):console.log(t);e._n(t)}},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==h&&t._c()},t}(),T=function(){function t(t,e){this.type="drop",this.ins=e,this.out=h,this.max=t,this.dropped=0}return t.prototype._start=function(t){this.out=t,this.dropped=0,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=h},t.prototype._n=function(t){var e=this.out;e!==h&&this.dropped++>=this.max&&e._n(t)},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==h&&t._c()},t}(),E=function(){function t(t,e){this.out=t,this.op=e}return t.prototype._n=function(){this.op.end()},t.prototype._e=function(t){this.out._e(t)},t.prototype._c=function(){this.op.end()},t}(),_=function(){function t(t,e){this.type="endWhen",this.ins=e,this.out=h,this.o=t,this.oil=f}return t.prototype._start=function(t){this.out=t,this.o._add(this.oil=new E(t,this)),this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.o._remove(this.oil),this.out=h,this.oil=f},t.prototype.end=function(){var t=this.out;t!==h&&t._c()},t.prototype._n=function(t){var e=this.out;e!==h&&e._n(t)},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){this.end()},t}(),A=function(){function t(t,e){this.type="filter",this.ins=e,this.out=h,this.f=t}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=h},t.prototype._n=function(t){var e=this.out;if(e!==h){var n=a(this,t,e);n!==h&&n&&e._n(t)}},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==h&&t._c()},t}(),S=function(){function t(t,e){this.out=t,this.op=e}return t.prototype._n=function(t){this.out._n(t)},t.prototype._e=function(t){this.out._e(t)},t.prototype._c=function(){this.op.inner=h,this.op.less()},t}(),I=function(){function t(t){this.type="flatten",this.ins=t,this.out=h,this.open=!0,this.inner=h,this.il=f}return t.prototype._start=function(t){this.out=t,this.open=!0,this.inner=h,this.il=f,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.inner!==h&&this.inner._remove(this.il),this.out=h,this.open=!0,this.inner=h,this.il=f},t.prototype.less=function(){var t=this.out;t!==h&&(this.open||this.inner!==h||t._c())},t.prototype._n=function(t){var e=this.out;if(e!==h){var n=this,r=n.inner,i=n.il;r!==h&&i!==f&&r._remove(i),(this.inner=t)._add(this.il=new S(e,this))}},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){this.open=!1,this.less()},t}(),O=function(){function t(t,e,n){var r=this;this.type="fold",this.ins=n,this.out=h,this.f=function(e){return t(r.acc,e)},this.acc=this.seed=e}return t.prototype._start=function(t){this.out=t,this.acc=this.seed,t._n(this.acc),this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=h,this.acc=this.seed},t.prototype._n=function(t){var e=this.out;if(e!==h){var n=a(this,t,e);n!==h&&e._n(this.acc=n)}},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==h&&t._c()},t}(),N=function(){function t(t){this.type="last",this.ins=t,this.out=h,this.has=!1,this.val=h}return t.prototype._start=function(t){this.out=t,this.has=!1,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=h,this.val=h},t.prototype._n=function(t){this.has=!0,this.val=t},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==h&&(this.has?(t._n(this.val),t._c()):t._e(new Error("last() failed because input stream completed")))},t}(),P=function(){function t(t,e){this.type="map",this.ins=e,this.out=h,this.f=t}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=h},t.prototype._n=function(t){var e=this.out;if(e!==h){var n=a(this,t,e);n!==h&&e._n(n)}},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==h&&t._c()},t}(),R=function(){function t(t){this.type="remember",this.ins=t,this.out=h}return t.prototype._start=function(t){this.out=t,this.ins._add(t)},t.prototype._stop=function(){this.ins._remove(this.out),this.out=h},t}(),x=function(){function t(t,e){this.type="replaceError",this.ins=e,this.out=h,this.f=t}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=h},t.prototype._n=function(t){var e=this.out;e!==h&&e._n(t)},t.prototype._e=function(t){var e=this.out;if(e!==h)try{this.ins._remove(this),(this.ins=this.f(t))._add(this)}catch(t){e._e(t)}},t.prototype._c=function(){var t=this.out;t!==h&&t._c()},t}(),C=function(){function t(t,e){this.type="startWith",this.ins=t,this.out=h,this.val=e}return t.prototype._start=function(t){this.out=t,this.out._n(this.val),this.ins._add(t)},t.prototype._stop=function(){this.ins._remove(this.out),this.out=h},t}(),j=function(){function t(t,e){this.type="take",this.ins=e,this.out=h,this.max=t,this.taken=0}return t.prototype._start=function(t){this.out=t,this.taken=0,this.max<=0?t._c():this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=h},t.prototype._n=function(t){var e=this.out;if(e!==h){var n=++this.taken;n<this.max?e._n(t):n===this.max&&(e._n(t),e._c())}},t.prototype._e=function(t){var e=this.out;e!==h&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==h&&t._c()},t}(),M=function(){function t(t){this._prod=t||h,this._ils=[],this._stopID=h,this._dl=h,this._d=!1,this._target=h,this._err=h}return t.prototype._n=function(t){var e=this._ils,n=e.length;if(this._d&&this._dl._n(t),1==n)e[0]._n(t);else{if(0==n)return;for(var r=i(e),o=0;o<n;o++)r[o]._n(t)}},t.prototype._e=function(t){if(this._err===h){this._err=t;var e=this._ils,n=e.length;if(this._x(),this._d&&this._dl._e(t),1==n)e[0]._e(t);else{if(0==n)return;for(var r=i(e),o=0;o<n;o++)r[o]._e(t)}if(!this._d&&0==n)throw this._err}},t.prototype._c=function(){var t=this._ils,e=t.length;if(this._x(),this._d&&this._dl._c(),1==e)t[0]._c();else{if(0==e)return;for(var n=i(t),r=0;r<e;r++)n[r]._c()}},t.prototype._x=function(){0!==this._ils.length&&(this._prod!==h&&this._prod._stop(),this._err=h,this._ils=[])},t.prototype._stopNow=function(){this._prod._stop(),this._err=h,this._stopID=h},t.prototype._add=function(t){var e=this._target;if(e!==h)return e._add(t);var n=this._ils;if(n.push(t),!(n.length>1))if(this._stopID!==h)clearTimeout(this._stopID),this._stopID=h;else{var r=this._prod;r!==h&&r._start(this)}},t.prototype._remove=function(t){var e=this,n=this._target;if(n!==h)return n._remove(t);var r=this._ils,i=r.indexOf(t);i>-1&&(r.splice(i,1),this._prod!==h&&r.length<=0?(this._err=h,this._stopID=setTimeout(function(){return e._stopNow()})):1===r.length&&this._pruneCycles())},t.prototype._pruneCycles=function(){this._hasNoSinks(this,[])&&this._remove(this._ils[0])},t.prototype._hasNoSinks=function(t,e){if(-1!==e.indexOf(t))return!0;if(t.out===this)return!0;if(t.out&&t.out!==h)return this._hasNoSinks(t.out,e.concat(t));if(t._ils){for(var n=0,r=t._ils.length;n<r;n++)if(!this._hasNoSinks(t._ils[n],e.concat(t)))return!1;return!0}return!1},t.prototype.ctor=function(){return this instanceof D?D:t},t.prototype.addListener=function(t){t._n=t.next||r,t._e=t.error||r,t._c=t.complete||r,this._add(t)},t.prototype.removeListener=function(t){this._remove(t)},t.prototype.subscribe=function(t){return this.addListener(t),new l(this,t)},t.prototype[c.default]=function(){return this},t.create=function(e){if(e){if("function"!=typeof e.start||"function"!=typeof e.stop)throw new Error("producer requires both start and stop functions");s(e)}return new t(e)},t.createWithMemory=function(t){return t&&s(t),new D(t)},t.never=function(){return new t({_start:r,_stop:r})},t.empty=function(){return new t({_start:function(t){t._c()},_stop:r})},t.throw=function(e){return new t({_start:function(t){t._e(e)},_stop:r})},t.from=function(e){if("function"==typeof e[c.default])return t.fromObservable(e);if("function"==typeof e.then)return t.fromPromise(e);if(Array.isArray(e))return t.fromArray(e);throw new TypeError("Type of input to from() must be an Array, Promise, or Observable")},t.of=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.fromArray(e)},t.fromArray=function(e){return new t(new y(e))},t.fromPromise=function(e){return new t(new m(e))},t.fromObservable=function(e){return e.endWhen?e:new t(new d(e))},t.periodic=function(e){return new t(new w(e))},t.prototype._map=function(t){return new(this.ctor())(new P(t,this))},t.prototype.map=function(t){return this._map(t)},t.prototype.mapTo=function(t){var e=this.map(function(){return t});return e._prod.type="mapTo",e},t.prototype.filter=function(e){var n=this._prod;return new t(n instanceof A?new A(o(n.f,e),n.ins):new A(e,this))},t.prototype.take=function(t){return new(this.ctor())(new j(t,this))},t.prototype.drop=function(e){return new t(new T(e,this))},t.prototype.last=function(){return new t(new N(this))},t.prototype.startWith=function(t){return new D(new C(this,t))},t.prototype.endWhen=function(t){return new(this.ctor())(new _(t,this))},t.prototype.fold=function(t,e){return new D(new O(t,e,this))},t.prototype.replaceError=function(t){return new(this.ctor())(new x(t,this))},t.prototype.flatten=function(){this._prod;return new t(new I(this))},t.prototype.compose=function(t){return t(this)},t.prototype.remember=function(){return new D(new R(this))},t.prototype.debug=function(t){return new(this.ctor())(new k(this,t))},t.prototype.imitate=function(t){if(t instanceof D)throw new Error("A MemoryStream was given to imitate(), but it only supports a Stream. Read more about this restriction here: https://github.com/staltz/xstream#faq");this._target=t;for(var e=this._ils,n=e.length,r=0;r<n;r++)t._add(e[r]);this._ils=[]},t.prototype.shamefullySendNext=function(t){this._n(t)},t.prototype.shamefullySendError=function(t){this._e(t)},t.prototype.shamefullySendComplete=function(){this._c()},t.prototype.setDebugListener=function(t){t?(this._d=!0,t._n=t.next||r,t._e=t.error||r,t._c=t.complete||r,this._dl=t):(this._d=!1,this._dl=h)},t}();M.merge=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new M(new v(t))},M.combine=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return new M(new b(t))},e.Stream=M;var D=function(t){function e(e){var n=t.call(this,e)||this;return n._has=!1,n}return u(e,t),e.prototype._n=function(e){this._v=e,this._has=!0,t.prototype._n.call(this,e)},e.prototype._add=function(t){var e=this._target;if(e!==h)return e._add(t);var n=this._ils;if(n.push(t),n.length>1)return void(this._has&&t._n(this._v));if(this._stopID!==h)this._has&&t._n(this._v),clearTimeout(this._stopID),this._stopID=h;else if(this._has)t._n(this._v);else{var r=this._prod;r!==h&&r._start(this)}},e.prototype._stopNow=function(){this._has=!1,t.prototype._stopNow.call(this)},e.prototype._x=function(){this._has=!1,t.prototype._x.call(this)},e.prototype.map=function(t){return this._map(t)},e.prototype.mapTo=function(e){return t.prototype.mapTo.call(this,e)},e.prototype.take=function(e){return t.prototype.take.call(this,e)},e.prototype.endWhen=function(e){return t.prototype.endWhen.call(this,e)},e.prototype.replaceError=function(e){return t.prototype.replaceError.call(this,e)},e.prototype.remember=function(){return this},e.prototype.debug=function(e){return t.prototype.debug.call(this,e)},e}(M);e.MemoryStream=D,Object.defineProperty(e,"__esModule",{value:!0}),e.default=M},237:function(t,e,n){"use strict";function r(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function i(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){var n=e.map(function(e){return e(t)});return Object.keys(n.reduce(function(t,e){return Object.assign(t,e)},{})).reduce(function(t,e){var i=n.filter(function(t){return t[e]}).map(function(t){return a.default.from(t[e])});return t[e]=a.default.merge.apply(a.default,r(i)),t},{})}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=i;var o=n(23),a=function(t){return t&&t.__esModule?t:{default:t}}(o)},238:function(t,e,n){"use strict";function r(){var t=null,e=null,n=null,r=function(r){return t=r,function(r){return function(i){var o=r(i);return e&&e.next(i),n&&n.next(t.getState()),o}}};return r.makeActionDriver=function(){return function(n){return n.addListener({next:function(e){t&&t.dispatch(e)},error:function(){},complete:function(){}}),(0,a.adapt)(o.default.create({start:function(t){e=t},stop:function(){}}))}},r.makeStateDriver=function(){var e={};return function(){var r=t.getState;return(0,a.adapt)(o.default.create({start:function(t){n=t},stop:function(){}}).fold(function(t,n){return t===r&&(t=r()),t===n?e:n},r).map(function(t){return t===r?r():t}).filter(function(t){return t!==e}))}},r}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var i=n(23),o=function(t){return t&&t.__esModule?t:{default:t}}(i),a=n(44)},239:function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.combineCycles=e.createCycleMiddleware=void 0;var i=n(238),o=r(i),a=n(237),s=r(a);e.createCycleMiddleware=o.default,e.combineCycles=s.default},240:function(t,e,n){(function(t,e){!function(t,n){"use strict";function r(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var r={callback:t,args:e};return c[u]=r,s(u),u++}function i(t){delete c[t]}function o(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}function a(t){if(h)setTimeout(a,0,t);else{var e=c[t];if(e){h=!0;try{o(e)}finally{i(t),h=!1}}}}if(!t.setImmediate){var s,u=1,c={},h=!1,f=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?function(){s=function(t){e.nextTick(function(){a(t)})}}():function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&a(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),s=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){a(t.data)},s=function(e){t.port2.postMessage(e)}}():f&&"onreadystatechange"in f.createElement("script")?function(){var t=f.documentElement;s=function(e){var n=f.createElement("script");n.onreadystatechange=function(){a(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():function(){s=function(t){setTimeout(a,0,t)}}(),l.setImmediate=r,l.clearImmediate=i}}("undefined"==typeof self?void 0===t?this:t:self)}).call(e,n(9),n(36))},241:function(t,e,n){"use strict";var r=n(23),i={},o=function(){function t(t,e){this.i=t,this.p=e,e.ils[t]=this}return t.prototype._n=function(t){var e=this.p;e.out!==i&&e.up(t,this.i)},t.prototype._e=function(t){this.p._e(t)},t.prototype._c=function(){this.p.down(this.i,this)},t}();e.SampleCombineListener=o;var a=function(){function t(t,e){this.type="sampleCombine",this.ins=t,this.others=e,this.out=i,this.ils=[],this.Nn=0,this.vals=[]}return t.prototype._start=function(t){this.out=t;for(var e=this.others,n=this.Nn=e.length,r=this.vals=new Array(n),a=0;a<n;a++)r[a]=i,e[a]._add(new o(a,this));this.ins._add(this)},t.prototype._stop=function(){var t=this.others,e=t.length,n=this.ils;this.ins._remove(this);for(var r=0;r<e;r++)t[r]._remove(n[r]);this.out=i,this.vals=[],this.ils=[]},t.prototype._n=function(t){var e=this.out;e!==i&&(this.Nn>0||e._n([t].concat(this.vals)))},t.prototype._e=function(t){var e=this.out;e!==i&&e._e(t)},t.prototype._c=function(){var t=this.out;t!==i&&t._c()},t.prototype.up=function(t,e){var n=this.vals[e];this.Nn>0&&n===i&&this.Nn--,this.vals[e]=t},t.prototype.down=function(t,e){this.others[t]._remove(e)},t}();e.SampleCombineOperator=a;var s;s=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return new r.Stream(new a(e,t))}},Object.defineProperty(e,"__esModule",{value:!0}),e.default=s},25:function(t,e,n){(function(e,n){/*! @license Firebase v3.9.0
Build: rev-cc77c9e
Terms: https://firebase.google.com/terms/ */
var r=function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=11)}([function(t,e,n){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var r=void 0;if(void 0!==t)r=t;else if("undefined"!=typeof self)r=self;else try{r=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var i=r.Promise||n(8);e.local={Promise:i,GoogPromise:i}}).call(e,n(1))},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(5),i=(0,r.createFirebaseNamespace)();e.default=i,t.exports=e.default},function(t,e,n){"use strict";function r(t){return i(void 0,t)}function i(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&(t[n]=i(t[n],e[n]));return t}function o(t,e,n){t[e]=n}Object.defineProperty(e,"__esModule",{value:!0}),e.deepCopy=r,e.deepExtend=i,e.patchProperty=o},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t){var e=a;return a=t,e}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e.patchCapture=i;var a=Error.captureStackTrace,s=function t(e,n){if(r(this,t),this.code=e,this.message=n,a)a(this,u.prototype.create);else{var i=Error.apply(this,arguments);this.name="FirebaseError",Object.defineProperty(this,"stack",{get:function(){return i.stack}})}};s.prototype=Object.create(Error.prototype),s.prototype.constructor=s,s.prototype.name="FirebaseError";var u=e.ErrorFactory=function(){function t(e,n,i){r(this,t),this.service=e,this.serviceName=n,this.errors=i,this.pattern=/\{\$([^}]+)}/g}return o(t,[{key:"create",value:function(t,e){void 0===e&&(e={});var n=this.errors[t],r=this.service+"/"+t,i=void 0;i=void 0===n?"Error":n.replace(this.pattern,function(t,n){var r=e[n];return void 0!==r?r.toString():"<"+n+"?>"}),i=this.serviceName+": "+i+" ("+r+").";var o=new s(r,i);for(var a in e)e.hasOwnProperty(a)&&"_"!==a.slice(-1)&&(o[a]=e[a]);return o}}]),t}()},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(){function t(t){t=t||l;var e=r[t];return void 0===e&&o("no-app",{name:t}),e}function e(t,e){Object.keys(a).forEach(function(r){var i=n(t,r);null!==i&&d[i]&&d[i](e,t)})}function n(t,e){if("serverAuth"===e)return null;var n=e,r=t.options;return"auth"===e&&(r.serviceAccount||r.credential)&&(n="serverAuth","serverAuth"in a||o("sa-not-supported")),n}var r={},a={},d={},v={__esModule:!0,initializeApp:function(t,n){void 0===n?n=l:"string"==typeof n&&""!==n||o("bad-app-name",{name:n+""}),void 0!==r[n]&&o("duplicate-app",{name:n});var i=new p(t,n,v);return r[n]=i,e(i,"create"),void 0!=i.INTERNAL&&void 0!=i.INTERNAL.getToken||(0,s.deepExtend)(i,{INTERNAL:{getUid:function(){return null},getToken:function(){return f.resolve(null)},addAuthTokenListener:function(){},removeAuthTokenListener:function(){}}}),i},app:t,apps:null,Promise:f,SDK_VERSION:"3.9.0",INTERNAL:{registerService:function(e,n,r,i,u){a[e]&&o("duplicate-service",{name:e}),a[e]=u?n:function(t,e){return n(t,e,l)},i&&(d[e]=i);var c=void 0;return c=function(n){return void 0===n&&(n=t()),"function"!=typeof n[e]&&o("invalid-app-argument",{name:e}),n[e]()},void 0!==r&&(0,s.deepExtend)(c,r),v[e]=c,c},createFirebaseNamespace:i,extendNamespace:function(t){(0,s.deepExtend)(v,t)},createSubscribe:u.createSubscribe,ErrorFactory:c.ErrorFactory,removeApp:function(t){e(r[t],"delete"),delete r[t]},factories:a,useAsService:n,Promise:h.local.GoogPromise,deepExtend:s.deepExtend}};return(0,s.patchProperty)(v,"default",v),Object.defineProperty(v,"apps",{get:function(){return Object.keys(r).map(function(t){return r[t]})}}),(0,s.patchProperty)(t,"App",p),v}function o(t,e){throw v.create(t,e)}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e.createFirebaseNamespace=i;var s=n(3),u=n(6),c=n(4),h=n(0),f=h.local.Promise,l="[DEFAULT]",p=function(){function t(e,n,i){var o=this;r(this,t),this.firebase_=i,this.isDeleted_=!1,this.services_={},this.name_=n,this.options_=(0,s.deepCopy)(e);var a="credential"in this.options_,u="serviceAccount"in this.options_;if(a||u){var c=u?"serviceAccount":"credential";"undefined"!=typeof console&&console.log("The '"+c+"' property specified in the first argument to initializeApp() is deprecated and will be removed in the next major version. You should instead use the 'firebase-admin' package. See https://firebase.google.com/docs/admin/setup for details on how to get started.")}Object.keys(i.INTERNAL.factories).forEach(function(t){var e=i.INTERNAL.useAsService(o,t);if(null!==e){var n=o.getService.bind(o,e);(0,s.patchProperty)(o,t,n)}})}return a(t,[{key:"delete",value:function(){var t=this;return new f(function(e){t.checkDestroyed_(),e()}).then(function(){t.firebase_.INTERNAL.removeApp(t.name_);var e=[];return Object.keys(t.services_).forEach(function(n){Object.keys(t.services_[n]).forEach(function(r){e.push(t.services_[n][r])})}),f.all(e.map(function(t){return t.INTERNAL.delete()}))}).then(function(){t.isDeleted_=!0,t.services_={}})}},{key:"getService",value:function(t,e){this.checkDestroyed_(),void 0===this.services_[t]&&(this.services_[t]={});var n=e||l;if(void 0===this.services_[t][n]){var r=this.firebase_.INTERNAL.factories[t](this,this.extendApp.bind(this),e);return this.services_[t][n]=r,r}return this.services_[t][n]}},{key:"extendApp",value:function(t){(0,s.deepExtend)(this,t)}},{key:"checkDestroyed_",value:function(){this.isDeleted_&&o("app-deleted",{name:this.name_})}},{key:"name",get:function(){return this.checkDestroyed_(),this.name_}},{key:"options",get:function(){return this.checkDestroyed_(),this.options_}}]),t}();p.prototype.name&&p.prototype.options||p.prototype.delete||console.log("dc");var d={"no-app":"No Firebase App '{$name}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$name}","duplicate-app":"Firebase App named '{$name}' already exists","app-deleted":"Firebase App named '{$name}' already deleted","duplicate-service":"Firebase service named '{$name}' already registered","sa-not-supported":"Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain","invalid-app-argument":"firebase.{$name}() takes either no argument or a Firebase App instance."},v=new c.ErrorFactory("app","Firebase",d)},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){var n=new l(t,e);return n.subscribe.bind(n)}function o(t,e){return function(){for(var n=arguments.length,r=Array(n),i=0;i<n;i++)r[i]=arguments[i];f.resolve(!0).then(function(){t.apply(void 0,r)}).catch(function(t){e&&e(t)})}}function a(t,e){if("object"!==(void 0===t?"undefined":u(t))||null===t)return!1;var n=!0,r=!1,i=void 0;try{for(var o,a=e[Symbol.iterator]();!(n=(o=a.next()).done);n=!0){var s=o.value;if(s in t&&"function"==typeof t[s])return!0}}catch(t){r=!0,i=t}finally{try{!n&&a.return&&a.return()}finally{if(r)throw i}}return!1}function s(){}Object.defineProperty(e,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e.createSubscribe=i,e.async=o;var h=n(0),f=h.local.Promise,l=function(){function t(e,n){var i=this;r(this,t),this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=f.resolve(),this.finalized=!1,this.onNoObservers=n,this.task.then(function(){e(i)}).catch(function(t){i.error(t)})}return c(t,[{key:"next",value:function(t){this.forEachObserver(function(e){e.next(t)})}},{key:"error",value:function(t){this.forEachObserver(function(e){e.error(t)}),this.close(t)}},{key:"complete",value:function(){this.forEachObserver(function(t){t.complete()}),this.close()}},{key:"subscribe",value:function(t,e,n){var r=this,i=void 0;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");i=a(t,["next","error","complete"])?t:{next:t,error:e,complete:n},void 0===i.next&&(i.next=s),void 0===i.error&&(i.error=s),void 0===i.complete&&(i.complete=s);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then(function(){try{r.finalError?i.error(r.finalError):i.complete()}catch(t){}}),this.observers.push(i),o}},{key:"unsubscribeOne",value:function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}},{key:"forEachObserver",value:function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)}},{key:"sendOne",value:function(t,e){var n=this;this.task.then(function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}})}},{key:"close",value:function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then(function(){e.observers=void 0,e.onNoObservers=void 0}))}}]),t}()},function(t,e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function i(t){if(h===setTimeout)return setTimeout(t,0);if((h===n||!h)&&setTimeout)return h=setTimeout,setTimeout(t,0);try{return h(t,0)}catch(e){try{return h.call(null,t,0)}catch(e){return h.call(this,t,0)}}}function o(t){if(f===clearTimeout)return clearTimeout(t);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(t);try{return f(t)}catch(e){try{return f.call(null,t)}catch(e){return f.call(this,t)}}}function a(){v&&p&&(v=!1,p.length?d=p.concat(d):g=-1,d.length&&s())}function s(){if(!v){var t=i(a);v=!0;for(var e=d.length;e;){for(p=d,d=[];++g<e;)p&&p[g].run();g=-1,e=d.length}p=null,v=!1,o(t)}}function u(t,e){this.fun=t,this.array=e}function c(){}var h,f,l=t.exports={};!function(){try{h="function"==typeof setTimeout?setTimeout:n}catch(t){h=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(t){f=r}}();var p,d=[],v=!1,g=-1;l.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];d.push(new u(t,e)),1!==d.length||v||i(s)},u.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=c,l.addListener=c,l.once=c,l.off=c,l.removeListener=c,l.removeAllListeners=c,l.emit=c,l.binding=function(t){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(t){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},function(t,e,n){(function(e){!function(n){function r(){}function i(t,e){return function(){t.apply(e,arguments)}}function o(t){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],f(t,this)}function a(t,e){for(;3===t._state;)t=t._value;if(0===t._state)return void t._deferreds.push(e);t._handled=!0,o._immediateFn(function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null===n)return void(1===t._state?s:u)(e.promise,t._value);var r;try{r=n(t._value)}catch(t){return void u(e.promise,t)}s(e.promise,r)})}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof o)return t._state=3,t._value=e,void c(t);if("function"==typeof n)return void f(i(n,e),t)}t._state=1,t._value=e,c(t)}catch(e){u(t,e)}}function u(t,e){t._state=2,t._value=e,c(t)}function c(t){2===t._state&&0===t._deferreds.length&&o._immediateFn(function(){t._handled||o._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)a(t,t._deferreds[e]);t._deferreds=null}function h(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}function f(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,u(e,t))})}catch(t){if(n)return;n=!0,u(e,t)}}var l=setTimeout;o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){var n=new this.constructor(r);return a(this,new h(t,e,n)),n},o.all=function(t){var e=Array.prototype.slice.call(t);return new o(function(t,n){function r(o,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(t){r(o,t)},n)}e[o]=a,0==--i&&t(e)}catch(t){n(t)}}if(0===e.length)return t([]);for(var i=e.length,o=0;o<e.length;o++)r(o,e[o])})},o.resolve=function(t){return t&&"object"==typeof t&&t.constructor===o?t:new o(function(e){e(t)})},o.reject=function(t){return new o(function(e,n){n(t)})},o.race=function(t){return new o(function(e,n){for(var r=0,i=t.length;r<i;r++)t[r].then(e,n)})},o._immediateFn="function"==typeof e&&function(t){e(t)}||function(t){l(t,0)},o._unhandledRejectionFn=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)},o._setImmediateFn=function(t){o._immediateFn=t},o._setUnhandledRejectionFn=function(t){o._unhandledRejectionFn=t},void 0!==t&&t.exports?t.exports=o:n.Promise||(n.Promise=o)}(this)}).call(e,n(10).setImmediate)},function(t,e,n){(function(t,e){!function(t,n){"use strict";function r(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var r={callback:t,args:e};return c[u]=r,s(u),u++}function i(t){delete c[t]}function o(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}function a(t){if(h)setTimeout(a,0,t);else{var e=c[t];if(e){h=!0;try{o(e)}finally{i(t),h=!1}}}}if(!t.setImmediate){var s,u=1,c={},h=!1,f=t.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(t);l=l&&l.setTimeout?l:t,"[object process]"==={}.toString.call(t.process)?function(){s=function(t){e.nextTick(function(){a(t)})}}():function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&a(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),s=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){a(t.data)},s=function(e){t.port2.postMessage(e)}}():f&&"onreadystatechange"in f.createElement("script")?function(){var t=f.documentElement;s=function(e){var n=f.createElement("script");n.onreadystatechange=function(){a(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():function(){s=function(t){setTimeout(a,0,t)}}(),l.setImmediate=r,l.clearImmediate=i}}("undefined"==typeof self?void 0===t?this:t:self)}).call(e,n(1),n(7))},function(t,r,i){function o(t,e){this._id=t,this._clearFn=e}var a=Function.prototype.apply;r.setTimeout=function(){return new o(a.call(setTimeout,window,arguments),clearTimeout)},r.setInterval=function(){return new o(a.call(setInterval,window,arguments),clearInterval)},r.clearTimeout=r.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(window,this._id)},r.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},r.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},r._unrefActive=r.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},i(9),r.setImmediate=e,r.clearImmediate=n},function(t,e,n){t.exports=n(2)}]);t.exports=r}).call(e,n(115).setImmediate,n(115).clearImmediate)},26:function(t,e,n){"use strict";var r=n(55),i=r.a.Symbol;e.a=i},31:function(t,e,n){"use strict";function r(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];if(0===e.length)return function(t){return t};if(1===e.length)return e[0];var r=e[e.length-1],i=e.slice(0,-1);return function(){return i.reduceRight(function(t,e){return e(t)},r.apply(void 0,arguments))}}e.a=r},32:function(t,e,n){"use strict";function r(t,e,o){function u(){y===b&&(y=b.slice())}function c(){return g}function h(t){if("function"!=typeof t)throw new Error("Expected listener to be a function.");var e=!0;return u(),y.push(t),function(){if(e){e=!1,u();var n=y.indexOf(t);y.splice(n,1)}}}function f(t){if(!n.i(i.a)(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(m)throw new Error("Reducers may not dispatch actions.");try{m=!0,g=v(g,t)}finally{m=!1}for(var e=b=y,r=0;r<e.length;r++)e[r]();return t}function l(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");v=t,f({type:s.INIT})}function p(){var t,e=h;return t={subscribe:function(t){function n(){t.next&&t.next(c())}if("object"!=typeof t)throw new TypeError("Expected the observer to be an object.");return n(),{unsubscribe:e(n)}}},t[a.a]=function(){return this},t}var d;if("function"==typeof e&&void 0===o&&(o=e,e=void 0),void 0!==o){if("function"!=typeof o)throw new Error("Expected the enhancer to be a function.");return o(r)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var v=t,g=e,b=[],y=b,m=!1;return f({type:s.INIT}),d={dispatch:f,subscribe:h,getState:c,replaceReducer:l},d[a.a]=p,d}n.d(e,"b",function(){return s}),e.a=r;var i=n(16),o=n(43),a=n.n(o),s={INIT:"@@redux/INIT"}},33:function(t,e,n){"use strict"},35:function(t,e,n){"use strict";function r(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}Object.defineProperty(e,"__esModule",{value:!0});var i=e.perfData=[];e.addToPerf=function(t){return i.push(performance.now()-t.payload.time)},e.resetPerf=function(){return i.length=0},e.getMetrics=function(){var t=i.slice(2,i.length),e=t.length?t.reduce(function(t,e){return t+e},0):"-";return{data:t,mean:t.length?e/t.length:"-",min:t.length?Math.min.apply(Math,r(t)):"-",max:t.length?Math.max.apply(Math,r(t)):"-"}}},36:function(t,e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function i(t){if(h===setTimeout)return setTimeout(t,0);if((h===n||!h)&&setTimeout)return h=setTimeout,setTimeout(t,0);try{return h(t,0)}catch(e){try{return h.call(null,t,0)}catch(e){return h.call(this,t,0)}}}function o(t){if(f===clearTimeout)return clearTimeout(t);if((f===r||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(t);try{return f(t)}catch(e){try{return f.call(null,t)}catch(e){return f.call(this,t)}}}function a(){v&&p&&(v=!1,p.length?d=p.concat(d):g=-1,d.length&&s())}function s(){if(!v){var t=i(a);v=!0;for(var e=d.length;e;){for(p=d,d=[];++g<e;)p&&p[g].run();g=-1,e=d.length}p=null,v=!1,o(t)}}function u(t,e){this.fun=t,this.array=e}function c(){}var h,f,l=t.exports={};!function(){try{h="function"==typeof setTimeout?setTimeout:n}catch(t){h=n}try{f="function"==typeof clearTimeout?clearTimeout:r}catch(t){f=r}}();var p,d=[],v=!1,g=-1;l.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];d.push(new u(t,e)),1!==d.length||v||i(s)},u.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=c,l.addListener=c,l.once=c,l.off=c,l.removeListener=c,l.removeAllListeners=c,l.emit=c,l.prependListener=c,l.prependOnceListener=c,l.listeners=function(t){return[]},l.binding=function(t){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(t){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}},42:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(32),i=n(78),o=n(77),a=n(76),s=n(31);n(33);n.d(e,"createStore",function(){return r.a}),n.d(e,"combineReducers",function(){return i.a}),n.d(e,"bindActionCreators",function(){return o.a}),n.d(e,"applyMiddleware",function(){return a.a}),n.d(e,"compose",function(){return s.a})},43:function(t,e,n){t.exports=n(79)},44:function(t,e,n){"use strict";function r(t){o=t}function i(t){return o(t)}Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){return t};e.setAdapt=r,e.adapt=i},45:function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=n(13),a=n(12),s=function(){function t(e){var n=e.logger;r(this,t),this.logger=n,this.actions=[],this.ticking=!1,this.send=o.sendToMain.bind(this),this.pushAction=this.pushAction.bind(this),this.sendActions=this.sendActions.bind(this),this.dispatch=this.dispatch.bind(this),this.startTicking=this.startTicking.bind(this),this.stopTicking=this.stopTicking.bind(this),this.tick=this.tick.bind(this)}return i(t,[{key:"pushAction",value:function(t){this.logger&&(0,a.logWithPerf)("TO MAIN    ",t),this.actions.push(t)}},{key:"sendActions",value:function(){this.send({actions:this.actions}),this.actions.length=0}},{key:"dispatch",value:function(t){if(this.pushAction(t),!this.ticking)return this.sendActions()}},{key:"startTicking",value:function(){this.ticking=!0}},{key:"stopTicking",value:function(){this.ticking=!1}},{key:"tick",value:function(t){this.pushAction({type:"TICKER_PONG",payload:{count:t.payload.count,time:t.payload.time},meta:{toMain:!0}}),this.sendActions()}}]),t}();e.default=s},46:function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.createMainMiddleware=e.createWorkerMiddleware=e.listenToThread=void 0;var i=n(47),o=r(i),a=n(45),s=r(a),u=(n(13),n(35)),c=n(12),h=e.listenToThread=function(t,e){(e||self).addEventListener("message",function(e){var n=JSON.parse(e.data);n.actions&&n.actions.forEach(function(e){t.dispatch(e)})})},f=function(t){var e=t.logger,n=t.action,r=t.messager,i=t.next;return e&&(0,c.logWithPerf)("FROM WORKER",n),"TICKER_START"===n.type&&((0,u.resetPerf)(),r.startTicking()),"TICKER_STOP"===n.type&&r.stopTicking(),"TICKER_PONG"===n.type&&(0,u.addToPerf)(n),i(n)},l=function(t){var e=(t.logger,t.action),n=t.messager;n.dispatch(e),"TICKER_STOP"===e.type&&n.stopTicking(),"TICKER_START"===e.type&&n.startTicking()},p=function(t){var e=t.logger,n=t.action,r=t.messager,i=t.next;return e&&(0,c.logWithPerf)("FROM MAIN  ",n),"TICKER_START"===n.type&&((0,u.resetPerf)(),r.startTicking()),"TICKER_STOP"===n.type&&r.stopTicking(),"TICKER_PING"===n.type&&r.tick(n),i(n)};e.createWorkerMiddleware=function(t){var e=t.logger,n=t.worker;return function(t){h(t,n);var r=new o.default({logger:e,worker:n});return function(t){return function(n){return n.meta&&n.meta.toWorker?r.dispatch(n):n.meta&&n.meta.toMain?f({logger:e,action:n,messager:r,next:t}):void(e&&console.log("WITHOUT DIRECTION",n))}}}},e.createMainMiddleware=function(t){var e=t.logger;return function(t){h(t);var n=new s.default({logger:e});return function(t){return function(r){return r&&r.meta&&r.meta.toMain?l({logger:e,action:r,messager:n}):r&&r.meta&&r.meta.toWorker?p({logger:e,action:r,messager:n,next:t}):void(e&&console.log("WITHOUT DIRECTION",r))}}}}},47:function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=n(13),a=n(12),s=function(){function t(e){var n=e.logger,i=e.worker;r(this,t),this.logger=n,this.ticking=!1,this.count=0,this.actions=[],this.send=(0,o.sendToWorker)(i).bind(this),this.sendActions=this.sendActions.bind(this),this.dispatch=this.dispatch.bind(this),this.startTicking=this.startTicking.bind(this),this.stopTicking=this.stopTicking.bind(this),this.tick=this.tick.bind(this)}return i(t,[{key:"sendActions",value:function(){0!==this.actions.length&&(this.send({actions:this.actions}),this.actions.length=0)}},{key:"dispatch",value:function(t){this.logger&&(0,a.logWithPerf)("TO WORKER  ",t),this.actions.push(t),this.ticking||this.sendActions()}},{key:"startTicking",value:function(){this.ticking=!0,this.count=0,requestAnimationFrame(this.tick)}},{key:"stopTicking",value:function(){this.ticking=!1,this.sendActions()}},{key:"tick",value:function(){this.ticking&&(requestAnimationFrame(this.tick),this.dispatch({type:"TICKER_PING",payload:{count:this.count,time:performance.now()},meta:{toWorker:!0}}),this.sendActions(),this.count++)}}]),t}();e.default=s},49:function(t,e,n){"use strict";function r(t){return null==t?void 0===t?u:s:c&&c in Object(t)?n.i(o.a)(t):n.i(a.a)(t)}var i=n(26),o=n(52),a=n(53),s="[object Null]",u="[object Undefined]",c=i.a?i.a.toStringTag:void 0;e.a=r},50:function(t,e,n){"use strict";(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.a=n}).call(e,n(9))},51:function(t,e,n){"use strict";var r=n(54),i=n.i(r.a)(Object.getPrototypeOf,Object);e.a=i},52:function(t,e,n){"use strict";function r(t){var e=a.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var i=s.call(t);return r&&(e?t[u]=n:delete t[u]),i}var i=n(26),o=Object.prototype,a=o.hasOwnProperty,s=o.toString,u=i.a?i.a.toStringTag:void 0;e.a=r},53:function(t,e,n){"use strict";function r(t){return o.call(t)}var i=Object.prototype,o=i.toString;e.a=r},54:function(t,e,n){"use strict";function r(t,e){return function(n){return t(e(n))}}e.a=r},55:function(t,e,n){"use strict";var r=n(50),i="object"==typeof self&&self&&self.Object===Object&&self,o=r.a||i||Function("return this")();e.a=o},56:function(t,e,n){"use strict";function r(t){return null!=t&&"object"==typeof t}e.a=r},76:function(t,e,n){"use strict";function r(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(n,r,a){var s=t(n,r,a),u=s.dispatch,c=[],h={getState:s.getState,dispatch:function(t){return u(t)}};return c=e.map(function(t){return t(h)}),u=i.a.apply(void 0,c)(s.dispatch),o({},s,{dispatch:u})}}}e.a=r;var i=n(31),o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}},77:function(t,e,n){"use strict";function r(t,e){return function(){return e(t.apply(void 0,arguments))}}function i(t,e){if("function"==typeof t)return r(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(t),i={},o=0;o<n.length;o++){var a=n[o],s=t[a];"function"==typeof s&&(i[a]=r(s,e))}return i}e.a=i},78:function(t,e,n){"use strict";function r(t,e){var n=e&&e.type;return"Given action "+(n&&'"'+n.toString()+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state.'}function i(t){Object.keys(t).forEach(function(e){var n=t[e];if(void 0===n(void 0,{type:a.b.INIT}))throw new Error('Reducer "'+e+'" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined.');if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+a.b.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined.')})}function o(t){for(var e=Object.keys(t),n={},o=0;o<e.length;o++){var a=e[o];"function"==typeof t[a]&&(n[a]=t[a])}var s,u=Object.keys(n);try{i(n)}catch(t){s=t}return function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=arguments[1];if(s)throw s;for(var i=!1,o={},a=0;a<u.length;a++){var c=u[a],h=n[c],f=t[c],l=h(f,e);if(void 0===l){var p=r(c,e);throw new Error(p)}o[c]=l,i=i||l!==f}return i?o:t}}e.a=o;var a=n(32);n(16),n(33)},79:function(t,e,n){"use strict";(function(t,r){Object.defineProperty(e,"__esModule",{value:!0});var i,o=n(80),a=function(t){return t&&t.__esModule?t:{default:t}}(o);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var s=(0,a.default)(i);e.default=s}).call(e,n(9),n(81)(t))},80:function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}Object.defineProperty(e,"__esModule",{value:!0}),e.default=r},81:function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},9:function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,